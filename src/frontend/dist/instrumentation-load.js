/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@honeycombio/opentelemetry-web/dist/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/dist/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobalErrorsInstrumentation: () => (/* binding */ GlobalErrorsInstrumentation),
/* harmony export */   HoneycombWebSDK: () => (/* binding */ HoneycombWebSDK),
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract),
/* harmony export */   UserInteractionInstrumentation: () => (/* reexport safe */ _user_interaction_instrumentation_DwDrGIZ6_js__WEBPACK_IMPORTED_MODULE_1__.U),
/* harmony export */   WebSDK: () => (/* binding */ WebSDK),
/* harmony export */   WebVitalsInstrumentation: () => (/* binding */ WebVitalsInstrumentation),
/* harmony export */   getStructuredStackTrace: () => (/* binding */ getStructuredStackTrace),
/* harmony export */   recordException: () => (/* binding */ recordException)
/* harmony export */ });
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js");
/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/resources */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/Resource.js");
/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/resources */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/detect-resources.js");
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js");
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js");
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js");
/* harmony import */ var _opentelemetry_opentelemetry_browser_detector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/opentelemetry-browser-detector */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/index.js");
/* harmony import */ var _user_interaction_instrumentation_DwDrGIZ6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-interaction-instrumentation-DwDrGIZ6.js */ "./node_modules/@honeycombio/opentelemetry-web/dist/esm/user-interaction-instrumentation-DwDrGIZ6.js");
/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js");
/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag/types.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/status.js");
/* harmony import */ var _opentelemetry_web_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @opentelemetry/web-common */ "./node_modules/@opentelemetry/web-common/build/esm/utils.js");
/* harmony import */ var _opentelemetry_exporter_trace_otlp_http__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @opentelemetry/exporter-trace-otlp-http */ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/ExportResult.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tracekit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tracekit */ "./node_modules/tracekit/tracekit.js");
/* harmony import */ var tracekit__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(tracekit__WEBPACK_IMPORTED_MODULE_4__);
















// This code will eventually be packaged upstream into a WebSDK package.
// Once it is released as a package, this distro will depend directly on the upstream package.
// https://github.com/open-telemetry/opentelemetry-js/pull/4325
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** This class represents everything needed to register a fully configured OpenTelemetry Web SDK */
class WebSDK {
  /**
   * Create a new Web SDK instance
   */
  constructor(configuration = {}) {
    var _a, _b, _c, _d;
    this._resource = (_a = configuration.resource) !== null && _a !== void 0 ? _a : new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({});
    this._resourceDetectors = (_b = configuration.resourceDetectors) !== null && _b !== void 0 ? _b : [_opentelemetry_opentelemetry_browser_detector__WEBPACK_IMPORTED_MODULE_0__.browserDetector];
    this._serviceName = configuration.serviceName;
    this._autoDetectResources = (_c = configuration.autoDetectResources) !== null && _c !== void 0 ? _c : true;
    if (configuration.spanProcessor || configuration.traceExporter) {
      const tracerProviderConfig = {};
      if (configuration.sampler) {
        tracerProviderConfig.sampler = configuration.sampler;
      }
      if (configuration.spanLimits) {
        tracerProviderConfig.spanLimits = configuration.spanLimits;
      }
      if (configuration.idGenerator) {
        tracerProviderConfig.idGenerator = configuration.idGenerator;
      }
      const spanProcessor = (_d = configuration.spanProcessor) !== null && _d !== void 0 ? _d : new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__.BatchSpanProcessor(configuration.traceExporter);
      this._tracerProviderConfig = {
        tracerConfig: tracerProviderConfig,
        spanProcessor,
        contextManager: configuration.contextManager,
        textMapPropagator: configuration.textMapPropagator
      };
    }
    let instrumentations = [];
    if (configuration.instrumentations) {
      instrumentations = configuration.instrumentations;
    }
    this._instrumentations = instrumentations;
  }
  /**
   * Call this method to construct SDK components and register them with the OpenTelemetry API.
   */
  start() {
    var _a, _b, _c;
    if (this._disabled) {
      return;
    }
    (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_7__.registerInstrumentations)({
      instrumentations: this._instrumentations
    });
    if (this._autoDetectResources) {
      const internalConfig = {
        detectors: this._resourceDetectors
      };
      this._resource = this._resource.merge((0,_opentelemetry_resources__WEBPACK_IMPORTED_MODULE_8__.detectResourcesSync)(internalConfig));
    }
    this._resource = this._serviceName === undefined ? this._resource : this._resource.merge(new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({
      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_9__.SEMRESATTRS_SERVICE_NAME]: this._serviceName
    }));
    const tracerProvider = new _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_10__.WebTracerProvider(Object.assign(Object.assign({}, (_a = this._tracerProviderConfig) === null || _a === void 0 ? void 0 : _a.tracerConfig), {
      resource: this._resource
    }));
    this._tracerProvider = tracerProvider;
    if (this._tracerProviderConfig) {
      tracerProvider.addSpanProcessor(this._tracerProviderConfig.spanProcessor);
    }
    tracerProvider.register({
      contextManager: (_b = this._tracerProviderConfig) === null || _b === void 0 ? void 0 : _b.contextManager,
      propagator: (_c = this._tracerProviderConfig) === null || _c === void 0 ? void 0 : _c.textMapPropagator
    });
  }
  /* Experimental getter method: not currently part of the upstream
   * sdk's API */
  getResourceAttributes() {
    return this._resource.attributes;
  }
  shutdown() {
    const promises = [];
    if (this._tracerProvider) {
      promises.push(this._tracerProvider.shutdown());
    }
    return Promise.all(promises)
    // return void instead of the array from Promise.all
    .then(() => {});
  }
}

function configureHoneycombResource() {
  return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({
    'honeycomb.distro.version': _user_interaction_instrumentation_DwDrGIZ6_js__WEBPACK_IMPORTED_MODULE_1__.V,
    'honeycomb.distro.runtime_version': 'browser'
  });
}

const defaultConfig = {
  path: true,
  hash: true,
  hostname: true,
  referrer: true,
  url: false,
  search: false
};
function configureEntryPageResource(config) {
  if (config === false || !(window === null || window === void 0 ? void 0 : window.location)) {
    return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({});
  }
  const options = getOptions(config);
  const {
    href,
    pathname,
    search,
    hash,
    hostname
  } = window.location;
  const attributes = {
    'entry_page.url': optionalAttribute(options.url, href),
    'entry_page.path': optionalAttribute(options.path, pathname),
    'entry_page.search': optionalAttribute(options.search, search),
    'entry_page.hash': optionalAttribute(options.hash, hash),
    'entry_page.hostname': optionalAttribute(options.hostname, hostname),
    'entry_page.referrer': optionalAttribute(options.referrer, document.referrer)
  };
  return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource(attributes);
}
function getOptions(config) {
  if (!config) {
    return defaultConfig;
  }
  return Object.assign(Object.assign({}, defaultConfig), config);
}
function optionalAttribute(shouldInclude, attribute) {
  if (!shouldInclude) {
    return undefined;
  }
  return attribute;
}

const computeScreenSize = screenWidth => {
  if (screenWidth <= 768) return 'small';else if (screenWidth > 768 && screenWidth <= 1024) return 'medium';else if (screenWidth > 1024) return 'large';
  return 'unknown';
};
const computeNetworkType = networkInformation => {
  var _a;
  return (_a = networkInformation === null || networkInformation === void 0 ? void 0 : networkInformation.effectiveType) !== null && _a !== void 0 ? _a : 'unknown';
};
const computeDeviceType = (detectedDeviceType, detectedBrowserName) => {
  // ua-parser-js doesn't fill in device type unless it's in the user agent directly
  // which means that desktops/laptops show up as undefined
  // https://github.com/faisalman/ua-parser-js/issues/182
  //
  // we're going to do this:
  // browser name & device type both undefined -> unknown
  // browser name defined & device type undefined -> desktop
  // device type defined -> use that
  if (!detectedDeviceType && !detectedBrowserName) {
    return 'unknown';
  }
  if (!detectedDeviceType) {
    return 'desktop';
  }
  return detectedDeviceType;
};
const computeDeviceProperties = userAgent => {
  const uaParser = new (ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default())(userAgent);
  const {
    name: browserName,
    version: browserVersion
  } = uaParser.getBrowser();
  return {
    browserName: browserName !== null && browserName !== void 0 ? browserName : 'unknown',
    browserVersion: browserVersion !== null && browserVersion !== void 0 ? browserVersion : 'unknown',
    deviceType: computeDeviceType(uaParser.getDevice().type, browserName)
  };
};
function configureBrowserAttributesResource() {
  const {
    browserName,
    browserVersion,
    deviceType
  } = computeDeviceProperties(navigator.userAgent);
  return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({
    'user_agent.original': navigator.userAgent,
    //https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#mobile_tablet_or_desktop
    'browser.mobile': navigator.userAgent.includes('Mobi'),
    'browser.touch_screen_enabled': navigator.maxTouchPoints > 0,
    'browser.language': navigator.language,
    'browser.name': browserName,
    'browser.version': browserVersion,
    'device.type': deviceType,
    'network.effectiveType': computeNetworkType(navigator.connection),
    'screen.width': window.screen.width,
    'screen.height': window.screen.height,
    'screen.size': computeScreenSize(window.screen.width)
  });
}

/* Takes an array of resources and merges into one mega-resource */
function mergeResources(resources) {
  let mergedResources = validateResource(resources[0]);
  for (let i = 1; i < resources.length; i++) {
    if (!resources[i]) {
      continue;
    }
    const resource = validateResource(resources[i]);
    mergedResources = mergedResources.merge(resource);
  }
  return mergedResources;
}
function validateResource(resource) {
  if (resource instanceof _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource) {
    return resource;
  }
  if (resource) {
    return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource(resource);
  }
  return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({});
}

// Constants
const DEFAULT_API_ENDPOINT = 'https://api.honeycomb.io';
const TRACES_PATH = 'v1/traces';
const DEFAULT_TRACES_ENDPOINT = `${DEFAULT_API_ENDPOINT}/${TRACES_PATH}`;
const DEFAULT_SERVICE_NAME = 'unknown_service';
const DEFAULT_SAMPLE_RATE = 1;
/**
 * Default options for the Honeycomb Web SDK.
 */
const defaultOptions = {
  apiKey: '',
  tracesApiKey: '',
  endpoint: DEFAULT_TRACES_ENDPOINT,
  tracesEndpoint: DEFAULT_TRACES_ENDPOINT,
  serviceName: DEFAULT_SERVICE_NAME,
  debug: false,
  sampleRate: 1,
  skipOptionsValidation: false,
  localVisualizations: false,
  webVitalsInstrumentationConfig: {
    enabled: true
  }
};
const createHoneycombSDKLogMessage = message => `@honeycombio/opentelemetry-web: ${message}`;
const classicKeyRegex = /^[a-f0-9]*$/;
const ingestClassicKeyRegex = /^hc[a-z]ic_[a-z0-9]*$/;
/**
 * Determines whether the passed in apikey is classic or not.
 *
 * @param apikey the apikey
 * @returns a boolean to indicate if the apikey was a classic key
 */
function isClassic(apikey) {
  if (apikey == null || apikey.length === 0) {
    return false;
  } else if (apikey.length === 32) {
    return classicKeyRegex.test(apikey);
  } else if (apikey.length === 64) {
    return ingestClassicKeyRegex.test(apikey);
  }
  return false;
}
/**
 * Checks for and appends v1/traces to provided URL if missing when using an HTTP
 * based exporter protocol.
 *
 * @param url the base URL to append traces path to if missing
 * @returns the endpoint with traces path appended if missing
 */
function maybeAppendTracesPath(url) {
  if (url.endsWith(TRACES_PATH) || url.endsWith(`${TRACES_PATH}/`)) {
    return url;
  }
  return url.endsWith('/') ? url + TRACES_PATH : url + '/' + TRACES_PATH;
}
const getTracesEndpoint = options => {
  // use `tracesEndpoint` option unchanged if provided
  if (options === null || options === void 0 ? void 0 : options.tracesEndpoint) {
    return options.tracesEndpoint;
  }
  // use `endpoint` option if provided and append '/v1/traces' if not already appended
  if (options === null || options === void 0 ? void 0 : options.endpoint) {
    return maybeAppendTracesPath(options.endpoint);
  }
  return DEFAULT_TRACES_ENDPOINT;
};
const getTracesApiKey = options => {
  return (options === null || options === void 0 ? void 0 : options.tracesApiKey) || (options === null || options === void 0 ? void 0 : options.apiKey);
};
const getSampleRate = options => {
  if (
  // must be a whole positive integer
  typeof (options === null || options === void 0 ? void 0 : options.sampleRate) === 'number' && Number.isSafeInteger(options === null || options === void 0 ? void 0 : options.sampleRate) && (options === null || options === void 0 ? void 0 : options.sampleRate) >= 0) {
    return options === null || options === void 0 ? void 0 : options.sampleRate;
  }
  return DEFAULT_SAMPLE_RATE;
};

const MISSING_API_KEY_ERROR = createHoneycombSDKLogMessage('❌ Missing API Key. Set `apiKey` in HoneycombOptions. Telemetry will not be exported.');
const MISSING_SERVICE_NAME_ERROR = createHoneycombSDKLogMessage(`❌ Missing Service Name. Set \`serviceName\` in HoneycombOptions. Defaulting to '${defaultOptions.serviceName}'`);
const IGNORED_DATASET_ERROR = createHoneycombSDKLogMessage('🔕 Dataset is ignored in favor of service name.');
const MISSING_DATASET_ERROR = createHoneycombSDKLogMessage('❌ Missing dataset. Specify either HONEYCOMB_DATASET environment variable or dataset in the options parameter.');
const SKIPPING_OPTIONS_VALIDATION_MSG = createHoneycombSDKLogMessage('⏭️ Skipping options validation. To re-enable, set skipOptionsValidation option or HONEYCOMB_SKIP_OPTIONS_VALIDATION to false.');
const CUSTOM_COLLECTOR_VALIDATION_MSG = createHoneycombSDKLogMessage('⏭️ Skipping options validation, because a custom collector is being used.');
const SAMPLER_OVERRIDE_WARNING = createHoneycombSDKLogMessage('🔨 Default deterministic sampler has been overridden. Honeycomb requires a resource attribute called SampleRate to properly show weighted values. Non-deterministic sampleRate could lead to missing spans in Honeycomb. See our docs for more details. https://docs.honeycomb.io/getting-data-in/opentelemetry/node-distro/#sampling-without-the-honeycomb-sdk');
const MISSING_FIELDS_FOR_LOCAL_VISUALIZATIONS = createHoneycombSDKLogMessage('🔕 Disabling local visualizations - must have both service name and API key configured.');
const MISSING_FIELDS_FOR_GENERATING_LINKS = createHoneycombSDKLogMessage('🔕 Disabling local visualizations - cannot infer auth and ui url roots from endpoint url.');
const FAILED_AUTH_FOR_LOCAL_VISUALIZATIONS = createHoneycombSDKLogMessage('🔕 Failed to get proper auth response from Honeycomb. No local visualization available.');
const NO_EXPORTERS_DISABLED_DEFAULT = createHoneycombSDKLogMessage('🔕 Default honeycomb exporter disabled but no exporters provided');
/**
 * Returns true iff the endpoint is *not* a Honeycomb endpoint, such as api.honeycomb.io or
 * api.eu1.honeycomb.io.
 */
const isCustomCollector = endpoint => {
  try {
    const url = new URL(endpoint);
    return !url.hostname.endsWith('.honeycomb.io');
  } catch (_a) {
    // If URL.parse fails, assume this isn't a custom collector,
    // so that normal options validation happens.
    return false;
  }
};
const validateOptionsWarnings = options => {
  var _a, _b;
  const logLevel = (options === null || options === void 0 ? void 0 : options.logLevel) ? options.logLevel : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG;
  if (options === null || options === void 0 ? void 0 : options.skipOptionsValidation) {
    if (logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG) {
      console.debug(SKIPPING_OPTIONS_VALIDATION_MSG);
    }
    return;
  }
  const endpoint = (_a = options === null || options === void 0 ? void 0 : options.tracesEndpoint) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.endpoint;
  if (endpoint && isCustomCollector(endpoint)) {
    if (logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG) {
      console.debug(CUSTOM_COLLECTOR_VALIDATION_MSG);
    }
    return;
  }
  // warn if api key is missing
  if (!(options === null || options === void 0 ? void 0 : options.apiKey) && logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.WARN) {
    console.warn(MISSING_API_KEY_ERROR);
  }
  // warn if service name is missing
  if (!(options === null || options === void 0 ? void 0 : options.serviceName) && logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.WARN) {
    console.warn(MISSING_SERVICE_NAME_ERROR);
  }
  // warn if dataset is set while using an environment-aware key
  if ((options === null || options === void 0 ? void 0 : options.apiKey) && !isClassic(options === null || options === void 0 ? void 0 : options.apiKey) && (options === null || options === void 0 ? void 0 : options.dataset) && logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.WARN) {
    console.warn(IGNORED_DATASET_ERROR);
  }
  // warn if dataset is missing if using classic key
  if ((options === null || options === void 0 ? void 0 : options.apiKey) && isClassic(options === null || options === void 0 ? void 0 : options.apiKey) && !(options === null || options === void 0 ? void 0 : options.dataset) && logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.WARN) {
    console.warn(MISSING_DATASET_ERROR);
  }
  // warn if custom sampler provided
  if ((options === null || options === void 0 ? void 0 : options.sampler) && logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG) {
    console.debug(SAMPLER_OVERRIDE_WARNING);
  }
  // warn if no exporter will be set
  if ((options === null || options === void 0 ? void 0 : options.disableDefaultTraceExporter) === true && !(options === null || options === void 0 ? void 0 : options.traceExporter) && !((_b = options === null || options === void 0 ? void 0 : options.traceExporters) === null || _b === void 0 ? void 0 : _b.length)) {
    console.warn(NO_EXPORTERS_DISABLED_DEFAULT);
  }
  return options;
};

/**
 * Configures the Honeycomb Web SDK to log debug information to the console.
 * Enables the DiagConsoleLogger and sets the log level to DEBUG.
 * Logs the provided Honeycomb options to the console, as well as defaults.
 *
 * @param options the provided Honeycomb options
 */
function configureDebug(options) {
  if (!(options === null || options === void 0 ? void 0 : options.debug)) {
    return;
  }
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.setLogger(new _opentelemetry_api__WEBPACK_IMPORTED_MODULE_13__.DiagConsoleLogger(), _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG);
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(createHoneycombSDKLogMessage('🐝 Honeycomb Web SDK Debug Mode Enabled 🐝'));
  // traces endpoint must be computed from provided options
  const tracesEndpoint = getTracesEndpoint(options);
  const currentOptions = Object.assign(Object.assign(Object.assign({}, defaultOptions), options), {
    tracesEndpoint
  });
  debugTracesApiKey(currentOptions);
  debugServiceName(currentOptions);
  debugTracesEndpoint(currentOptions);
  debugSampleRate(currentOptions);
}
function debugTracesApiKey(options) {
  const tracesApiKey = getTracesApiKey(options) || '';
  if (!tracesApiKey) {
    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(MISSING_API_KEY_ERROR);
    return;
  }
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(createHoneycombSDKLogMessage(`API Key configured for traces: '${tracesApiKey}'`));
}
function debugServiceName(options) {
  const serviceName = options.serviceName || defaultOptions.serviceName;
  if (serviceName === defaultOptions.serviceName) {
    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(MISSING_SERVICE_NAME_ERROR);
    return;
  }
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(`@honeycombio/opentelemetry-web: Service Name configured for traces: '${serviceName}'`);
}
function debugTracesEndpoint(options) {
  const tracesEndpoint = getTracesEndpoint(options);
  if (!tracesEndpoint) {
    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(createHoneycombSDKLogMessage('No endpoint configured for traces'));
    return;
  }
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(createHoneycombSDKLogMessage(`Endpoint configured for traces: '${tracesEndpoint}'`));
}
function debugSampleRate(options) {
  const sampleRate = getSampleRate(options);
  if (!sampleRate) {
    // this should never happen, but guard just in case?
    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug('No sampler configured for traces');
    return;
  }
  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(createHoneycombSDKLogMessage(`Sample Rate configured for traces: '${sampleRate}'`));
}

/**
 * A {@link SpanProcessor} that reads entries stored in {@link Baggage}
 * from the parent context and adds the baggage entries' keys and values
 * to the span as attributes on span start.
 *
 * Keys and values added to Baggage will appear on subsequent child
 * spans for a trace within this service *and* be propagated to external
 * services in accordance with any configured propagation formats
 * configured. If the external services also have a Baggage span
 * processor, the keys and values will appear in those child spans as
 * well.
 *
 * ⚠ Warning ⚠️
 *
 * Do not put sensitive information in Baggage.
 *
 * To repeat: a consequence of adding data to Baggage is that the keys and
 * values will appear in all outgoing HTTP headers from the application.
 */
class BaggageSpanProcessor {
  constructor() {}
  onStart(span, parentContext) {
    var _a, _b;
    ((_b = (_a = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__.propagation.getBaggage(parentContext)) === null || _a === void 0 ? void 0 : _a.getAllEntries()) !== null && _b !== void 0 ? _b : []).forEach(entry => {
      span.setAttribute(entry[0], entry[1].value);
      _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.debug(`@honeycombio/opentelemetry-web: 🚨 Baggage in all outgoing headers: ${entry[0]}=${entry[1].value} `);
    });
  }
  onEnd() {}
  forceFlush() {
    return Promise.resolve();
  }
  shutdown() {
    return Promise.resolve();
  }
}

/**
 * A {@link SpanProcessor} that adds browser specific attributes to each span
 * that might change over the course of a session.
 * Static attributes (e.g. User Agent) are added to the Resource.
 */
class BrowserAttributesSpanProcessor {
  constructor() {}
  onStart(span) {
    const {
      href,
      pathname,
      search,
      hash,
      hostname
    } = window.location;
    span.setAttributes({
      'browser.width': window.innerWidth,
      'browser.height': window.innerHeight,
      'page.hash': hash,
      'page.url': href,
      'page.route': pathname,
      'page.hostname': hostname,
      'page.search': search,
      'url.path': pathname
    });
  }
  onEnd() {}
  forceFlush() {
    return Promise.resolve();
  }
  shutdown() {
    return Promise.resolve();
  }
}

const generator = new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_15__.RandomIdGenerator();
const sessionId = generator.generateTraceId();
const defaultSessionProvider = {
  getSessionId: () => sessionId
};

const TEAM_HEADER_KEY = 'x-honeycomb-team';
const DATASET_HEADER_KEY = 'x-honeycomb-dataset';
/**
 * Builds and returns an OTLP Traces exporter that sends data over http/json
 * @param options The {@link HoneycombOptions} used to configure the exporter
 * @returns a {@link SpanExporter} configured to send telemetry to Honeycomb over http/json
 */
function configureHoneycombHttpJsonTraceExporter(options) {
  const apiKey = getTracesApiKey(options);
  return new _opentelemetry_exporter_trace_otlp_http__WEBPACK_IMPORTED_MODULE_16__.OTLPTraceExporter({
    url: getTracesEndpoint(options),
    headers: configureHeaders(options, apiKey)
  });
}
function configureHeaders(options, apiKey) {
  const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
  if (apiKey && !headers[TEAM_HEADER_KEY]) {
    headers[TEAM_HEADER_KEY] = apiKey;
  }
  if (isClassic(apiKey) && (options === null || options === void 0 ? void 0 : options.dataset)) {
    headers[DATASET_HEADER_KEY] = options === null || options === void 0 ? void 0 : options.dataset;
  }
  return headers;
}

/**
 * Builds and returns a new {@link SpanExporter} that wraps the provided array
 * of {@link SpanExporter}s
 *
 * @param exporters the exporters to wrap with the composite exporter
 * @returns the configured {@link SpanExporter} instance
 */
function configureCompositeExporter(exporters) {
  return new CompositeSpanExporter(exporters);
}
/**
 * A custom SpanExporter that wraps a number of other exporters and calls export and shutdown
 * for each.
 */
class CompositeSpanExporter {
  constructor(exporters) {
    this._exporters = exporters;
  }
  export(spans, resultCallback) {
    this._exporters.forEach(exporter => exporter.export(spans, resultCallback));
    resultCallback({
      code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_17__.ExportResultCode.SUCCESS
    });
  }
  async shutdown() {
    const results = [];
    this._exporters.forEach(exporter => results.push(exporter.shutdown()));
    await Promise.all(results);
  }
}

/**
 * Builds and returns a {@link SpanExporter} that logs Honeycomb URLs for completed traces
 *
 * @remark This is not for production use.
 * @param options The {@link HoneycombOptions} used to configure the exporter
 * @returns the configured {@link ConsoleTraceLinkExporter} instance
 */
function configureConsoleTraceLinkExporter(options) {
  const apiKey = getTracesApiKey(options);
  const {
    authRoot,
    uiRoot
  } = getUrlRoots((options === null || options === void 0 ? void 0 : options.tracesEndpoint) || getTracesEndpoint(options));
  return new ConsoleTraceLinkExporter(options === null || options === void 0 ? void 0 : options.serviceName, apiKey, options === null || options === void 0 ? void 0 : options.logLevel, authRoot, uiRoot);
}
const getUrlRoots = (endpoint = '') => {
  const url = new URL(endpoint);
  const subdomainRegex = /(api)([.|-])?(.*?)(\.?)(honeycomb\.io)(.*)/;
  const matches = subdomainRegex.exec(url.host);
  if (matches === null) {
    return {
      authRoot: undefined,
      uiRoot: undefined
    };
  }
  const isDashSubdomain = matches[2] === '-';
  let apiSubdomain;
  let uiSubdomain;
  if (isDashSubdomain) {
    apiSubdomain = `api-${matches[3]}`;
    uiSubdomain = `ui-${matches[3]}`;
  } else {
    apiSubdomain = matches[3] ? `api.${matches[3]}` : 'api';
    uiSubdomain = matches[3] ? `ui.${matches[3]}` : 'ui';
  }
  const authRoot = `${url.protocol}//${apiSubdomain}.honeycomb.io/1/auth`;
  const uiRoot = `${url.protocol}//${uiSubdomain}.honeycomb.io`;
  return {
    authRoot,
    uiRoot
  };
};
/**
 * A custom {@link SpanExporter} that logs Honeycomb URLs for completed traces.
 *
 * @remark This is not for production use.
 */
class ConsoleTraceLinkExporter {
  constructor(serviceName, apikey, logLevel, authRoot, uiRoot) {
    this._traceUrl = '';
    this._logLevel = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG;
    if (logLevel) {
      this._logLevel = logLevel;
    }
    if (!serviceName || !apikey) {
      if (this._logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG) {
        console.debug(MISSING_FIELDS_FOR_LOCAL_VISUALIZATIONS);
      }
      return;
    }
    if (!authRoot || !uiRoot) {
      if (this._logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.DEBUG) {
        console.debug(MISSING_FIELDS_FOR_GENERATING_LINKS);
      }
      return;
    }
    const options = {
      headers: {
        'x-honeycomb-team': apikey
      }
    };
    fetch(authRoot, options).then(resp => {
      if (resp.ok) {
        return resp.json();
      }
      throw new Error();
    }).then(data => {
      var _a, _b, _c;
      const respData = data;
      if ((_a = respData.team) === null || _a === void 0 ? void 0 : _a.slug) {
        this._traceUrl = buildTraceUrl(apikey, serviceName, (_b = respData.team) === null || _b === void 0 ? void 0 : _b.slug, (_c = respData.environment) === null || _c === void 0 ? void 0 : _c.slug, uiRoot);
      } else {
        throw new Error();
      }
    }).catch(() => {
      if (this._logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.INFO) {
        console.log(FAILED_AUTH_FOR_LOCAL_VISUALIZATIONS);
      }
    });
  }
  export(spans, resultCallback) {
    if (this._traceUrl) {
      spans.forEach(span => {
        // only log root spans (ones without a parent span)
        if (!span.parentSpanId && this._logLevel >= _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.DiagLogLevel.INFO) {
          console.log(createHoneycombSDKLogMessage(`Honeycomb link: ${this._traceUrl}=${span.spanContext().traceId}`));
        }
      });
    }
    resultCallback({
      code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_17__.ExportResultCode.SUCCESS
    });
  }
  shutdown() {
    return Promise.resolve();
  }
}
/**
 * Builds and returns a URL that is used to log when a trace is completed in the {@link ConsoleTraceLinkExporter}.
 *
 * @param apikey the Honeycomb API key used to retrieve the Honeycomb team and environment
 * @param serviceName the Honeycomb service name (or classic dataset) where data is stored
 * @param team the Honeycomb team
 * @param environment the Honeycomb environment
 * @returns
 */
function buildTraceUrl(apikey, serviceName, team, environment, uiRoot) {
  let url = `${uiRoot}/${team}`;
  if (!isClassic(apikey) && environment) {
    url += `/environments/${environment}`;
  }
  url += `/datasets/${serviceName}/trace?trace_id`;
  return url;
}

/**
 * Builds and returns Span Processor that combines the BatchSpanProcessor, BrowserSpanProcessor,
 * BaggageSpanProcessor, and optionally a user provided Span Processor.
 * @param options The {@link HoneycombOptions}
 * @returns a {@link CompositeSpanProcessor}
 */
const configureSpanProcessors = options => {
  const honeycombSpanProcessor = new CompositeSpanProcessor();
  const honeycombTraceExporters = [];
  if (options === null || options === void 0 ? void 0 : options.localVisualizations) {
    honeycombTraceExporters.push(configureConsoleTraceLinkExporter(options));
  }
  // if there is a user-provided exporter, add to the composite exporter
  if (options === null || options === void 0 ? void 0 : options.traceExporter) {
    honeycombTraceExporters.push(options === null || options === void 0 ? void 0 : options.traceExporter);
  }
  // if there is an array of user-provided exporters, add them to the composite exporter
  // This will override the default honeycomb trace exporter.
  if (options === null || options === void 0 ? void 0 : options.traceExporters) {
    honeycombTraceExporters.push(...options.traceExporters);
  }
  // Disable this if a configuration option is present
  if ((options === null || options === void 0 ? void 0 : options.disableDefaultTraceExporter) !== true) {
    honeycombTraceExporters.unshift(configureHoneycombHttpJsonTraceExporter(options));
  }
  // We have to configure the exporter here because the way the base SDK is setup
  // does not allow having both a `spanProcessor` and `traceExporter` configured.
  honeycombSpanProcessor.addProcessor(new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__.BatchSpanProcessor(configureCompositeExporter([...honeycombTraceExporters])));
  // we always want to add the baggage span processor
  honeycombSpanProcessor.addProcessor(new BaggageSpanProcessor());
  // we always want to add the browser attrs span processor
  honeycombSpanProcessor.addProcessor(new BrowserAttributesSpanProcessor());
  const sessionProvider = (options === null || options === void 0 ? void 0 : options.sessionProvider) || defaultSessionProvider;
  const sessionSpanProcessor = (0,_opentelemetry_web_common__WEBPACK_IMPORTED_MODULE_18__.createSessionSpanProcessor)(sessionProvider);
  honeycombSpanProcessor.addProcessor(sessionSpanProcessor);
  // if there is a user provided span processor, add it to the composite span processor
  if (options === null || options === void 0 ? void 0 : options.spanProcessor) {
    honeycombSpanProcessor.addProcessor(options === null || options === void 0 ? void 0 : options.spanProcessor);
  }
  // if there is an array of spanProcessors provided, add them to the composite span processor
  if (options === null || options === void 0 ? void 0 : options.spanProcessors) {
    options.spanProcessors.forEach(processor => {
      honeycombSpanProcessor.addProcessor(processor);
    });
  }
  return honeycombSpanProcessor;
};
/**
 * A {@link SpanProcessor} that combines multiple span processors into a single
 * span processor that can be passed into the SDKs `spanProcessor` option.
 */
class CompositeSpanProcessor {
  constructor() {
    this.spanProcessors = [];
  }
  addProcessor(processor) {
    this.spanProcessors.push(processor);
  }
  getSpanProcessors() {
    return this.spanProcessors;
  }
  onStart(span, parentContext) {
    this.spanProcessors.forEach(processor => {
      processor.onStart(span, parentContext);
    });
  }
  onEnd(span) {
    this.spanProcessors.forEach(processor => {
      processor.onEnd(span);
    });
  }
  forceFlush() {
    return Promise.all(this.spanProcessors.map(processor => processor.forceFlush())).then(() => {});
  }
  shutdown() {
    return Promise.all(this.spanProcessors.map(processor => processor.forceFlush())).then(() => {});
  }
}

/**
 * Builds and returns a Deterministic Sampler that uses the provided sample rate to
 * configure the inner sampler.
 * @param options The {@link HoneycombOptions}
 * @returns a {@link DeterministicSampler}
 */
const configureDeterministicSampler = options => {
  const sampleRate = getSampleRate(options);
  return new DeterministicSampler(sampleRate);
};
/**
 * A {@link Sampler} that uses a deterministic sample rate to configure the sampler.
 */
class DeterministicSampler {
  constructor(sampleRate) {
    this._sampleRate = sampleRate;
    switch (sampleRate) {
      // sample rate of 0 means send nothing
      case 0:
        this._sampler = new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_19__.AlwaysOffSampler();
        break;
      // sample rate of 1 is default, send everything
      case 1:
        this._sampler = new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_20__.AlwaysOnSampler();
        break;
      default:
        {
          const ratio = 1.0 / sampleRate;
          this._sampler = new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_21__.TraceIdRatioBasedSampler(ratio);
          break;
        }
    }
  }
  shouldSample(context, traceId, spanName, spanKind, attributes, links) {
    const result = this._sampler.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    return Object.assign(Object.assign({}, result), {
      attributes: Object.assign(Object.assign({}, result.attributes), {
        SampleRate: this._sampleRate
      })
    });
  }
  toString() {
    return `DeterministicSampler(${this._sampler.toString()})`;
  }
}

var t,
  e,
  n = function () {
    var t = self.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0];
    if (t && t.responseStart > 0 && t.responseStart < performance.now()) return t;
  },
  r = function (t) {
    if ("loading" === document.readyState) return "loading";
    var e = n();
    if (e) {
      if (t < e.domInteractive) return "loading";
      if (0 === e.domContentLoadedEventStart || t < e.domContentLoadedEventStart) return "dom-interactive";
      if (0 === e.domComplete || t < e.domComplete) return "dom-content-loaded";
    }
    return "complete";
  },
  i = function (t) {
    var e = t.nodeName;
    return 1 === t.nodeType ? e.toLowerCase() : e.toUpperCase().replace(/^#/, "");
  },
  a = function (t, e) {
    var n = "";
    try {
      for (; t && 9 !== t.nodeType;) {
        var r = t,
          a = r.id ? "#" + r.id : i(r) + (r.classList && r.classList.value && r.classList.value.trim() && r.classList.value.trim().length ? "." + r.classList.value.trim().replace(/\s+/g, ".") : "");
        if (n.length + a.length > (e || 100) - 1) return n || a;
        if (n = n ? a + ">" + n : a, r.id) break;
        t = r.parentNode;
      }
    } catch (t) {}
    return n;
  },
  o = -1,
  c = function () {
    return o;
  },
  u = function (t) {
    addEventListener("pageshow", function (e) {
      e.persisted && (o = e.timeStamp, t(e));
    }, true);
  },
  s = function () {
    var t = n();
    return t && t.activationStart || 0;
  },
  f = function (t, e) {
    var r = n(),
      i = "navigate";
    c() >= 0 ? i = "back-forward-cache" : r && (document.prerendering || s() > 0 ? i = "prerender" : document.wasDiscarded ? i = "restore" : r.type && (i = r.type.replace(/_/g, "-")));
    return {
      name: t,
      value: void 0 === e ? -1 : e,
      rating: "good",
      delta: 0,
      entries: [],
      id: "v4-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12),
      navigationType: i
    };
  },
  d = function (t, e, n) {
    try {
      if (PerformanceObserver.supportedEntryTypes.includes(t)) {
        var r = new PerformanceObserver(function (t) {
          Promise.resolve().then(function () {
            e(t.getEntries());
          });
        });
        return r.observe(Object.assign({
          type: t,
          buffered: !0
        }, n || {})), r;
      }
    } catch (t) {}
  },
  l = function (t, e, n, r) {
    var i, a;
    return function (o) {
      e.value >= 0 && (o || r) && ((a = e.value - (i || 0)) || void 0 === i) && (i = e.value, e.delta = a, e.rating = function (t, e) {
        return t > e[1] ? "poor" : t > e[0] ? "needs-improvement" : "good";
      }(e.value, n), t(e));
    };
  },
  m = function (t) {
    requestAnimationFrame(function () {
      return requestAnimationFrame(function () {
        return t();
      });
    });
  },
  p = function (t) {
    document.addEventListener("visibilitychange", function () {
      "hidden" === document.visibilityState && t();
    });
  },
  v = function (t) {
    var e = false;
    return function () {
      e || (t(), e = true);
    };
  },
  g = -1,
  h = function () {
    return "hidden" !== document.visibilityState || document.prerendering ? 1 / 0 : 0;
  },
  T = function (t) {
    "hidden" === document.visibilityState && g > -1 && (g = "visibilitychange" === t.type ? t.timeStamp : 0, E());
  },
  y = function () {
    addEventListener("visibilitychange", T, true), addEventListener("prerenderingchange", T, true);
  },
  E = function () {
    removeEventListener("visibilitychange", T, true), removeEventListener("prerenderingchange", T, true);
  },
  S = function () {
    return g < 0 && (g = h(), y(), u(function () {
      setTimeout(function () {
        g = h(), y();
      }, 0);
    })), {
      get firstHiddenTime() {
        return g;
      }
    };
  },
  b = function (t) {
    document.prerendering ? addEventListener("prerenderingchange", function () {
      return t();
    }, true) : t();
  },
  L = [1800, 3e3],
  C = function (t, e) {
    e = e || {}, b(function () {
      var n,
        r = S(),
        i = f("FCP"),
        a = d("paint", function (t) {
          t.forEach(function (t) {
            "first-contentful-paint" === t.name && (a.disconnect(), t.startTime < r.firstHiddenTime && (i.value = Math.max(t.startTime - s(), 0), i.entries.push(t), n(true)));
          });
        });
      a && (n = l(t, i, L, e.reportAllChanges), u(function (r) {
        i = f("FCP"), n = l(t, i, L, e.reportAllChanges), m(function () {
          i.value = performance.now() - r.timeStamp, n(true);
        });
      }));
    });
  },
  M = [.1, .25],
  D = function (t, e) {
    !function (t, e) {
      e = e || {}, C(v(function () {
        var n,
          r = f("CLS", 0),
          i = 0,
          a = [],
          o = function (t) {
            t.forEach(function (t) {
              if (!t.hadRecentInput) {
                var e = a[0],
                  n = a[a.length - 1];
                i && t.startTime - n.startTime < 1e3 && t.startTime - e.startTime < 5e3 ? (i += t.value, a.push(t)) : (i = t.value, a = [t]);
              }
            }), i > r.value && (r.value = i, r.entries = a, n());
          },
          c = d("layout-shift", o);
        c && (n = l(t, r, M, e.reportAllChanges), p(function () {
          o(c.takeRecords()), n(true);
        }), u(function () {
          i = 0, r = f("CLS", 0), n = l(t, r, M, e.reportAllChanges), m(function () {
            return n();
          });
        }), setTimeout(n, 0));
      }));
    }(function (e) {
      var n = function (t) {
        var e,
          n = {};
        if (t.entries.length) {
          var i = t.entries.reduce(function (t, e) {
            return t && t.value > e.value ? t : e;
          });
          if (i && i.sources && i.sources.length) {
            var o = (e = i.sources).find(function (t) {
              return t.node && 1 === t.node.nodeType;
            }) || e[0];
            o && (n = {
              largestShiftTarget: a(o.node),
              largestShiftTime: i.startTime,
              largestShiftValue: i.value,
              largestShiftSource: o,
              largestShiftEntry: i,
              loadState: r(i.startTime)
            });
          }
        }
        return Object.assign(t, {
          attribution: n
        });
      }(e);
      t(n);
    }, e);
  },
  w = function (t, e) {
    C(function (e) {
      var i = function (t) {
        var e = {
          timeToFirstByte: 0,
          firstByteToFCP: t.value,
          loadState: r(c())
        };
        if (t.entries.length) {
          var i = n(),
            a = t.entries[t.entries.length - 1];
          if (i) {
            var o = i.activationStart || 0,
              u = Math.max(0, i.responseStart - o);
            e = {
              timeToFirstByte: u,
              firstByteToFCP: t.value - u,
              loadState: r(t.entries[0].startTime),
              navigationEntry: i,
              fcpEntry: a
            };
          }
        }
        return Object.assign(t, {
          attribution: e
        });
      }(e);
      t(i);
    }, e);
  },
  x = 0,
  I = 1 / 0,
  k = 0,
  A = function (t) {
    t.forEach(function (t) {
      t.interactionId && (I = Math.min(I, t.interactionId), k = Math.max(k, t.interactionId), x = k ? (k - I) / 7 + 1 : 0);
    });
  },
  F = function () {
    return t ? x : performance.interactionCount || 0;
  },
  P = function () {
    "interactionCount" in performance || t || (t = d("event", A, {
      type: "event",
      buffered: true,
      durationThreshold: 0
    }));
  },
  B = [],
  O = new Map(),
  R = 0,
  j = function () {
    var t = Math.min(B.length - 1, Math.floor((F() - R) / 50));
    return B[t];
  },
  q = [],
  H = function (t) {
    if (q.forEach(function (e) {
      return e(t);
    }), t.interactionId || "first-input" === t.entryType) {
      var e = B[B.length - 1],
        n = O.get(t.interactionId);
      if (n || B.length < 10 || t.duration > e.latency) {
        if (n) t.duration > n.latency ? (n.entries = [t], n.latency = t.duration) : t.duration === n.latency && t.startTime === n.entries[0].startTime && n.entries.push(t);else {
          var r = {
            id: t.interactionId,
            latency: t.duration,
            entries: [t]
          };
          O.set(r.id, r), B.push(r);
        }
        B.sort(function (t, e) {
          return e.latency - t.latency;
        }), B.length > 10 && B.splice(10).forEach(function (t) {
          return O.delete(t.id);
        });
      }
    }
  },
  N = function (t) {
    var e = self.requestIdleCallback || self.setTimeout,
      n = -1;
    return t = v(t), "hidden" === document.visibilityState ? t() : (n = e(t), p(t)), n;
  },
  W = [200, 500],
  z = function (t, e) {
    "PerformanceEventTiming" in self && "interactionId" in PerformanceEventTiming.prototype && (e = e || {}, b(function () {
      var n;
      P();
      var r,
        i = f("INP"),
        a = function (t) {
          N(function () {
            t.forEach(H);
            var e = j();
            e && e.latency !== i.value && (i.value = e.latency, i.entries = e.entries, r());
          });
        },
        o = d("event", a, {
          durationThreshold: null !== (n = e.durationThreshold) && void 0 !== n ? n : 40
        });
      r = l(t, i, W, e.reportAllChanges), o && (o.observe({
        type: "first-input",
        buffered: true
      }), p(function () {
        a(o.takeRecords()), r(true);
      }), u(function () {
        R = F(), B.length = 0, O.clear(), i = f("INP"), r = l(t, i, W, e.reportAllChanges);
      }));
    }));
  },
  U = [],
  V = [],
  _ = 0,
  G = new WeakMap(),
  J = new Map(),
  K = -1,
  Q = function (t) {
    U = U.concat(t), X();
  },
  X = function () {
    K < 0 && (K = N(Y));
  },
  Y = function () {
    J.size > 10 && J.forEach(function (t, e) {
      O.has(e) || J.delete(e);
    });
    var t = B.map(function (t) {
        return G.get(t.entries[0]);
      }),
      e = V.length - 50;
    V = V.filter(function (n, r) {
      return r >= e || t.includes(n);
    });
    for (var n = new Set(), r = 0; r < V.length; r++) {
      var i = V[r];
      nt(i.startTime, i.processingEnd).forEach(function (t) {
        n.add(t);
      });
    }
    var a = U.length - 1 - 50;
    U = U.filter(function (t, e) {
      return t.startTime > _ && e > a || n.has(t);
    }), K = -1;
  };
q.push(function (t) {
  t.interactionId && t.target && !J.has(t.interactionId) && J.set(t.interactionId, t.target);
}, function (t) {
  var e,
    n = t.startTime + t.duration;
  _ = Math.max(_, t.processingEnd);
  for (var r = V.length - 1; r >= 0; r--) {
    var i = V[r];
    if (Math.abs(n - i.renderTime) <= 8) {
      (e = i).startTime = Math.min(t.startTime, e.startTime), e.processingStart = Math.min(t.processingStart, e.processingStart), e.processingEnd = Math.max(t.processingEnd, e.processingEnd), e.entries.push(t);
      break;
    }
  }
  e || (e = {
    startTime: t.startTime,
    processingStart: t.processingStart,
    processingEnd: t.processingEnd,
    renderTime: n,
    entries: [t]
  }, V.push(e)), (t.interactionId || "first-input" === t.entryType) && G.set(t, e), X();
});
var Z,
  $,
  tt,
  et,
  nt = function (t, e) {
    for (var n, r = [], i = 0; n = U[i]; i++) if (!(n.startTime + n.duration < t)) {
      if (n.startTime > e) break;
      r.push(n);
    }
    return r;
  },
  rt = function (t, n) {
    e || (e = d("long-animation-frame", Q)), z(function (e) {
      var n = function (t) {
        var e = t.entries[0],
          n = G.get(e),
          i = e.processingStart,
          o = n.processingEnd,
          c = n.entries.sort(function (t, e) {
            return t.processingStart - e.processingStart;
          }),
          u = nt(e.startTime, o),
          s = t.entries.find(function (t) {
            return t.target;
          }),
          f = s && s.target || J.get(e.interactionId),
          d = [e.startTime + e.duration, o].concat(u.map(function (t) {
            return t.startTime + t.duration;
          })),
          l = Math.max.apply(Math, d),
          m = {
            interactionTarget: a(f),
            interactionTargetElement: f,
            interactionType: e.name.startsWith("key") ? "keyboard" : "pointer",
            interactionTime: e.startTime,
            nextPaintTime: l,
            processedEventEntries: c,
            longAnimationFrameEntries: u,
            inputDelay: i - e.startTime,
            processingDuration: o - i,
            presentationDelay: Math.max(l - o, 0),
            loadState: r(e.startTime)
          };
        return Object.assign(t, {
          attribution: m
        });
      }(e);
      t(n);
    }, n);
  },
  it = [2500, 4e3],
  at = {},
  ot = function (t, e) {
    !function (t, e) {
      e = e || {}, b(function () {
        var n,
          r = S(),
          i = f("LCP"),
          a = function (t) {
            e.reportAllChanges || (t = t.slice(-1)), t.forEach(function (t) {
              t.startTime < r.firstHiddenTime && (i.value = Math.max(t.startTime - s(), 0), i.entries = [t], n());
            });
          },
          o = d("largest-contentful-paint", a);
        if (o) {
          n = l(t, i, it, e.reportAllChanges);
          var c = v(function () {
            at[i.id] || (a(o.takeRecords()), o.disconnect(), at[i.id] = true, n(true));
          });
          ["keydown", "click"].forEach(function (t) {
            addEventListener(t, function () {
              return N(c);
            }, {
              once: true,
              capture: true
            });
          }), p(c), u(function (r) {
            i = f("LCP"), n = l(t, i, it, e.reportAllChanges), m(function () {
              i.value = performance.now() - r.timeStamp, at[i.id] = true, n(true);
            });
          });
        }
      });
    }(function (e) {
      var r = function (t) {
        var e = {
          timeToFirstByte: 0,
          resourceLoadDelay: 0,
          resourceLoadDuration: 0,
          elementRenderDelay: t.value
        };
        if (t.entries.length) {
          var r = n();
          if (r) {
            var i = r.activationStart || 0,
              o = t.entries[t.entries.length - 1],
              c = o.url && performance.getEntriesByType("resource").filter(function (t) {
                return t.name === o.url;
              })[0],
              u = Math.max(0, r.responseStart - i),
              s = Math.max(u, c ? (c.requestStart || c.startTime) - i : 0),
              f = Math.max(s, c ? c.responseEnd - i : 0),
              d = Math.max(f, o.startTime - i);
            e = {
              element: a(o.element),
              timeToFirstByte: u,
              resourceLoadDelay: s - u,
              resourceLoadDuration: f - s,
              elementRenderDelay: d - f,
              navigationEntry: r,
              lcpEntry: o
            }, o.url && (e.url = o.url), c && (e.lcpResourceEntry = c);
          }
        }
        return Object.assign(t, {
          attribution: e
        });
      }(e);
      t(r);
    }, e);
  },
  ct = [800, 1800],
  ut = function t(e) {
    document.prerendering ? b(function () {
      return t(e);
    }) : "complete" !== document.readyState ? addEventListener("load", function () {
      return t(e);
    }, true) : setTimeout(e, 0);
  },
  st = function (t, e) {
    e = e || {};
    var r = f("TTFB"),
      i = l(t, r, ct, e.reportAllChanges);
    ut(function () {
      var a = n();
      a && (r.value = Math.max(a.responseStart - s(), 0), r.entries = [a], i(true), u(function () {
        r = f("TTFB", 0), (i = l(t, r, ct, e.reportAllChanges))(true);
      }));
    });
  },
  ft = function (t, e) {
    st(function (e) {
      var n = function (t) {
        var e = {
          waitingDuration: 0,
          cacheDuration: 0,
          dnsDuration: 0,
          connectionDuration: 0,
          requestDuration: 0
        };
        if (t.entries.length) {
          var n = t.entries[0],
            r = n.activationStart || 0,
            i = Math.max((n.workerStart || n.fetchStart) - r, 0),
            a = Math.max(n.domainLookupStart - r, 0),
            o = Math.max(n.connectStart - r, 0),
            c = Math.max(n.connectEnd - r, 0);
          e = {
            waitingDuration: i,
            cacheDuration: a - i,
            dnsDuration: o - a,
            connectionDuration: c - o,
            requestDuration: t.value - c,
            navigationEntry: n
          };
        }
        return Object.assign(t, {
          attribution: e
        });
      }(e);
      t(n);
    }, e);
  },
  dt = {
    passive: true,
    capture: true
  },
  lt = new Date(),
  mt = function (t, e) {
    Z || (Z = e, $ = t, tt = new Date(), gt(removeEventListener), pt());
  },
  pt = function () {
    if ($ >= 0 && $ < tt - lt) {
      var t = {
        entryType: "first-input",
        name: Z.type,
        target: Z.target,
        cancelable: Z.cancelable,
        startTime: Z.timeStamp,
        processingStart: Z.timeStamp + $
      };
      et.forEach(function (e) {
        e(t);
      }), et = [];
    }
  },
  vt = function (t) {
    if (t.cancelable) {
      var e = (t.timeStamp > 1e12 ? new Date() : performance.now()) - t.timeStamp;
      "pointerdown" == t.type ? function (t, e) {
        var n = function () {
            mt(t, e), i();
          },
          r = function () {
            i();
          },
          i = function () {
            removeEventListener("pointerup", n, dt), removeEventListener("pointercancel", r, dt);
          };
        addEventListener("pointerup", n, dt), addEventListener("pointercancel", r, dt);
      }(e, t) : mt(e, t);
    }
  },
  gt = function (t) {
    ["mousedown", "keydown", "touchstart", "pointerdown"].forEach(function (e) {
      return t(e, vt, dt);
    });
  },
  ht = [100, 300],
  Tt = function (t, e) {
    e = e || {}, b(function () {
      var n,
        r = S(),
        i = f("FID"),
        a = function (t) {
          t.startTime < r.firstHiddenTime && (i.value = t.processingStart - t.startTime, i.entries.push(t), n(true));
        },
        o = function (t) {
          t.forEach(a);
        },
        c = d("first-input", o);
      n = l(t, i, ht, e.reportAllChanges), c && (p(v(function () {
        o(c.takeRecords()), c.disconnect();
      })), u(function () {
        var r;
        i = f("FID"), n = l(t, i, ht, e.reportAllChanges), et = [], $ = -1, Z = null, gt(addEventListener), r = a, et.push(r), pt();
      }));
    });
  },
  yt = function (t, e) {
    Tt(function (e) {
      var n = function (t) {
        var e = t.entries[0],
          n = {
            eventTarget: a(e.target),
            eventType: e.name,
            eventTime: e.startTime,
            eventEntry: e,
            loadState: r(e.startTime)
          };
        return Object.assign(t, {
          attribution: n
        });
      }(e);
      t(n);
    }, e);
  };

// To avoid importing InstrumentationAbstract from:
// import { InstrumentationAbstract } from '@opentelemetry/instrumentation/build/src/instrumentation';
// When this is exposed we can import from there.
class InstrumentationAbstract {
  constructor(instrumentationName, instrumentationVersion, config = {}) {
    this.instrumentationName = instrumentationName;
    this.instrumentationVersion = instrumentationVersion;
    /* Api to wrap instrumented method */
    // eslint-disable-next-line @typescript-eslint/unbound-method
    this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_3__.wrap;
    /* Api to unwrap instrumented methods */
    // eslint-disable-next-line @typescript-eslint/unbound-method
    this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_3__.unwrap;
    /* Api to mass wrap instrumented method */
    // eslint-disable-next-line @typescript-eslint/unbound-method
    this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_3__.massWrap;
    /* Api to mass unwrap instrumented methods */
    // eslint-disable-next-line @typescript-eslint/unbound-method
    this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_3__.massUnwrap;
    this._config = Object.assign({
      enabled: true
    }, config);
    this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_12__.diag.createComponentLogger({
      namespace: instrumentationName
    });
    this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_22__.trace.getTracer(instrumentationName, instrumentationVersion);
    this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_23__.metrics.getMeter(instrumentationName, instrumentationVersion);
    this._updateMetricInstruments();
  }
  /* Returns meter */
  get meter() {
    return this._meter;
  }
  /**
   * Sets MeterProvider to this plugin
   * @param meterProvider
   */
  setMeterProvider(meterProvider) {
    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
    this._updateMetricInstruments();
  }
  /**
   * Sets the new metric instruments with the current Meter.
   */
  _updateMetricInstruments() {
    return;
  }
  /* Returns InstrumentationConfig */
  getConfig() {
    return this._config;
  }
  /**
   * Sets InstrumentationConfig to this plugin
   * @param InstrumentationConfig
   */
  setConfig(config = {}) {
    this._config = Object.assign({}, config);
  }
  /**
   * Sets TraceProvider to this plugin
   * @param tracerProvider
   */
  setTracerProvider(tracerProvider) {
    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
  }
  /* Returns tracer */
  get tracer() {
    return this._tracer;
  }
}
/**
 * Web vitals auto-instrumentation, sends spans automatically for CLS, LCP, INP, FCP, FID, TTFB.
 * Defaults to sending spans for CLS, LCP, INP, FCP and TTFB.
 * @param config The {@link WebVitalsInstrumentationConfig }
 */
class WebVitalsInstrumentation extends InstrumentationAbstract {
  constructor({
    enabled = true,
    vitalsToTrack = ['CLS', 'LCP', 'INP', 'TTFB', 'FCP'],
    lcp,
    cls,
    inp,
    fid,
    fcp,
    ttfb
  } = {}) {
    const config = {
      enabled,
      vitalsToTrack,
      lcp,
      cls,
      inp,
      fid,
      fcp,
      ttfb
    };
    super('@honeycombio/instrumentation-web-vitals', _user_interaction_instrumentation_DwDrGIZ6_js__WEBPACK_IMPORTED_MODULE_1__.V, config);
    this.onReportCLS = (cls, clsOpts = {}) => {
      const {
        applyCustomAttributes
      } = clsOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = cls;
      const {
        largestShiftTarget,
        largestShiftTime,
        largestShiftValue,
        loadState,
        largestShiftEntry
      } = attribution;
      const attrPrefix = this.getAttrPrefix(name);
      const span = this.tracer.startSpan(name);
      span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(cls)), {
        [`${attrPrefix}.largest_shift_target`]: largestShiftTarget,
        [`${attrPrefix}.element`]: largestShiftTarget,
        [`${attrPrefix}.largest_shift_time`]: largestShiftTime,
        [`${attrPrefix}.largest_shift_value`]: largestShiftValue,
        [`${attrPrefix}.load_state`]: loadState,
        [`${attrPrefix}.had_recent_input`]: largestShiftEntry === null || largestShiftEntry === void 0 ? void 0 : largestShiftEntry.hadRecentInput
      }));
      if (applyCustomAttributes) {
        applyCustomAttributes(cls, span);
      }
      span.end();
    };
    this.onReportLCP = (lcp, lcpOpts = {}) => {
      const {
        applyCustomAttributes,
        dataAttributes
      } = lcpOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = lcp;
      const {
        element,
        url,
        timeToFirstByte,
        resourceLoadDelay,
        resourceLoadDuration,
        elementRenderDelay,
        lcpEntry
      } = attribution;
      const attrPrefix = this.getAttrPrefix(name);
      const span = this.tracer.startSpan(name);
      span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(lcp)), {
        [`${attrPrefix}.element`]: element,
        [`${attrPrefix}.url`]: url,
        [`${attrPrefix}.time_to_first_byte`]: timeToFirstByte,
        [`${attrPrefix}.resource_load_delay`]: resourceLoadDelay,
        [`${attrPrefix}.resource_load_duration`]: resourceLoadDuration,
        [`${attrPrefix}.element_render_delay`]: elementRenderDelay,
        // This will be deprecated in a future version
        [`${attrPrefix}.resource_load_time`]: resourceLoadDuration
      }));
      const el = lcpEntry === null || lcpEntry === void 0 ? void 0 : lcpEntry.element;
      if (el === null || el === void 0 ? void 0 : el.dataset) {
        for (const attrName in el.dataset) {
          const attrValue = el.dataset[attrName];
          if (
          // Value exists (including the empty string AND either
          attrValue !== undefined && (
          // dataAttributes is undefined (i.e. send all values as span attributes) OR
          dataAttributes === undefined ||
          // dataAttributes is specified AND attrName is in dataAttributes (i.e attribute name is in the supplied allowList)
          dataAttributes.includes(attrName))) {
            span.setAttribute(`${attrPrefix}.element.data.${attrName}`, attrValue);
          }
        }
      }
      if (applyCustomAttributes) {
        applyCustomAttributes(lcp, span);
      }
      span.end();
    };
    this.onReportINP = (inp, inpOpts = {
      includeTimingsAsSpans: false
    }) => {
      const {
        applyCustomAttributes,
        includeTimingsAsSpans
      } = inpOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = inp;
      const {
        inputDelay,
        interactionTarget,
        interactionTime,
        interactionType,
        loadState,
        nextPaintTime,
        presentationDelay,
        processingDuration,
        longAnimationFrameEntries: _loafEntries
      } = attribution;
      const longAnimationFrameEntries = _loafEntries;
      const attrPrefix = this.getAttrPrefix(name);
      const inpDuration = inputDelay + processingDuration + presentationDelay;
      this.tracer.startActiveSpan(name, {
        startTime: interactionTime
      }, inpSpan => {
        const inpAttributes = Object.assign(Object.assign({}, this.getSharedAttributes(inp)), {
          [`${attrPrefix}.input_delay`]: inputDelay,
          [`${attrPrefix}.interaction_target`]: interactionTarget,
          [`${attrPrefix}.interaction_time`]: interactionTime,
          [`${attrPrefix}.interaction_type`]: interactionType,
          [`${attrPrefix}.load_state`]: loadState,
          [`${attrPrefix}.next_paint_time`]: nextPaintTime,
          [`${attrPrefix}.presentation_delay`]: presentationDelay,
          [`${attrPrefix}.processing_duration`]: processingDuration,
          [`${attrPrefix}.duration`]: inpDuration,
          // These will be deprecated in a future version
          [`${attrPrefix}.element`]: interactionTarget,
          [`${attrPrefix}.event_type`]: interactionType
        });
        inpSpan.setAttributes(inpAttributes);
        if (applyCustomAttributes) {
          applyCustomAttributes(inp, inpSpan);
        }
        if (includeTimingsAsSpans) {
          longAnimationFrameEntries.forEach(perfEntry => {
            this.processPerformanceLongAnimationFrameTimingSpans(attrPrefix, perfEntry);
          });
        }
        inpSpan.end(interactionTime + inpDuration);
      });
    };
    this.onReportFCP = (fcp, fcpOpts = {}) => {
      const {
        applyCustomAttributes
      } = fcpOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = fcp;
      const {
        timeToFirstByte,
        firstByteToFCP,
        loadState
      } = attribution;
      const attrPrefix = this.getAttrPrefix(name);
      const span = this.tracer.startSpan(name);
      span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(fcp)), {
        [`${attrPrefix}.time_to_first_byte`]: timeToFirstByte,
        [`${attrPrefix}.time_since_first_byte`]: firstByteToFCP,
        [`${attrPrefix}.load_state`]: loadState
      }));
      if (applyCustomAttributes) {
        applyCustomAttributes(fcp, span);
      }
      span.end();
    };
    /**
     *  @deprecated this will be removed in the next major version, use INP instead.
     */
    this.onReportFID = (fid, fidOpts = {}) => {
      const {
        applyCustomAttributes
      } = fidOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = fid;
      const {
        eventTarget,
        eventType,
        loadState
      } = attribution;
      const attrPrefix = this.getAttrPrefix(name);
      const span = this.tracer.startSpan(name);
      span.setAttributes(Object.assign(Object.assign({}, this.getSharedAttributes(fid)), {
        [`${attrPrefix}.element`]: eventTarget,
        [`${attrPrefix}.event_type`]: eventType,
        [`${attrPrefix}.load_state`]: loadState
      }));
      if (applyCustomAttributes) {
        applyCustomAttributes(fid, span);
      }
      span.end();
    };
    this.onReportTTFB = (ttfb, ttfbOpts = {}) => {
      const {
        applyCustomAttributes
      } = ttfbOpts;
      if (!this.isEnabled()) return;
      const {
        name,
        attribution
      } = ttfb;
      const {
        cacheDuration,
        connectionDuration,
        dnsDuration,
        requestDuration,
        waitingDuration
      } = attribution;
      const attrPrefix = this.getAttrPrefix(name);
      const attributes = Object.assign(Object.assign({}, this.getSharedAttributes(ttfb)), {
        [`${attrPrefix}.waiting_duration`]: waitingDuration,
        [`${attrPrefix}.dns_duration`]: dnsDuration,
        [`${attrPrefix}.connection_duration`]: connectionDuration,
        [`${attrPrefix}.request_duration`]: requestDuration,
        [`${attrPrefix}.cache_duration`]: cacheDuration,
        // These will be deprecated ina future version
        [`${attrPrefix}.waiting_time`]: waitingDuration,
        [`${attrPrefix}.dns_time`]: dnsDuration,
        [`${attrPrefix}.connection_time`]: connectionDuration,
        [`${attrPrefix}.request_time`]: requestDuration
      });
      const span = this.tracer.startSpan(name);
      span.setAttributes(attributes);
      if (applyCustomAttributes) {
        applyCustomAttributes(ttfb, span);
      }
      span.end();
    };
    this.vitalsToTrack = [...vitalsToTrack];
    this.lcpOpts = lcp;
    this.clsOpts = cls;
    this.inpOpts = inp;
    this.fidOpts = fid;
    this.fcpOpts = fcp;
    this.ttfbOpts = ttfb;
    this._isEnabled = enabled;
    this._setupWebVitalsCallbacks();
  }
  init() {}
  _setupWebVitalsCallbacks() {
    if (this.vitalsToTrack.includes('CLS')) {
      D(vital => {
        this.onReportCLS(vital, this.clsOpts);
      }, this.clsOpts);
    }
    if (this.vitalsToTrack.includes('LCP')) {
      ot(vital => {
        this.onReportLCP(vital, this.lcpOpts);
      }, this.lcpOpts);
    }
    if (this.vitalsToTrack.includes('INP')) {
      rt(vital => {
        this.onReportINP(vital, this.inpOpts);
      }, this.inpOpts);
    }
    if (this.vitalsToTrack.includes('FID')) {
      yt(vital => {
        this.onReportFID(vital, this.fidOpts);
      }, this.fidOpts);
    }
    if (this.vitalsToTrack.includes('TTFB')) {
      ft(vital => {
        this.onReportTTFB(vital, this.ttfbOpts);
      }, this.ttfbOpts);
    }
    if (this.vitalsToTrack.includes('FCP')) {
      w(vital => {
        this.onReportFCP(vital, this.fcpOpts);
      }, this.fcpOpts);
    }
  }
  getAttrPrefix(name) {
    return name.toLowerCase();
  }
  getSharedAttributes(vital) {
    const {
      name,
      id,
      delta,
      rating,
      value,
      navigationType
    } = vital;
    const attrPrefix = this.getAttrPrefix(name);
    return {
      [`${attrPrefix}.id`]: id,
      [`${attrPrefix}.delta`]: delta,
      [`${attrPrefix}.value`]: value,
      [`${attrPrefix}.rating`]: rating,
      [`${attrPrefix}.navigation_type`]: navigationType
    };
  }
  getAttributesForPerformanceLongAnimationFrameTiming(prefix, perfEntry) {
    const loafAttributes = {
      [`${prefix}.duration`]: perfEntry.duration,
      [`${prefix}.entryType`]: perfEntry.entryType,
      [`${prefix}.name`]: perfEntry.name,
      [`${prefix}.renderStart`]: perfEntry.renderStart,
      [`${prefix}.startTime`]: perfEntry.startTime
    };
    return loafAttributes;
  }
  getAttributesForPerformanceScriptTiming(prefix, scriptPerfEntry) {
    const scriptAttributes = {
      [`${prefix}.entry_type`]: scriptPerfEntry.entryType,
      [`${prefix}.start_time`]: scriptPerfEntry.startTime,
      [`${prefix}.execution_start`]: scriptPerfEntry.executionStart,
      [`${prefix}.duration`]: scriptPerfEntry.duration,
      [`${prefix}.forced_style_and_layout_duration`]: scriptPerfEntry.forcedStyleAndLayoutDuration,
      [`${prefix}.invoker`]: scriptPerfEntry.invoker,
      [`${prefix}.pause_duration`]: scriptPerfEntry.pauseDuration,
      [`${prefix}.source_url`]: scriptPerfEntry.sourceURL,
      [`${prefix}.source_function_name`]: scriptPerfEntry.sourceFunctionName,
      [`${prefix}.source_char_position`]: scriptPerfEntry.sourceCharPosition,
      [`${prefix}.window_attribution`]: scriptPerfEntry.windowAttribution
    };
    return scriptAttributes;
  }
  processPerformanceLongAnimationFrameTimingSpans(parentPrefix, perfEntry) {
    if (!perfEntry) return;
    const prefix = `${parentPrefix}.timing`;
    const loafAttributes = this.getAttributesForPerformanceLongAnimationFrameTiming(prefix, perfEntry);
    this.tracer.startActiveSpan(perfEntry.name, {
      startTime: perfEntry.startTime
    }, span => {
      span.setAttributes(loafAttributes);
      this.processPerformanceScriptTimingSpans(prefix, perfEntry.scripts);
      span.end(perfEntry.startTime + perfEntry.duration);
    });
  }
  processPerformanceScriptTimingSpans(parentPrefix, perfScriptEntries) {
    if (!perfScriptEntries) return;
    if (!(perfScriptEntries === null || perfScriptEntries === void 0 ? void 0 : perfScriptEntries.length)) return;
    const prefix = `${parentPrefix}.script`;
    perfScriptEntries.map(scriptPerfEntry => {
      this.tracer.startActiveSpan(scriptPerfEntry.name, {
        startTime: scriptPerfEntry.startTime
      }, span => {
        const scriptAttributes = this.getAttributesForPerformanceScriptTiming(prefix, scriptPerfEntry);
        span.setAttributes(scriptAttributes);
        span.end(scriptPerfEntry.startTime + scriptPerfEntry.duration);
      });
    });
  }
  disable() {
    if (!this.isEnabled()) {
      this._diag.debug(`Instrumentation already disabled`);
      return;
    }
    this._isEnabled = false;
    this._diag.debug(`Instrumentation  disabled`);
  }
  enable() {
    if (this.isEnabled()) {
      this._diag.debug(`Instrumentation already enabled`);
      return;
    }
    this._isEnabled = true;
    this._diag.debug(`Instrumentation  enabled`);
    this._diag.debug(`Sending spans for ${this.vitalsToTrack.join(',')}`);
  }
  isEnabled() {
    return this._isEnabled;
  }
}

const LIBRARY_NAME = '@honeycombio/instrumentation-global-errors';
/**
 * Extracts and structures the stack trace from an error object.
 *
 * This function breaks down the stack trace into arrays of strings and numbers
 * to comply with OTLP (OpenTelemetry Protocol) requirements, which do not accept
 * arrays of objects.
 *
 * @param {Error | undefined} error - The error object from which to extract the stack trace.
 * @returns {Object} An object containing structured stack trace information with arrays of columns, lines, functions, and URLs.
 */
function getStructuredStackTrace(error) {
  if (!error) {
    return {};
  }
  // OTLP does not accept arrays of objects
  // breaking down the stack into arrays of strings/numbers
  const structuredStack = (0,tracekit__WEBPACK_IMPORTED_MODULE_4__.computeStackTrace)(error).stack;
  const lines = [];
  const columns = [];
  const functions = [];
  const urls = [];
  if (!Array.isArray(structuredStack)) {
    return {};
  }
  structuredStack.forEach(stackFrame => {
    lines.push(stackFrame.line);
    columns.push(stackFrame.column);
    functions.push(stackFrame.func);
    urls.push(stackFrame.url);
  });
  return {
    'exception.structured_stacktrace.columns': columns,
    'exception.structured_stacktrace.lines': lines,
    'exception.structured_stacktrace.functions': functions,
    'exception.structured_stacktrace.urls': urls
  };
}
/**
 * Records an exception as a span in the OpenTelemetry tracer.
 *
 * @param {Error} error - The error object to record.
 * @param {Attributes} [attributes={}] - Additional attributes to add to the span.
 * @param {Tracer} [tracer=trace.getTracer(LIBRARY_NAME)] - The tracer to use for recording the span.
 * @param {ApplyCustomErrorAttributesOnSpanFn} applyCustomAttributesOnSpan - Callback function to add custom attributes to the span and mutate the span.
 */
function recordException(error, attributes = {}, tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_22__.trace.getTracer(LIBRARY_NAME), applyCustomAttributesOnSpan) {
  const message = error.message;
  const type = error.name;
  const errorAttributes = Object.assign(Object.assign({
    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_24__.ATTR_EXCEPTION_TYPE]: type,
    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_24__.ATTR_EXCEPTION_MESSAGE]: message,
    [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_24__.ATTR_EXCEPTION_STACKTRACE]: error.stack
  }, getStructuredStackTrace(error)), attributes);
  const errorSpan = tracer.startSpan('exception', {
    attributes: errorAttributes
  }, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_25__.context.active());
  if (applyCustomAttributesOnSpan) {
    applyCustomAttributesOnSpan(errorSpan, error);
  }
  errorSpan.setStatus({
    code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_26__.SpanStatusCode.ERROR,
    message
  });
  errorSpan.end();
}
/**
 * Global errors auto-instrumentation, sends spans automatically for exceptions that reach the window.
 * @param config The {@link GlobalErrorsInstrumentationConfig}
 */
class GlobalErrorsInstrumentation extends InstrumentationAbstract {
  constructor({
    enabled = true,
    applyCustomAttributesOnSpan
  } = {}) {
    const config = {
      enabled,
      applyCustomAttributesOnSpan
    };
    super(LIBRARY_NAME, _user_interaction_instrumentation_DwDrGIZ6_js__WEBPACK_IMPORTED_MODULE_1__.V, config);
    this.onError = event => {
      const error = 'reason' in event ? event.reason : event.error;
      console.log(this.applyCustomAttributesOnSpan);
      if (error) {
        recordException(error, {}, this.tracer, this.applyCustomAttributesOnSpan);
      }
    };
    if (enabled) {
      this.enable();
    }
    this._isEnabled = enabled;
    this.applyCustomAttributesOnSpan = applyCustomAttributesOnSpan;
  }
  init() {}
  disable() {
    if (!this.isEnabled()) {
      this._diag.debug(`Instrumentation already disabled`);
      return;
    }
    this._isEnabled = false;
    window.removeEventListener('error', this.onError);
    window.removeEventListener('unhandledrejection', this.onError);
    this._diag.debug(`Instrumentation  disabled`);
  }
  enable() {
    if (this.isEnabled()) {
      this._diag.debug(`Instrumentation already enabled`);
      return;
    }
    this._isEnabled = true;
    window.addEventListener('error', this.onError);
    window.addEventListener('unhandledrejection', this.onError);
    this._diag.debug(`Instrumentation  enabled`);
  }
  isEnabled() {
    return this._isEnabled;
  }
}

class HoneycombWebSDK extends WebSDK {
  constructor(options) {
    var _a, _b;
    const instrumentations = [...((options === null || options === void 0 ? void 0 : options.instrumentations) || [])];
    // Automatically include web vitals instrumentation unless explicitly set to false
    if (((_a = options === null || options === void 0 ? void 0 : options.webVitalsInstrumentationConfig) === null || _a === void 0 ? void 0 : _a.enabled) !== false) {
      instrumentations.push(new WebVitalsInstrumentation(options === null || options === void 0 ? void 0 : options.webVitalsInstrumentationConfig));
    }
    // Automatically include global errors instrumentation unless explicitly set to false
    if (((_b = options === null || options === void 0 ? void 0 : options.globalErrorsInstrumentationConfig) === null || _b === void 0 ? void 0 : _b.enabled) !== false) {
      instrumentations.push(new GlobalErrorsInstrumentation(options === null || options === void 0 ? void 0 : options.globalErrorsInstrumentationConfig));
    }
    super(Object.assign(Object.assign({}, options), {
      instrumentations,
      resource: mergeResources([configureBrowserAttributesResource(), configureEntryPageResource(options === null || options === void 0 ? void 0 : options.entryPageAttributes), options === null || options === void 0 ? void 0 : options.resource, options === null || options === void 0 ? void 0 : options.resourceAttributes, configureHoneycombResource()]),
      sampler: configureDeterministicSampler(options),
      // Exporter is configured through the span processor because
      // the base SDK does not allow having both a spanProcessor and a
      // traceExporter configured at the same time.
      spanProcessor: configureSpanProcessors(options)
    }));
    validateOptionsWarnings(options);
    if (options === null || options === void 0 ? void 0 : options.debug) {
      configureDebug(options);
    }
  }
}




/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/dist/esm/user-interaction-instrumentation-DwDrGIZ6.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/dist/esm/user-interaction-instrumentation-DwDrGIZ6.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ UserInteractionInstrumentation),
/* harmony export */   V: () => (/* binding */ VERSION)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");




const VERSION = '0.15.0';

const INSTRUMENTATION_NAME = '@honeycombio/user-instrumentation';
const DEFAULT_EVENT_NAMES = ['click'];
class UserInteractionInstrumentation extends _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationBase {
  constructor(config = {}) {
    var _a, _b;
    super(INSTRUMENTATION_NAME, VERSION, config);
    this._config = config;
    this._isEnabled = (_a = this._config.enabled) !== null && _a !== void 0 ? _a : false;
    // enable() gets called by our superclass constructor
    // @ts-expect-error this may get set in enable()
    this._listeners = (_b = this._listeners) !== null && _b !== void 0 ? _b : [];
  }
  init() {}
  static handleEndSpan(ev) {
    var _a;
    (_a = UserInteractionInstrumentation._eventMap.get(ev)) === null || _a === void 0 ? void 0 : _a.end();
  }
  static createGlobalEventListener(eventName, rootNodeId, isInstrumentationEnabled) {
    return event => {
      const element = event.target;
      if (isInstrumentationEnabled() === false) return;
      if (UserInteractionInstrumentation._eventMap.has(event)) return;
      if (!shouldCreateSpan(event, element, eventName, rootNodeId)) return;
      const xpath = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.getElementXPath)(element);
      const tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(INSTRUMENTATION_NAME);
      _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), () => {
        tracer.startActiveSpan(eventName, {
          attributes: {
            event_type: eventName,
            target_element: element.tagName,
            target_xpath: xpath,
            'http.url': window.location.href
          }
        }, span => {
          // if user space code calls stopPropagation, we'll never see it again
          // so let's monkey patch those funcs to end the span if they do kill it
          wrapEventPropagationCb(event, 'stopPropagation', span);
          wrapEventPropagationCb(event, 'stopImmediatePropagation', span);
          UserInteractionInstrumentation._eventMap.set(event, span);
        });
      });
    };
  }
  enable() {
    var _a;
    if (this._isEnabled) {
      return;
    }
    const rootNode = this.getRootNode();
    // enable() gets called by our superclass constructor
    // meaning our private fields aren't initialized yet!!
    this._listeners = [];
    //
    const eventNames = (_a = this._config.eventNames) !== null && _a !== void 0 ? _a : DEFAULT_EVENT_NAMES;
    eventNames.forEach(eventName => {
      // we need a stable reference to this handler so that we can remove it later
      const handler = UserInteractionInstrumentation.createGlobalEventListener(eventName, this._config.rootNodeId, () => this._isEnabled);
      this._listeners.push({
        eventName,
        handler
      });
      // capture phase listener to kick in before any other listeners
      rootNode.addEventListener(eventName, handler, {
        capture: true
      });
      // bubble phase listener gets called at the end, if user space doesn't call e.stopPropagation()
      rootNode.addEventListener(eventName, UserInteractionInstrumentation.handleEndSpan);
    });
    this._isEnabled = true;
  }
  getRootNode() {
    if (this._config.rootNodeId) {
      const rootNode = document.getElementById(this._config.rootNodeId);
      if (rootNode === null) {
        this._diag.warn(`Root Node id: ${this._config.rootNodeId} not found!`);
        return document;
      }
      return rootNode;
    }
    return document;
  }
  disable() {
    this._isEnabled = false;
    this._listeners.forEach(({
      eventName,
      handler
    }) => {
      document.removeEventListener(eventName, handler, {
        capture: true
      });
      document.removeEventListener(eventName, UserInteractionInstrumentation.handleEndSpan);
    });
    this._listeners = [];
  }
}
UserInteractionInstrumentation._eventMap = new WeakMap();
const shouldCreateSpan = (event, element, eventName, rootNodeId) => {
  if (!(element instanceof HTMLElement)) {
    return false;
  }
  const handlerName = `on${eventName}`;
  if (!elementHasEventHandler(element, handlerName, rootNodeId)) {
    return false;
  }
  if (!element.getAttribute) {
    return false;
  }
  if (element.hasAttribute('disabled')) {
    return false;
  }
  return true;
};
/**
 * Detects if this event on this element is useful
 *    by checking if this element or any of its parents have handlers
 *    for this event.
 *
 * Accounts for the fact that frameworks like React will put dummy/noop
 *    handlers at their root, and ignores those.
 */
const elementHasEventHandler = (element, eventName, rootNodeId) => {
  if (!element || !!rootNodeId && element.id === rootNodeId) {
    return false;
  }
  if (element[eventName]) {
    return true;
  }
  return elementHasEventHandler(element.parentElement, eventName, rootNodeId);
};
const wrapEventPropagationCb = (event, key, span) => {
  const oldCb = event[key].bind(event);
  event[key] = () => {
    span.end();
    oldCb();
  };
};




/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/ExportResult.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/ExportResult.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExportResultCode: () => (/* binding */ ExportResultCode)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ExportResultCode;
(function (ExportResultCode) {
    ExportResultCode[ExportResultCode["SUCCESS"] = 0] = "SUCCESS";
    ExportResultCode[ExportResultCode["FAILED"] = 1] = "FAILED";
})(ExportResultCode || (ExportResultCode = {}));
//# sourceMappingURL=ExportResult.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/constants.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/constants.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BAGGAGE_HEADER: () => (/* binding */ BAGGAGE_HEADER),
/* harmony export */   BAGGAGE_ITEMS_SEPARATOR: () => (/* binding */ BAGGAGE_ITEMS_SEPARATOR),
/* harmony export */   BAGGAGE_KEY_PAIR_SEPARATOR: () => (/* binding */ BAGGAGE_KEY_PAIR_SEPARATOR),
/* harmony export */   BAGGAGE_MAX_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_NAME_VALUE_PAIRS),
/* harmony export */   BAGGAGE_MAX_PER_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_PER_NAME_VALUE_PAIRS),
/* harmony export */   BAGGAGE_MAX_TOTAL_LENGTH: () => (/* binding */ BAGGAGE_MAX_TOTAL_LENGTH),
/* harmony export */   BAGGAGE_PROPERTIES_SEPARATOR: () => (/* binding */ BAGGAGE_PROPERTIES_SEPARATOR)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BAGGAGE_KEY_PAIR_SEPARATOR = '=';
var BAGGAGE_PROPERTIES_SEPARATOR = ';';
var BAGGAGE_ITEMS_SEPARATOR = ',';
// Name of the http header used to propagate the baggage
var BAGGAGE_HEADER = 'baggage';
// Maximum number of name-value pairs allowed by w3c spec
var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;
// Maximum number of bytes per a single name-value pair allowed by w3c spec
var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;
// Maximum total length of all name-value pairs allowed by w3c spec
var BAGGAGE_MAX_TOTAL_LENGTH = 8192;
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W3CBaggagePropagator: () => (/* binding */ W3CBaggagePropagator)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../trace/suppress-tracing */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/constants.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * Propagates {@link Baggage} through Context format propagation.
 *
 * Based on the Baggage specification:
 * https://w3c.github.io/baggage/
 */
var W3CBaggagePropagator = /** @class */ (function () {
    function W3CBaggagePropagator() {
    }
    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {
        var baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.getBaggage(context);
        if (!baggage || (0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))
            return;
        var keyPairs = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getKeyPairs)(baggage)
            .filter(function (pair) {
            return pair.length <= _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;
        })
            .slice(0, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_NAME_VALUE_PAIRS);
        var headerValue = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.serializeKeyPairs)(keyPairs);
        if (headerValue.length > 0) {
            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER, headerValue);
        }
    };
    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {
        var headerValue = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER);
        var baggageString = Array.isArray(headerValue)
            ? headerValue.join(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR)
            : headerValue;
        if (!baggageString)
            return context;
        var baggage = {};
        if (baggageString.length === 0) {
            return context;
        }
        var pairs = baggageString.split(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR);
        pairs.forEach(function (entry) {
            var keyPair = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.parsePairKeyValue)(entry);
            if (keyPair) {
                var baggageEntry = { value: keyPair.value };
                if (keyPair.metadata) {
                    baggageEntry.metadata = keyPair.metadata;
                }
                baggage[keyPair.key] = baggageEntry;
            }
        });
        if (Object.entries(baggage).length === 0) {
            return context;
        }
        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setBaggage(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.createBaggage(baggage));
    };
    W3CBaggagePropagator.prototype.fields = function () {
        return [_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER];
    };
    return W3CBaggagePropagator;
}());

//# sourceMappingURL=W3CBaggagePropagator.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/utils.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/utils.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getKeyPairs: () => (/* binding */ getKeyPairs),
/* harmony export */   parseKeyPairsIntoRecord: () => (/* binding */ parseKeyPairsIntoRecord),
/* harmony export */   parsePairKeyValue: () => (/* binding */ parsePairKeyValue),
/* harmony export */   serializeKeyPairs: () => (/* binding */ serializeKeyPairs)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/baggage/utils.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/constants.js");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function serializeKeyPairs(keyPairs) {
    return keyPairs.reduce(function (hValue, current) {
        var value = "" + hValue + (hValue !== '' ? _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR : '') + current;
        return value.length > _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;
    }, '');
}
function getKeyPairs(baggage) {
    return baggage.getAllEntries().map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        var entry = encodeURIComponent(key) + "=" + encodeURIComponent(value.value);
        // include opaque metadata if provided
        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation
        if (value.metadata !== undefined) {
            entry += _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();
        }
        return entry;
    });
}
function parsePairKeyValue(entry) {
    var valueProps = entry.split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR);
    if (valueProps.length <= 0)
        return;
    var keyPairPart = valueProps.shift();
    if (!keyPairPart)
        return;
    var separatorIndex = keyPairPart.indexOf(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_KEY_PAIR_SEPARATOR);
    if (separatorIndex <= 0)
        return;
    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());
    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());
    var metadata;
    if (valueProps.length > 0) {
        metadata = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.baggageEntryMetadataFromString)(valueProps.join(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR));
    }
    return { key: key, value: value, metadata: metadata };
}
/**
 * Parse a string serialized in the baggage HTTP Format (without metadata):
 * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md
 */
function parseKeyPairsIntoRecord(value) {
    if (typeof value !== 'string' || value.length === 0)
        return {};
    return value
        .split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR)
        .map(function (entry) {
        return parsePairKeyValue(entry);
    })
        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })
        .reduce(function (headers, keyPair) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        headers[keyPair.key] = keyPair.value;
        return headers;
    }, {});
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/attributes.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/attributes.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isAttributeKey: () => (/* binding */ isAttributeKey),
/* harmony export */   isAttributeValue: () => (/* binding */ isAttributeValue),
/* harmony export */   sanitizeAttributes: () => (/* binding */ sanitizeAttributes)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

function sanitizeAttributes(attributes) {
    var e_1, _a;
    var out = {};
    if (typeof attributes !== 'object' || attributes == null) {
        return out;
    }
    try {
        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];
            if (!isAttributeKey(key)) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn("Invalid attribute key: " + key);
                continue;
            }
            if (!isAttributeValue(val)) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn("Invalid attribute value set for key: " + key);
                continue;
            }
            if (Array.isArray(val)) {
                out[key] = val.slice();
            }
            else {
                out[key] = val;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return out;
}
function isAttributeKey(key) {
    return typeof key === 'string' && key.length > 0;
}
function isAttributeValue(val) {
    if (val == null) {
        return true;
    }
    if (Array.isArray(val)) {
        return isHomogeneousAttributeValueArray(val);
    }
    return isValidPrimitiveAttributeValue(val);
}
function isHomogeneousAttributeValueArray(arr) {
    var e_2, _a;
    var type;
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var element = arr_1_1.value;
            // null/undefined elements are allowed
            if (element == null)
                continue;
            if (!type) {
                if (isValidPrimitiveAttributeValue(element)) {
                    type = typeof element;
                    continue;
                }
                // encountered an invalid primitive
                return false;
            }
            if (typeof element === type) {
                continue;
            }
            return false;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return true;
}
function isValidPrimitiveAttributeValue(val) {
    switch (typeof val) {
        case 'number':
        case 'boolean':
        case 'string':
            return true;
    }
    return false;
}
//# sourceMappingURL=attributes.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   globalErrorHandler: () => (/* binding */ globalErrorHandler),
/* harmony export */   setGlobalErrorHandler: () => (/* binding */ setGlobalErrorHandler)
/* harmony export */ });
/* harmony import */ var _logging_error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logging-error-handler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The global error handler delegate */
var delegateHandler = (0,_logging_error_handler__WEBPACK_IMPORTED_MODULE_0__.loggingErrorHandler)();
/**
 * Set the global error handler
 * @param {ErrorHandler} handler
 */
function setGlobalErrorHandler(handler) {
    delegateHandler = handler;
}
/**
 * Return the global error handler
 * @param {Exception} ex
 */
function globalErrorHandler(ex) {
    try {
        delegateHandler(ex);
    }
    catch (_a) { } // eslint-disable-line no-empty
}
//# sourceMappingURL=global-error-handler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loggingErrorHandler: () => (/* binding */ loggingErrorHandler)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a function that logs an error using the provided logger, or a
 * console logger if one was not provided.
 */
function loggingErrorHandler() {
    return function (ex) {
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(stringifyException(ex));
    };
}
/**
 * Converts an exception into a string representation
 * @param {Exception} ex
 */
function stringifyException(ex) {
    if (typeof ex === 'string') {
        return ex;
    }
    else {
        return JSON.stringify(flattenException(ex));
    }
}
/**
 * Flattens an exception into key-value pairs by traversing the prototype chain
 * and coercing values to strings. Duplicate properties will not be overwritten;
 * the first insert wins.
 */
function flattenException(ex) {
    var result = {};
    var current = ex;
    while (current !== null) {
        Object.getOwnPropertyNames(current).forEach(function (propertyName) {
            if (result[propertyName])
                return;
            var value = current[propertyName];
            if (value) {
                result[propertyName] = String(value);
            }
        });
        current = Object.getPrototypeOf(current);
    }
    return result;
}
//# sourceMappingURL=logging-error-handler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/internal/validators.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/internal/validators.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validateKey: () => (/* binding */ validateKey),
/* harmony export */   validateValue: () => (/* binding */ validateValue)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
/**
 * Key is opaque string up to 256 characters printable. It MUST begin with a
 * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
 * underscores _, dashes -, asterisks *, and forward slashes /.
 * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
 * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
 * see https://www.w3.org/TR/trace-context/#key
 */
function validateKey(key) {
    return VALID_KEY_REGEX.test(key);
}
/**
 * Value is opaque string up to 256 characters printable ASCII RFC0020
 * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
 */
function validateValue(value) {
    return (VALID_VALUE_BASE_REGEX.test(value) &&
        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));
}
//# sourceMappingURL=validators.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getEnv: () => (/* binding */ getEnv),
/* harmony export */   getEnvWithoutDefaults: () => (/* binding */ getEnvWithoutDefaults)
/* harmony export */ });
/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/environment */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/environment.js");
/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Gets the environment variables
 */
function getEnv() {
    var globalEnv = (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.parseEnvironment)(_globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis);
    return Object.assign({}, _utils_environment__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ENVIRONMENT, globalEnv);
}
function getEnvWithoutDefaults() {
    return (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.parseEnvironment)(_globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis);
}
//# sourceMappingURL=environment.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _globalThis: () => (/* binding */ _globalThis)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Updates to this file should also be replicated to @opentelemetry/api too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = typeof globalThis === 'object'
    ? globalThis
    : typeof self === 'object'
        ? self
        : typeof window === 'object'
            ? window
            : typeof __webpack_require__.g === 'object'
                ? __webpack_require__.g
                : {};
//# sourceMappingURL=globalThis.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SDK_INFO: () => (/* binding */ SDK_INFO)
/* harmony export */ });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../version */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/version.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;


/** Constants describing the SDK in use */
var SDK_INFO = (_a = {},
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'browser',
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_WEBJS,
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_VERSION] = _version__WEBPACK_IMPORTED_MODULE_1__.VERSION,
    _a);
//# sourceMappingURL=sdk-info.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   unrefTimer: () => (/* binding */ unrefTimer)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function unrefTimer(_timer) { }
//# sourceMappingURL=timer-util.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/propagation/composite.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/propagation/composite.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompositePropagator: () => (/* binding */ CompositePropagator)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

/** Combines multiple propagators into a single propagator. */
var CompositePropagator = /** @class */ (function () {
    /**
     * Construct a composite propagator from a list of propagators.
     *
     * @param [config] Configuration object for composite propagator
     */
    function CompositePropagator(config) {
        if (config === void 0) { config = {}; }
        var _a;
        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];
        this._fields = Array.from(new Set(this._propagators
            // older propagators may not have fields function, null check to be sure
            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })
            .reduce(function (x, y) { return x.concat(y); }, [])));
    }
    /**
     * Run each of the configured propagators with the given context and carrier.
     * Propagators are run in the order they are configured, so if multiple
     * propagators write the same carrier key, the propagator later in the list
     * will "win".
     *
     * @param context Context to inject
     * @param carrier Carrier into which context will be injected
     */
    CompositePropagator.prototype.inject = function (context, carrier, setter) {
        var e_1, _a;
        try {
            for (var _b = __values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {
                var propagator = _c.value;
                try {
                    propagator.inject(context, carrier, setter);
                }
                catch (err) {
                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Run each of the configured propagators with the given context and carrier.
     * Propagators are run in the order they are configured, so if multiple
     * propagators write the same context key, the propagator later in the list
     * will "win".
     *
     * @param context Context to add values to
     * @param carrier Carrier from which to extract context
     */
    CompositePropagator.prototype.extract = function (context, carrier, getter) {
        return this._propagators.reduce(function (ctx, propagator) {
            try {
                return propagator.extract(ctx, carrier, getter);
            }
            catch (err) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn("Failed to extract with " + propagator.constructor.name + ". Err: " + err.message);
            }
            return ctx;
        }, context);
    };
    CompositePropagator.prototype.fields = function () {
        // return a new array so our fields cannot be modified
        return this._fields.slice();
    };
    return CompositePropagator;
}());

//# sourceMappingURL=composite.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceState: () => (/* binding */ TraceState)
/* harmony export */ });
/* harmony import */ var _internal_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/validators */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/internal/validators.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ',';
var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */
var TraceState = /** @class */ (function () {
    function TraceState(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState)
            this._parse(rawTraceState);
    }
    TraceState.prototype.set = function (key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
            traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
    };
    TraceState.prototype.unset = function (key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
    };
    TraceState.prototype.get = function (key) {
        return this._internalState.get(key);
    };
    TraceState.prototype.serialize = function () {
        var _this = this;
        return this._keys()
            .reduce(function (agg, key) {
            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
            return agg;
        }, [])
            .join(LIST_MEMBERS_SEPARATOR);
    };
    TraceState.prototype._parse = function (rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN)
            return;
        this._internalState = rawTraceState
            .split(LIST_MEMBERS_SEPARATOR)
            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
            .reduce(function (agg, part) {
            var listMember = part.trim(); // Optional Whitespace (OWS) handling
            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
            if (i !== -1) {
                var key = listMember.slice(0, i);
                var value = listMember.slice(i + 1, part.length);
                if ((0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {
                    agg.set(key, value);
                }
                else {
                    // TODO: Consider to add warning log
                }
            }
            return agg;
        }, new Map());
        // Because of the reverse() requirement, trunc must be done after map is created
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
            this._internalState = new Map(Array.from(this._internalState.entries())
                .reverse() // Use reverse same as original tracestate parse chain
                .slice(0, MAX_TRACE_STATE_ITEMS));
        }
    };
    TraceState.prototype._keys = function () {
        return Array.from(this._internalState.keys()).reverse();
    };
    TraceState.prototype._clone = function () {
        var traceState = new TraceState();
        traceState._internalState = new Map(this._internalState);
        return traceState;
    };
    return TraceState;
}());

//# sourceMappingURL=TraceState.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TRACE_PARENT_HEADER: () => (/* binding */ TRACE_PARENT_HEADER),
/* harmony export */   TRACE_STATE_HEADER: () => (/* binding */ TRACE_STATE_HEADER),
/* harmony export */   W3CTraceContextPropagator: () => (/* binding */ W3CTraceContextPropagator),
/* harmony export */   parseTraceParent: () => (/* binding */ parseTraceParent)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/* harmony import */ var _suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suppress-tracing */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");
/* harmony import */ var _TraceState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraceState */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var TRACE_PARENT_HEADER = 'traceparent';
var TRACE_STATE_HEADER = 'tracestate';
var VERSION = '00';
var VERSION_PART = '(?!ff)[\\da-f]{2}';
var TRACE_ID_PART = '(?![0]{32})[\\da-f]{32}';
var PARENT_ID_PART = '(?![0]{16})[\\da-f]{16}';
var FLAGS_PART = '[\\da-f]{2}';
var TRACE_PARENT_REGEX = new RegExp("^\\s?(" + VERSION_PART + ")-(" + TRACE_ID_PART + ")-(" + PARENT_ID_PART + ")-(" + FLAGS_PART + ")(-.*)?\\s?$");
/**
 * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}
 * @param traceParent - A meta property that comes from server.
 *     It should be dynamically generated server side to have the server's request trace Id,
 *     a parent span Id that was set on the server's request span,
 *     and the trace flags to indicate the server's sampling decision
 *     (01 = sampled, 00 = not sampled).
 *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'
 *     For more information see {@link https://www.w3.org/TR/trace-context/}
 */
function parseTraceParent(traceParent) {
    var match = TRACE_PARENT_REGEX.exec(traceParent);
    if (!match)
        return null;
    // According to the specification the implementation should be compatible
    // with future versions. If there are more parts, we only reject it if it's using version 00
    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent
    if (match[1] === '00' && match[5])
        return null;
    return {
        traceId: match[2],
        spanId: match[3],
        traceFlags: parseInt(match[4], 16),
    };
}
/**
 * Propagates {@link SpanContext} through Trace Context format propagation.
 *
 * Based on the Trace Context specification:
 * https://www.w3.org/TR/trace-context/
 */
var W3CTraceContextPropagator = /** @class */ (function () {
    function W3CTraceContextPropagator() {
    }
    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {
        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);
        if (!spanContext ||
            (0,_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context) ||
            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.isSpanContextValid)(spanContext))
            return;
        var traceParent = VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-0" + Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.NONE).toString(16);
        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);
        if (spanContext.traceState) {
            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());
        }
    };
    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {
        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);
        if (!traceParentHeader)
            return context;
        var traceParent = Array.isArray(traceParentHeader)
            ? traceParentHeader[0]
            : traceParentHeader;
        if (typeof traceParent !== 'string')
            return context;
        var spanContext = parseTraceParent(traceParent);
        if (!spanContext)
            return context;
        spanContext.isRemote = true;
        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);
        if (traceStateHeader) {
            // If more than one `tracestate` header is found, we merge them into a
            // single header.
            var state = Array.isArray(traceStateHeader)
                ? traceStateHeader.join(',')
                : traceStateHeader;
            spanContext.traceState = new _TraceState__WEBPACK_IMPORTED_MODULE_4__.TraceState(typeof state === 'string' ? state : undefined);
        }
        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, spanContext);
    };
    W3CTraceContextPropagator.prototype.fields = function () {
        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];
    };
    return W3CTraceContextPropagator;
}());

//# sourceMappingURL=W3CTraceContextPropagator.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isTracingSuppressed: () => (/* binding */ isTracingSuppressed),
/* harmony export */   suppressTracing: () => (/* binding */ suppressTracing),
/* harmony export */   unsuppressTracing: () => (/* binding */ unsuppressTracing)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');
function suppressTracing(context) {
    return context.setValue(SUPPRESS_TRACING_KEY, true);
}
function unsuppressTracing(context) {
    return context.deleteValue(SUPPRESS_TRACING_KEY);
}
function isTracingSuppressed(context) {
    return context.getValue(SUPPRESS_TRACING_KEY) === true;
}
//# sourceMappingURL=suppress-tracing.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/callback.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/callback.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BindOnceFuture: () => (/* binding */ BindOnceFuture)
/* harmony export */ });
/* harmony import */ var _promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./promise */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/promise.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

/**
 * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.
 */
var BindOnceFuture = /** @class */ (function () {
    function BindOnceFuture(_callback, _that) {
        this._callback = _callback;
        this._that = _that;
        this._isCalled = false;
        this._deferred = new _promise__WEBPACK_IMPORTED_MODULE_0__.Deferred();
    }
    Object.defineProperty(BindOnceFuture.prototype, "isCalled", {
        get: function () {
            return this._isCalled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BindOnceFuture.prototype, "promise", {
        get: function () {
            return this._deferred.promise;
        },
        enumerable: false,
        configurable: true
    });
    BindOnceFuture.prototype.call = function () {
        var _a;
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._isCalled) {
            this._isCalled = true;
            try {
                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });
            }
            catch (err) {
                this._deferred.reject(err);
            }
        }
        return this._deferred.promise;
    };
    return BindOnceFuture;
}());

//# sourceMappingURL=callback.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/environment.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/environment.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),
/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),
/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT),
/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: () => (/* binding */ DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT),
/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: () => (/* binding */ DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT),
/* harmony export */   parseEnvironment: () => (/* binding */ parseEnvironment)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag/types.js");
/* harmony import */ var _sampling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampling */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/sampling.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DEFAULT_LIST_SEPARATOR = ',';
/**
 * Environment interface to define all names
 */
var ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];
function isEnvVarABoolean(key) {
    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);
}
var ENVIRONMENT_NUMBERS_KEYS = [
    'OTEL_BSP_EXPORT_TIMEOUT',
    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',
    'OTEL_BSP_MAX_QUEUE_SIZE',
    'OTEL_BSP_SCHEDULE_DELAY',
    'OTEL_BLRP_EXPORT_TIMEOUT',
    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',
    'OTEL_BLRP_MAX_QUEUE_SIZE',
    'OTEL_BLRP_SCHEDULE_DELAY',
    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',
    'OTEL_ATTRIBUTE_COUNT_LIMIT',
    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',
    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',
    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',
    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',
    'OTEL_SPAN_EVENT_COUNT_LIMIT',
    'OTEL_SPAN_LINK_COUNT_LIMIT',
    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',
    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',
    'OTEL_EXPORTER_OTLP_TIMEOUT',
    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',
    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',
    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',
    'OTEL_EXPORTER_JAEGER_AGENT_PORT',
];
function isEnvVarANumber(key) {
    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);
}
var ENVIRONMENT_LISTS_KEYS = [
    'OTEL_NO_PATCH_MODULES',
    'OTEL_PROPAGATORS',
    'OTEL_SEMCONV_STABILITY_OPT_IN',
];
function isEnvVarAList(key) {
    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;
}
var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;
var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;
var DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;
var DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;
/**
 * Default environment variables
 */
var DEFAULT_ENVIRONMENT = {
    OTEL_SDK_DISABLED: false,
    CONTAINER_NAME: '',
    ECS_CONTAINER_METADATA_URI_V4: '',
    ECS_CONTAINER_METADATA_URI: '',
    HOSTNAME: '',
    KUBERNETES_SERVICE_HOST: '',
    NAMESPACE: '',
    OTEL_BSP_EXPORT_TIMEOUT: 30000,
    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
    OTEL_BSP_MAX_QUEUE_SIZE: 2048,
    OTEL_BSP_SCHEDULE_DELAY: 5000,
    OTEL_BLRP_EXPORT_TIMEOUT: 30000,
    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
    OTEL_BLRP_SCHEDULE_DELAY: 5000,
    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',
    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
    OTEL_EXPORTER_JAEGER_ENDPOINT: '',
    OTEL_EXPORTER_JAEGER_PASSWORD: '',
    OTEL_EXPORTER_JAEGER_USER: '',
    OTEL_EXPORTER_OTLP_ENDPOINT: '',
    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',
    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',
    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',
    OTEL_EXPORTER_OTLP_HEADERS: '',
    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',
    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',
    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',
    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,
    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,
    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',
    OTEL_LOG_LEVEL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,
    OTEL_NO_PATCH_MODULES: [],
    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],
    OTEL_RESOURCE_ATTRIBUTES: '',
    OTEL_SERVICE_NAME: '',
    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
    OTEL_SPAN_LINK_COUNT_LIMIT: 128,
    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,
    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,
    OTEL_TRACES_EXPORTER: '',
    OTEL_TRACES_SAMPLER: _sampling__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn,
    OTEL_TRACES_SAMPLER_ARG: '',
    OTEL_LOGS_EXPORTER: '',
    OTEL_EXPORTER_OTLP_INSECURE: '',
    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',
    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',
    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',
    OTEL_EXPORTER_OTLP_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_COMPRESSION: '',
    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',
    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',
    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',
    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',
    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',
    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',
    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',
    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',
    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',
    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',
    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',
    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',
    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',
    OTEL_SEMCONV_STABILITY_OPT_IN: [],
};
/**
 * @param key
 * @param environment
 * @param values
 */
function parseBoolean(key, environment, values) {
    if (typeof values[key] === 'undefined') {
        return;
    }
    var value = String(values[key]);
    // support case-insensitive "true"
    environment[key] = value.toLowerCase() === 'true';
}
/**
 * Parses a variable as number with number validation
 * @param name
 * @param environment
 * @param values
 * @param min
 * @param max
 */
function parseNumber(name, environment, values, min, max) {
    if (min === void 0) { min = -Infinity; }
    if (max === void 0) { max = Infinity; }
    if (typeof values[name] !== 'undefined') {
        var value = Number(values[name]);
        if (!isNaN(value)) {
            if (value < min) {
                environment[name] = min;
            }
            else if (value > max) {
                environment[name] = max;
            }
            else {
                environment[name] = value;
            }
        }
    }
}
/**
 * Parses list-like strings from input into output.
 * @param name
 * @param environment
 * @param values
 * @param separator
 */
function parseStringList(name, output, input, separator) {
    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }
    var givenValue = input[name];
    if (typeof givenValue === 'string') {
        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });
    }
}
// The support string -> DiagLogLevel mappings
var logLevelMap = {
    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL,
    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE,
    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG,
    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,
    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN,
    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR,
    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE,
};
/**
 * Environmentally sets log level if valid log level string is provided
 * @param key
 * @param environment
 * @param values
 */
function setLogLevelFromEnv(key, environment, values) {
    var value = values[key];
    if (typeof value === 'string') {
        var theLevel = logLevelMap[value.toUpperCase()];
        if (theLevel != null) {
            environment[key] = theLevel;
        }
    }
}
/**
 * Parses environment values
 * @param values
 */
function parseEnvironment(values) {
    var environment = {};
    for (var env in DEFAULT_ENVIRONMENT) {
        var key = env;
        switch (key) {
            case 'OTEL_LOG_LEVEL':
                setLogLevelFromEnv(key, environment, values);
                break;
            default:
                if (isEnvVarABoolean(key)) {
                    parseBoolean(key, environment, values);
                }
                else if (isEnvVarANumber(key)) {
                    parseNumber(key, environment, values);
                }
                else if (isEnvVarAList(key)) {
                    parseStringList(key, environment, values);
                }
                else {
                    var value = values[key];
                    if (typeof value !== 'undefined' && value !== null) {
                        environment[key] = String(value);
                    }
                }
        }
    }
    return environment;
}
//# sourceMappingURL=environment.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * based on lodash in order to support esm builds without esModuleInterop.
 * lodash is using MIT License.
 **/
var objectTag = '[object Object]';
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
var objectCtorString = funcToString.call(Object);
var getPrototype = overArg(Object.getPrototypeOf, Object);
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
var nativeObjectToString = objectProto.toString;
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
    return function (arg) {
        return func(transform(arg));
    };
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {
        return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
        return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor &&
        funcToString.call(Ctor) === objectCtorString);
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value)
        ? getRawTag(value)
        : objectToString(value);
}
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    var unmasked = false;
    try {
        value[symToStringTag] = undefined;
        unmasked = true;
    }
    catch (e) {
        // silence
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) {
            value[symToStringTag] = tag;
        }
        else {
            delete value[symToStringTag];
        }
    }
    return result;
}
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
    return nativeObjectToString.call(value);
}
//# sourceMappingURL=lodash.merge.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/merge.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/merge.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   merge: () => (/* binding */ merge)
/* harmony export */ });
/* harmony import */ var _lodash_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lodash.merge */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable @typescript-eslint/no-explicit-any */

var MAX_LEVEL = 20;
/**
 * Merges objects together
 * @param args - objects / values to be merged
 */
function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var result = args.shift();
    var objects = new WeakMap();
    while (args.length > 0) {
        result = mergeTwoObjects(result, args.shift(), 0, objects);
    }
    return result;
}
function takeValue(value) {
    if (isArray(value)) {
        return value.slice();
    }
    return value;
}
/**
 * Merges two objects
 * @param one - first object
 * @param two - second object
 * @param level - current deep level
 * @param objects - objects holder that has been already referenced - to prevent
 * cyclic dependency
 */
function mergeTwoObjects(one, two, level, objects) {
    if (level === void 0) { level = 0; }
    var result;
    if (level > MAX_LEVEL) {
        return undefined;
    }
    level++;
    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {
        result = takeValue(two);
    }
    else if (isArray(one)) {
        result = one.slice();
        if (isArray(two)) {
            for (var i = 0, j = two.length; i < j; i++) {
                result.push(takeValue(two[i]));
            }
        }
        else if (isObject(two)) {
            var keys = Object.keys(two);
            for (var i = 0, j = keys.length; i < j; i++) {
                var key = keys[i];
                result[key] = takeValue(two[key]);
            }
        }
    }
    else if (isObject(one)) {
        if (isObject(two)) {
            if (!shouldMerge(one, two)) {
                return two;
            }
            result = Object.assign({}, one);
            var keys = Object.keys(two);
            for (var i = 0, j = keys.length; i < j; i++) {
                var key = keys[i];
                var twoValue = two[key];
                if (isPrimitive(twoValue)) {
                    if (typeof twoValue === 'undefined') {
                        delete result[key];
                    }
                    else {
                        // result[key] = takeValue(twoValue);
                        result[key] = twoValue;
                    }
                }
                else {
                    var obj1 = result[key];
                    var obj2 = twoValue;
                    if (wasObjectReferenced(one, key, objects) ||
                        wasObjectReferenced(two, key, objects)) {
                        delete result[key];
                    }
                    else {
                        if (isObject(obj1) && isObject(obj2)) {
                            var arr1 = objects.get(obj1) || [];
                            var arr2 = objects.get(obj2) || [];
                            arr1.push({ obj: one, key: key });
                            arr2.push({ obj: two, key: key });
                            objects.set(obj1, arr1);
                            objects.set(obj2, arr2);
                        }
                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);
                    }
                }
            }
        }
        else {
            result = two;
        }
    }
    return result;
}
/**
 * Function to check if object has been already reference
 * @param obj
 * @param key
 * @param objects
 */
function wasObjectReferenced(obj, key, objects) {
    var arr = objects.get(obj[key]) || [];
    for (var i = 0, j = arr.length; i < j; i++) {
        var info = arr[i];
        if (info.key === key && info.obj === obj) {
            return true;
        }
    }
    return false;
}
function isArray(value) {
    return Array.isArray(value);
}
function isFunction(value) {
    return typeof value === 'function';
}
function isObject(value) {
    return (!isPrimitive(value) &&
        !isArray(value) &&
        !isFunction(value) &&
        typeof value === 'object');
}
function isPrimitive(value) {
    return (typeof value === 'string' ||
        typeof value === 'number' ||
        typeof value === 'boolean' ||
        typeof value === 'undefined' ||
        value instanceof Date ||
        value instanceof RegExp ||
        value === null);
}
function shouldMerge(one, two) {
    if (!(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(one) || !(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(two)) {
        return false;
    }
    return true;
}
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/promise.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/promise.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Deferred: () => (/* binding */ Deferred)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        get: function () {
            return this._promise;
        },
        enumerable: false,
        configurable: true
    });
    Deferred.prototype.resolve = function (val) {
        this._resolve(val);
    };
    Deferred.prototype.reject = function (err) {
        this._reject(err);
    };
    return Deferred;
}());

//# sourceMappingURL=promise.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/sampling.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/sampling.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TracesSamplerValues: () => (/* binding */ TracesSamplerValues)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TracesSamplerValues;
(function (TracesSamplerValues) {
    TracesSamplerValues["AlwaysOff"] = "always_off";
    TracesSamplerValues["AlwaysOn"] = "always_on";
    TracesSamplerValues["ParentBasedAlwaysOff"] = "parentbased_always_off";
    TracesSamplerValues["ParentBasedAlwaysOn"] = "parentbased_always_on";
    TracesSamplerValues["ParentBasedTraceIdRatio"] = "parentbased_traceidratio";
    TracesSamplerValues["TraceIdRatio"] = "traceidratio";
})(TracesSamplerValues || (TracesSamplerValues = {}));
//# sourceMappingURL=sampling.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),
/* harmony export */   urlMatches: () => (/* binding */ urlMatches)
/* harmony export */ });
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
    if (typeof urlToMatch === 'string') {
        return url === urlToMatch;
    }
    else {
        return !!url.match(urlToMatch);
    }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */
function isUrlIgnored(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) {
        return false;
    }
    try {
        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {
            var ignoreUrl = ignoredUrls_1_1.value;
            if (urlMatches(url, ignoreUrl)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/version.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/version.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.30.1';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   registerInstrumentations: () => (/* binding */ registerInstrumentations)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var _autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./autoLoaderUtils */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * It will register instrumentations and plugins
 * @param options
 * @return returns function to unload instrumentation and plugins that were
 *   registered
 */
function registerInstrumentations(options) {
    var _a, _b;
    var tracerProvider = options.tracerProvider || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getTracerProvider();
    var meterProvider = options.meterProvider || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.metrics.getMeterProvider();
    var loggerProvider = options.loggerProvider || _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_2__.logs.getLoggerProvider();
    var instrumentations = (_b = (_a = options.instrumentations) === null || _a === void 0 ? void 0 : _a.flat()) !== null && _b !== void 0 ? _b : [];
    (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__.enableInstrumentations)(instrumentations, tracerProvider, meterProvider, loggerProvider);
    return function () {
        (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_3__.disableInstrumentations)(instrumentations);
    };
}
//# sourceMappingURL=autoLoader.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disableInstrumentations: () => (/* binding */ disableInstrumentations),
/* harmony export */   enableInstrumentations: () => (/* binding */ enableInstrumentations)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Enable instrumentations
 * @param instrumentations
 * @param tracerProvider
 * @param meterProvider
 */
function enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider) {
    for (var i = 0, j = instrumentations.length; i < j; i++) {
        var instrumentation = instrumentations[i];
        if (tracerProvider) {
            instrumentation.setTracerProvider(tracerProvider);
        }
        if (meterProvider) {
            instrumentation.setMeterProvider(meterProvider);
        }
        if (loggerProvider && instrumentation.setLoggerProvider) {
            instrumentation.setLoggerProvider(loggerProvider);
        }
        // instrumentations have been already enabled during creation
        // so enable only if user prevented that by setting enabled to false
        // this is to prevent double enabling but when calling register all
        // instrumentations should be now enabled
        if (!instrumentation.getConfig().enabled) {
            instrumentation.enable();
        }
    }
}
/**
 * Disable instrumentations
 * @param instrumentations
 */
function disableInstrumentations(instrumentations) {
    instrumentations.forEach(function (instrumentation) { return instrumentation.disable(); });
}
//# sourceMappingURL=autoLoaderUtils.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract = /** @class */ (function () {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */
        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.wrap;
        /* Api to unwrap instrumented methods */
        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.unwrap;
        /* Api to mass wrap instrumented method */
        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massWrap;
        /* Api to mass unwrap instrumented methods */
        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massUnwrap;
        this.setConfig(config);
        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.createComponentLogger({
            namespace: instrumentationName,
        });
        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(instrumentationName, instrumentationVersion);
        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.metrics.getMeter(instrumentationName, instrumentationVersion);
        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__.logs.getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */
        get: function () {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */
    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */
    InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */
    InstrumentationAbstract.prototype.getModuleDefinitions = function () {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) {
            return [initResult];
        }
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */
    InstrumentationAbstract.prototype._updateMetricInstruments = function () {
        return;
    };
    /* Returns InstrumentationConfig */
    InstrumentationAbstract.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */
    InstrumentationAbstract.prototype.setConfig = function (config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = __assign({ enabled: true }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */
    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */
        get: function () {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */
    InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {
        if (!hookHandler) {
            return;
        }
        try {
            hookHandler(span, info);
        }
        catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", { triggerName: triggerName }, e);
        }
    };
    return InstrumentationAbstract;
}());

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase = /** @class */ (function (_super) {
    __extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) {
            _this.enable();
        }
        return _this;
    }
    return InstrumentationBase;
}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/Resource.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/Resource.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resource: () => (/* binding */ Resource)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js");
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};




/**
 * A Resource describes the entity for which a signals (metrics or trace) are
 * collected.
 */
var Resource = /** @class */ (function () {
    function Resource(
    /**
     * A dictionary of attributes with string keys and values that provide
     * information about the entity as numbers, strings or booleans
     * TODO: Consider to add check/validation on attributes.
     */
    attributes, asyncAttributesPromise) {
        var _this = this;
        var _a;
        this._attributes = attributes;
        this.asyncAttributesPending = asyncAttributesPromise != null;
        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {
            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);
            _this.asyncAttributesPending = false;
            return asyncAttributes;
        }, function (err) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug("a resource's async attributes promise rejected: %s", err);
            _this.asyncAttributesPending = false;
            return {};
        });
    }
    /**
     * Returns an empty Resource
     */
    Resource.empty = function () {
        return Resource.EMPTY;
    };
    /**
     * Returns a Resource that identifies the SDK in use.
     */
    Resource.default = function () {
        var _a;
        return new Resource((_a = {},
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_NAME] = (0,_platform__WEBPACK_IMPORTED_MODULE_2__.defaultServiceName)(),
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_NAME] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_NAME],
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_VERSION] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_VERSION],
            _a));
    };
    Object.defineProperty(Resource.prototype, "attributes", {
        get: function () {
            var _a;
            if (this.asyncAttributesPending) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('Accessing resource attributes before async attributes settled');
            }
            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to
     * this Resource's attributes. This is useful in exporters to block until resource detection
     * has finished.
     */
    Resource.prototype.waitForAsyncAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._asyncAttributesPromise];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a new, merged {@link Resource} by merging the current Resource
     * with the other Resource. In case of a collision, other Resource takes
     * precedence.
     *
     * @param other the Resource that will be merged with this.
     * @returns the newly merged Resource.
     */
    Resource.prototype.merge = function (other) {
        var _this = this;
        var _a;
        if (!other)
            return this;
        // SpanAttributes from other resource overwrite attributes from this resource.
        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));
        if (!this._asyncAttributesPromise &&
            !other._asyncAttributesPromise) {
            return new Resource(mergedSyncAttributes);
        }
        var mergedAttributesPromise = Promise.all([
            this._asyncAttributesPromise,
            other._asyncAttributesPromise,
        ]).then(function (_a) {
            var _b;
            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];
            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);
        });
        return new Resource(mergedSyncAttributes, mergedAttributesPromise);
    };
    Resource.EMPTY = new Resource({});
    return Resource;
}());

//# sourceMappingURL=Resource.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/detect-resources.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/detect-resources.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   detectResources: () => (/* binding */ detectResources),
/* harmony export */   detectResourcesSync: () => (/* binding */ detectResourcesSync)
/* harmony export */ });
/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Resource */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/Resource.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



/**
 * Runs all resource detectors and returns the results merged into a single Resource. Promise
 * does not resolve until all the underlying detectors have resolved, unlike
 * detectResourcesSync.
 *
 * @deprecated use detectResourcesSync() instead.
 * @param config Configuration for resource detection
 */
var detectResources = function (config) {
    if (config === void 0) { config = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var resources;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all((config.detectors || []).map(function (d) { return __awaiter(void 0, void 0, void 0, function () {
                        var resource, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, d.detect(config)];
                                case 1:
                                    resource = _a.sent();
                                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + " found resource.", resource);
                                    return [2 /*return*/, resource];
                                case 2:
                                    e_1 = _a.sent();
                                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + " failed: " + e_1.message);
                                    return [2 /*return*/, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty()];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); }))];
                case 1:
                    resources = _a.sent();
                    // Future check if verbose logging is enabled issue #1903
                    logResources(resources);
                    return [2 /*return*/, resources.reduce(function (acc, resource) { return acc.merge(resource); }, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty())];
            }
        });
    });
};
/**
 * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.
 *
 * @param config Configuration for resource detection
 */
var detectResourcesSync = function (config) {
    var _a;
    if (config === void 0) { config = {}; }
    var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function (d) {
        try {
            var resourceOrPromise_1 = d.detect(config);
            var resource_1;
            if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPromiseLike)(resourceOrPromise_1)) {
                var createPromise = function () { return __awaiter(void 0, void 0, void 0, function () {
                    var resolvedResource;
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, resourceOrPromise_1];
                            case 1:
                                resolvedResource = _b.sent();
                                return [4 /*yield*/, ((_a = resolvedResource.waitForAsyncAttributes) === null || _a === void 0 ? void 0 : _a.call(resolvedResource))];
                            case 2:
                                _b.sent();
                                return [2 /*return*/, resolvedResource.attributes];
                        }
                    });
                }); };
                resource_1 = new _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource({}, createPromise());
            }
            else {
                resource_1 = resourceOrPromise_1;
            }
            if (resource_1.waitForAsyncAttributes) {
                void resource_1
                    .waitForAsyncAttributes()
                    .then(function () {
                    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + " found resource.", resource_1);
                });
            }
            else {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + " found resource.", resource_1);
            }
            return resource_1;
        }
        catch (e) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(d.constructor.name + " failed: " + e.message);
            return _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty();
        }
    });
    var mergedResources = resources.reduce(function (acc, resource) { return acc.merge(resource); }, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty());
    if (mergedResources.waitForAsyncAttributes) {
        void mergedResources.waitForAsyncAttributes().then(function () {
            // Future check if verbose logging is enabled issue #1903
            logResources(resources);
        });
    }
    return mergedResources;
};
/**
 * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.
 *
 * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.
 */
var logResources = function (resources) {
    resources.forEach(function (resource) {
        // Print only populated resources
        if (Object.keys(resource.attributes).length > 0) {
            var resourceDebugString = JSON.stringify(resource.attributes, null, 4);
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.verbose(resourceDebugString);
        }
    });
};
//# sourceMappingURL=detect-resources.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultServiceName: () => (/* binding */ defaultServiceName)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function defaultServiceName() {
    return 'unknown_service';
}
//# sourceMappingURL=default-service-name.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/utils.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/utils.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var isPromiseLike = function (val) {
    return (val !== null && typeof val === 'object' && typeof val.then === 'function');
};
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasicTracerProvider: () => (/* binding */ BasicTracerProvider),
/* harmony export */   ForceFlushState: () => (/* binding */ ForceFlushState)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/merge.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/propagation/composite.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js");
/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/resources */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/resources/build/esm/Resource.js");
/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Tracer */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js");
/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MultiSpanProcessor */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js");
/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js");
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utility */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};









var ForceFlushState;
(function (ForceFlushState) {
    ForceFlushState[ForceFlushState["resolved"] = 0] = "resolved";
    ForceFlushState[ForceFlushState["timeout"] = 1] = "timeout";
    ForceFlushState[ForceFlushState["error"] = 2] = "error";
    ForceFlushState[ForceFlushState["unresolved"] = 3] = "unresolved";
})(ForceFlushState || (ForceFlushState = {}));
/**
 * This class represents a basic tracer provider which platform libraries can extend
 */
var BasicTracerProvider = /** @class */ (function () {
    function BasicTracerProvider(config) {
        if (config === void 0) { config = {}; }
        var _a, _b;
        this._registeredSpanProcessors = [];
        this._tracers = new Map();
        var mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.merge)({}, (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadDefaultConfig)(), (0,_utility__WEBPACK_IMPORTED_MODULE_2__.reconfigureLimits)(config));
        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.empty();
        if (mergedConfig.mergeResourceWithDefaults) {
            this.resource = _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.default().merge(this.resource);
        }
        this._config = Object.assign({}, mergedConfig, {
            resource: this.resource,
        });
        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {
            this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);
            this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(this._registeredSpanProcessors);
        }
        else {
            var defaultExporter = this._buildExporterFromEnv();
            if (defaultExporter !== undefined) {
                var batchProcessor = new _platform__WEBPACK_IMPORTED_MODULE_5__.BatchSpanProcessor(defaultExporter);
                this.activeSpanProcessor = batchProcessor;
            }
            else {
                this.activeSpanProcessor = new _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor();
            }
        }
    }
    BasicTracerProvider.prototype.getTracer = function (name, version, options) {
        var key = name + "@" + (version || '') + ":" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');
        if (!this._tracers.has(key)) {
            this._tracers.set(key, new _Tracer__WEBPACK_IMPORTED_MODULE_7__.Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this._tracers.get(key);
    };
    /**
     * @deprecated please use {@link TracerConfig} spanProcessors property
     * Adds a new {@link SpanProcessor} to this tracer.
     * @param spanProcessor the new SpanProcessor to be added.
     */
    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {
        if (this._registeredSpanProcessors.length === 0) {
            // since we might have enabled by default a batchProcessor, we disable it
            // before adding the new one
            this.activeSpanProcessor
                .shutdown()
                .catch(function (err) {
                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.error('Error while trying to shutdown current span processor', err);
            });
        }
        this._registeredSpanProcessors.push(spanProcessor);
        this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(this._registeredSpanProcessors);
    };
    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {
        return this.activeSpanProcessor;
    };
    /**
     * Register this TracerProvider for use with the OpenTelemetry API.
     * Undefined values may be replaced with defaults, and
     * null values will be skipped.
     *
     * @param config Configuration object for SDK registration
     */
    BasicTracerProvider.prototype.register = function (config) {
        if (config === void 0) { config = {}; }
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setGlobalTracerProvider(this);
        if (config.propagator === undefined) {
            config.propagator = this._buildPropagatorFromEnv();
        }
        if (config.contextManager) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.context.setGlobalContextManager(config.contextManager);
        }
        if (config.propagator) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.propagation.setGlobalPropagator(config.propagator);
        }
    };
    BasicTracerProvider.prototype.forceFlush = function () {
        var timeout = this._config.forceFlushTimeoutMillis;
        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {
            return new Promise(function (resolve) {
                var state;
                var timeoutInterval = setTimeout(function () {
                    resolve(new Error("Span processor did not completed within timeout period of " + timeout + " ms"));
                    state = ForceFlushState.timeout;
                }, timeout);
                spanProcessor
                    .forceFlush()
                    .then(function () {
                    clearTimeout(timeoutInterval);
                    if (state !== ForceFlushState.timeout) {
                        state = ForceFlushState.resolved;
                        resolve(state);
                    }
                })
                    .catch(function (error) {
                    clearTimeout(timeoutInterval);
                    state = ForceFlushState.error;
                    resolve(error);
                });
            });
        });
        return new Promise(function (resolve, reject) {
            Promise.all(promises)
                .then(function (results) {
                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });
                if (errors.length > 0) {
                    reject(errors);
                }
                else {
                    resolve();
                }
            })
                .catch(function (error) { return reject([error]); });
        });
    };
    BasicTracerProvider.prototype.shutdown = function () {
        return this.activeSpanProcessor.shutdown();
    };
    /**
     * TS cannot yet infer the type of this.constructor:
     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146
     * There is no need to override either of the getters in your child class.
     * The type of the registered component maps should be the same across all
     * classes in the inheritance tree.
     */
    BasicTracerProvider.prototype._getPropagator = function (name) {
        var _a;
        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();
    };
    BasicTracerProvider.prototype._getSpanExporter = function (name) {
        var _a;
        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();
    };
    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {
        var _this = this;
        // per spec, propagators from env must be deduplicated
        var uniquePropagatorNames = Array.from(new Set((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_PROPAGATORS));
        var propagators = uniquePropagatorNames.map(function (name) {
            var propagator = _this._getPropagator(name);
            if (!propagator) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.warn("Propagator \"" + name + "\" requested through environment variable is unavailable.");
            }
            return propagator;
        });
        var validPropagators = propagators.reduce(function (list, item) {
            if (item) {
                list.push(item);
            }
            return list;
        }, []);
        if (validPropagators.length === 0) {
            return;
        }
        else if (uniquePropagatorNames.length === 1) {
            return validPropagators[0];
        }
        else {
            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__.CompositePropagator({
                propagators: validPropagators,
            });
        }
    };
    BasicTracerProvider.prototype._buildExporterFromEnv = function () {
        var exporterName = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_TRACES_EXPORTER;
        if (exporterName === 'none' || exporterName === '')
            return;
        var exporter = this._getSpanExporter(exporterName);
        if (!exporter) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.error("Exporter \"" + exporterName + "\" requested through environment variable is unavailable.");
        }
        return exporter;
    };
    BasicTracerProvider._registeredPropagators = new Map([
        ['tracecontext', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__.W3CTraceContextPropagator(); }],
        ['baggage', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__.W3CBaggagePropagator(); }],
    ]);
    BasicTracerProvider._registeredExporters = new Map();
    return BasicTracerProvider;
}());

//# sourceMappingURL=BasicTracerProvider.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiSpanProcessor: () => (/* binding */ MultiSpanProcessor)
/* harmony export */ });
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

/**
 * Implementation of the {@link SpanProcessor} that simply forwards all
 * received events to a list of {@link SpanProcessor}s.
 */
var MultiSpanProcessor = /** @class */ (function () {
    function MultiSpanProcessor(_spanProcessors) {
        this._spanProcessors = _spanProcessors;
    }
    MultiSpanProcessor.prototype.forceFlush = function () {
        var e_1, _a;
        var promises = [];
        try {
            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var spanProcessor = _c.value;
                promises.push(spanProcessor.forceFlush());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return new Promise(function (resolve) {
            Promise.all(promises)
                .then(function () {
                resolve();
            })
                .catch(function (error) {
                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));
                resolve();
            });
        });
    };
    MultiSpanProcessor.prototype.onStart = function (span, context) {
        var e_2, _a;
        try {
            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var spanProcessor = _c.value;
                spanProcessor.onStart(span, context);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    MultiSpanProcessor.prototype.onEnd = function (span) {
        var e_3, _a;
        try {
            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var spanProcessor = _c.value;
                spanProcessor.onEnd(span);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    MultiSpanProcessor.prototype.shutdown = function () {
        var e_4, _a;
        var promises = [];
        try {
            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var spanProcessor = _c.value;
                promises.push(spanProcessor.shutdown());
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return new Promise(function (resolve, reject) {
            Promise.all(promises).then(function () {
                resolve();
            }, reject);
        });
    };
    return MultiSpanProcessor;
}());

//# sourceMappingURL=MultiSpanProcessor.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */
var SamplingDecision;
(function (SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */
    SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */
    SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */
    SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (SamplingDecision = {}));
//# sourceMappingURL=Sampler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Span: () => (/* binding */ Span)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/status.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/attributes.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};




/**
 * This class represents a span.
 */
var Span = /** @class */ (function () {
    /**
     * Constructs a new Span instance.
     *
     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.
     * */
    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility
    attributes) {
        if (links === void 0) { links = []; }
        this.attributes = {};
        this.links = [];
        this.events = [];
        this._droppedAttributesCount = 0;
        this._droppedEventsCount = 0;
        this._droppedLinksCount = 0;
        this.status = {
            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,
        };
        this.endTime = [0, 0];
        this._ended = false;
        this._duration = [-1, -1];
        this.name = spanName;
        this._spanContext = spanContext;
        this.parentSpanId = parentSpanId;
        this.kind = kind;
        this.links = links;
        var now = Date.now();
        this._performanceStartTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now();
        this._performanceOffset =
            now - (this._performanceStartTime + (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getTimeOrigin)());
        this._startTimeProvided = startTime != null;
        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);
        this.resource = parentTracer.resource;
        this.instrumentationLibrary = parentTracer.instrumentationLibrary;
        this._spanLimits = parentTracer.getSpanLimits();
        this._attributeValueLengthLimit =
            this._spanLimits.attributeValueLengthLimit || 0;
        if (attributes != null) {
            this.setAttributes(attributes);
        }
        this._spanProcessor = parentTracer.getActiveSpanProcessor();
        this._spanProcessor.onStart(this, context);
    }
    Span.prototype.spanContext = function () {
        return this._spanContext;
    };
    Span.prototype.setAttribute = function (key, value) {
        if (value == null || this._isSpanEnded())
            return this;
        if (key.length === 0) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Invalid attribute key: " + key);
            return this;
        }
        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isAttributeValue)(value)) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Invalid attribute value set for key: " + key);
            return this;
        }
        if (Object.keys(this.attributes).length >=
            this._spanLimits.attributeCountLimit &&
            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {
            this._droppedAttributesCount++;
            return this;
        }
        this.attributes[key] = this._truncateToSize(value);
        return this;
    };
    Span.prototype.setAttributes = function (attributes) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                this.setAttribute(k, v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    /**
     *
     * @param name Span Name
     * @param [attributesOrStartTime] Span attributes or start time
     *     if type is {@type TimeInput} and 3rd param is undefined
     * @param [timeStamp] Specified time stamp for the event
     */
    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {
        if (this._isSpanEnded())
            return this;
        if (this._spanLimits.eventCountLimit === 0) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('No events allowed.');
            this._droppedEventsCount++;
            return this;
        }
        if (this.events.length >= this._spanLimits.eventCountLimit) {
            if (this._droppedEventsCount === 0) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.debug('Dropping extra events.');
            }
            this.events.shift();
            this._droppedEventsCount++;
        }
        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(attributesOrStartTime)) {
            if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(timeStamp)) {
                timeStamp = attributesOrStartTime;
            }
            attributesOrStartTime = undefined;
        }
        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.sanitizeAttributes)(attributesOrStartTime);
        this.events.push({
            name: name,
            attributes: attributes,
            time: this._getTime(timeStamp),
            droppedAttributesCount: 0,
        });
        return this;
    };
    Span.prototype.addLink = function (link) {
        this.links.push(link);
        return this;
    };
    Span.prototype.addLinks = function (links) {
        var _a;
        (_a = this.links).push.apply(_a, __spreadArray([], __read(links), false));
        return this;
    };
    Span.prototype.setStatus = function (status) {
        if (this._isSpanEnded())
            return this;
        this.status = __assign({}, status);
        // When using try-catch, the caught "error" is of type `any`. When then assigning `any` to `status.message`,
        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()
        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or
        // undefined to avoid an incorrect type causing issues downstream.
        if (this.status.message != null && typeof status.message !== 'string') {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Dropping invalid status.message of type '" + typeof status.message + "', expected 'string'");
            delete this.status.message;
        }
        return this;
    };
    Span.prototype.updateName = function (name) {
        if (this._isSpanEnded())
            return this;
        this.name = name;
        return this;
    };
    Span.prototype.end = function (endTime) {
        if (this._isSpanEnded()) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.error(this.name + " " + this._spanContext.traceId + "-" + this._spanContext.spanId + " - You can only call end() on a span once.");
            return;
        }
        this._ended = true;
        this.endTime = this._getTime(endTime);
        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeDuration)(this.startTime, this.endTime);
        if (this._duration[0] < 0) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);
            this.endTime = this.startTime.slice();
            this._duration = [0, 0];
        }
        if (this._droppedEventsCount > 0) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Dropped " + this._droppedEventsCount + " events because eventCountLimit reached");
        }
        this._spanProcessor.onEnd(this);
    };
    Span.prototype._getTime = function (inp) {
        if (typeof inp === 'number' && inp <= _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now()) {
            // must be a performance timestamp
            // apply correction and convert to hrtime
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)(inp + this._performanceOffset);
        }
        if (typeof inp === 'number') {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp);
        }
        if (inp instanceof Date) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp.getTime());
        }
        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInputHrTime)(inp)) {
            return inp;
        }
        if (this._startTimeProvided) {
            // if user provided a time for the start manually
            // we can't use duration to calculate event/end times
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(Date.now());
        }
        var msDuration = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now() - this._performanceStartTime;
        return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.addHrTimes)(this.startTime, (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(msDuration));
    };
    Span.prototype.isRecording = function () {
        return this._ended === false;
    };
    Span.prototype.recordException = function (exception, time) {
        var attributes = {};
        if (typeof exception === 'string') {
            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE] = exception;
        }
        else if (exception) {
            if (exception.code) {
                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();
            }
            else if (exception.name) {
                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] = exception.name;
            }
            if (exception.message) {
                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE] = exception.message;
            }
            if (exception.stack) {
                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;
            }
        }
        // these are minimum requirements from spec
        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] ||
            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE]) {
            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_6__.ExceptionEventName, attributes, time);
        }
        else {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Failed to record an exception " + exception);
        }
    };
    Object.defineProperty(Span.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "ended", {
        get: function () {
            return this._ended;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedAttributesCount", {
        get: function () {
            return this._droppedAttributesCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedEventsCount", {
        get: function () {
            return this._droppedEventsCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Span.prototype, "droppedLinksCount", {
        get: function () {
            return this._droppedLinksCount;
        },
        enumerable: false,
        configurable: true
    });
    Span.prototype._isSpanEnded = function () {
        if (this._ended) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}");
        }
        return this._ended;
    };
    // Utility function to truncate given value within size
    // for value type of string, will truncate to given limit
    // for type of non-string, will return same value
    Span.prototype._truncateToLimitUtil = function (value, limit) {
        if (value.length <= limit) {
            return value;
        }
        return value.substring(0, limit);
    };
    /**
     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then
     * return string with truncated to {@code attributeValueLengthLimit} characters
     *
     * If the given attribute value is array of strings then
     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters
     *
     * Otherwise return same Attribute {@code value}
     *
     * @param value Attribute value
     * @returns truncated attribute value if required, otherwise same value
     */
    Span.prototype._truncateToSize = function (value) {
        var _this = this;
        var limit = this._attributeValueLengthLimit;
        // Check limit
        if (limit <= 0) {
            // Negative values are invalid, so do not truncate
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Attribute value limit must be positive, got " + limit);
            return value;
        }
        // String
        if (typeof value === 'string') {
            return this._truncateToLimitUtil(value, limit);
        }
        // Array of strings
        if (Array.isArray(value)) {
            return value.map(function (val) {
                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;
            });
        }
        // Other types, no need to apply value length limit
        return value;
    };
    return Span;
}());

//# sourceMappingURL=Span.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tracer: () => (/* binding */ Tracer)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/attributes.js");
/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Span */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js");
/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js");
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





/**
 * This class represents a basic tracer.
 */
var Tracer = /** @class */ (function () {
    /**
     * Constructs a new Tracer instance.
     */
    function Tracer(instrumentationLibrary, config, _tracerProvider) {
        this._tracerProvider = _tracerProvider;
        var localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_0__.mergeConfig)(config);
        this._sampler = localConfig.sampler;
        this._generalLimits = localConfig.generalLimits;
        this._spanLimits = localConfig.spanLimits;
        this._idGenerator = config.idGenerator || new _platform__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();
        this.resource = _tracerProvider.resource;
        this.instrumentationLibrary = instrumentationLibrary;
    }
    /**
     * Starts a new Span or returns the default NoopSpan based on the sampling
     * decision.
     */
    Tracer.prototype.startSpan = function (name, options, context) {
        var _a, _b, _c;
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active(); }
        // remove span from context in case a root span is requested via options
        if (options.root) {
            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.deleteSpan(context);
        }
        var parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpan(context);
        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isTracingSuppressed)(context)) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Instrumentation suppressed, returning Noop Span');
            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.INVALID_SPAN_CONTEXT);
            return nonRecordingSpan;
        }
        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();
        var spanId = this._idGenerator.generateSpanId();
        var traceId;
        var traceState;
        var parentSpanId;
        if (!parentSpanContext ||
            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.isSpanContextValid(parentSpanContext)) {
            // New root span.
            traceId = this._idGenerator.generateTraceId();
        }
        else {
            // New child span.
            traceId = parentSpanContext.traceId;
            traceState = parentSpanContext.traceState;
            parentSpanId = parentSpanContext.spanId;
        }
        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.SpanKind.INTERNAL;
        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {
            return {
                context: link.context,
                attributes: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(link.attributes),
            };
        });
        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(options.attributes);
        // make sampling decision
        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);
        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;
        var traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.RECORD_AND_SAMPLED
            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.SAMPLED
            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.NONE;
        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };
        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.NOT_RECORD) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Recording is off, propagating context in a non-recording span');
            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(spanContext);
            return nonRecordingSpan;
        }
        // Set initial span attributes. The attributes object may have been mutated
        // by the sampler, so we sanitize the merged attributes before setting them.
        var initAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(Object.assign(attributes, samplingResult.attributes));
        var span = new _Span__WEBPACK_IMPORTED_MODULE_11__.Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);
        return span;
    };
    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
            return;
        }
        else if (arguments.length === 2) {
            fn = arg2;
        }
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        }
        else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.setSpan(parentContext, span);
        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.with(contextWithSpanSet, fn, undefined, span);
    };
    /** Returns the active {@link GeneralLimits}. */
    Tracer.prototype.getGeneralLimits = function () {
        return this._generalLimits;
    };
    /** Returns the active {@link SpanLimits}. */
    Tracer.prototype.getSpanLimits = function () {
        return this._spanLimits;
    };
    Tracer.prototype.getActiveSpanProcessor = function () {
        return this._tracerProvider.getActiveSpanProcessor();
    };
    return Tracer;
}());

//# sourceMappingURL=Tracer.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildSamplerFromEnv: () => (/* binding */ buildSamplerFromEnv),
/* harmony export */   loadDefaultConfig: () => (/* binding */ loadDefaultConfig)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/sampling.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js");
/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");
/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");
/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js");
/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var FALLBACK_OTEL_TRACES_SAMPLER = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOn;
var DEFAULT_RATIO = 1;
/**
 * Load default configuration. For fields with primitive values, any user-provided
 * value will override the corresponding default value. For fields with
 * non-primitive values (like `spanLimits`), the user-provided value will be
 * used to extend the default value.
 */
// object needs to be wrapped in this function and called when needed otherwise
// envs are parsed before tests are ran - causes tests using these envs to fail
function loadDefaultConfig() {
    var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)();
    return {
        sampler: buildSamplerFromEnv(env),
        forceFlushTimeoutMillis: 30000,
        generalLimits: {
            attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
            attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,
        },
        spanLimits: {
            attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
            attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
            linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,
            eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,
            attributePerEventCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,
            attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,
        },
        mergeResourceWithDefaults: true,
    };
}
/**
 * Based on environment, builds a sampler, complies with specification.
 * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment
 */
function buildSamplerFromEnv(environment) {
    if (environment === void 0) { environment = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)(); }
    switch (environment.OTEL_TRACES_SAMPLER) {
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOn:
            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOff:
            return new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler();
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedAlwaysOn:
            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({
                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler(),
            });
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedAlwaysOff:
            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({
                root: new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler(),
            });
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.TraceIdRatio:
            return new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));
        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedTraceIdRatio:
            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({
                root: new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),
            });
        default:
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER value \"" + environment.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + FALLBACK_OTEL_TRACES_SAMPLER + "\".");
            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();
    }
}
function getSamplerProbabilityFromEnv(environment) {
    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||
        environment.OTEL_TRACES_SAMPLER_ARG === '') {
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
    }
    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);
    if (isNaN(probability)) {
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
    }
    if (probability < 0 || probability > 1) {
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
    }
    return probability;
}
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExceptionEventName: () => (/* binding */ ExceptionEventName)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Event name definitions
var ExceptionEventName = 'exception';
//# sourceMappingURL=enums.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BatchSpanProcessorBase: () => (/* binding */ BatchSpanProcessorBase)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/callback.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/ExportResult.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Implementation of the {@link SpanProcessor} that batches spans exported by
 * the SDK then pushes them to the exporter pipeline.
 */
var BatchSpanProcessorBase = /** @class */ (function () {
    function BatchSpanProcessorBase(_exporter, config) {
        this._exporter = _exporter;
        this._isExporting = false;
        this._finishedSpans = [];
        this._droppedSpansCount = 0;
        var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)();
        this._maxExportBatchSize =
            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'
                ? config.maxExportBatchSize
                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;
        this._maxQueueSize =
            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'
                ? config.maxQueueSize
                : env.OTEL_BSP_MAX_QUEUE_SIZE;
        this._scheduledDelayMillis =
            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'
                ? config.scheduledDelayMillis
                : env.OTEL_BSP_SCHEDULE_DELAY;
        this._exportTimeoutMillis =
            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'
                ? config.exportTimeoutMillis
                : env.OTEL_BSP_EXPORT_TIMEOUT;
        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.BindOnceFuture(this._shutdown, this);
        if (this._maxExportBatchSize > this._maxQueueSize) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');
            this._maxExportBatchSize = this._maxQueueSize;
        }
    }
    BatchSpanProcessorBase.prototype.forceFlush = function () {
        if (this._shutdownOnce.isCalled) {
            return this._shutdownOnce.promise;
        }
        return this._flushAll();
    };
    // does nothing.
    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };
    BatchSpanProcessorBase.prototype.onEnd = function (span) {
        if (this._shutdownOnce.isCalled) {
            return;
        }
        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.SAMPLED) === 0) {
            return;
        }
        this._addToBuffer(span);
    };
    BatchSpanProcessorBase.prototype.shutdown = function () {
        return this._shutdownOnce.call();
    };
    BatchSpanProcessorBase.prototype._shutdown = function () {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            return _this.onShutdown();
        })
            .then(function () {
            return _this._flushAll();
        })
            .then(function () {
            return _this._exporter.shutdown();
        });
    };
    /** Add a span in the buffer. */
    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {
        if (this._finishedSpans.length >= this._maxQueueSize) {
            // limit reached, drop span
            if (this._droppedSpansCount === 0) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('maxQueueSize reached, dropping spans');
            }
            this._droppedSpansCount++;
            return;
        }
        if (this._droppedSpansCount > 0) {
            // some spans were dropped, log once with count of spans dropped
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn("Dropped " + this._droppedSpansCount + " spans because maxQueueSize reached");
            this._droppedSpansCount = 0;
        }
        this._finishedSpans.push(span);
        this._maybeStartTimer();
    };
    /**
     * Send all spans to the exporter respecting the batch size limit
     * This function is used only on forceFlush or shutdown,
     * for all other cases _flush should be used
     * */
    BatchSpanProcessorBase.prototype._flushAll = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var promises = [];
            // calculate number of batches
            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);
            for (var i = 0, j = count; i < j; i++) {
                promises.push(_this._flushOneBatch());
            }
            Promise.all(promises)
                .then(function () {
                resolve();
            })
                .catch(reject);
        });
    };
    BatchSpanProcessorBase.prototype._flushOneBatch = function () {
        var _this = this;
        this._clearTimer();
        if (this._finishedSpans.length === 0) {
            return Promise.resolve();
        }
        return new Promise(function (resolve, reject) {
            var timer = setTimeout(function () {
                // don't wait anymore for export, this way the next batch can start
                reject(new Error('Timeout'));
            }, _this._exportTimeoutMillis);
            // prevent downstream exporter calls from generating spans
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.with((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.active()), function () {
                // Reset the finished spans buffer here because the next invocations of the _flush method
                // could pass the same finished spans to the exporter if the buffer is cleared
                // outside the execution of this callback.
                var spans;
                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {
                    spans = _this._finishedSpans;
                    _this._finishedSpans = [];
                }
                else {
                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);
                }
                var doExport = function () {
                    return _this._exporter.export(spans, function (result) {
                        var _a;
                        clearTimeout(timer);
                        if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode.SUCCESS) {
                            resolve();
                        }
                        else {
                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));
                        }
                    });
                };
                var pendingResources = null;
                for (var i = 0, len = spans.length; i < len; i++) {
                    var span = spans[i];
                    if (span.resource.asyncAttributesPending &&
                        span.resource.waitForAsyncAttributes) {
                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);
                        pendingResources.push(span.resource.waitForAsyncAttributes());
                    }
                }
                // Avoid scheduling a promise to make the behavior more predictable and easier to test
                if (pendingResources === null) {
                    doExport();
                }
                else {
                    Promise.all(pendingResources).then(doExport, function (err) {
                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(err);
                        reject(err);
                    });
                }
            });
        });
    };
    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {
        var _this = this;
        if (this._isExporting)
            return;
        var flush = function () {
            _this._isExporting = true;
            _this._flushOneBatch()
                .finally(function () {
                _this._isExporting = false;
                if (_this._finishedSpans.length > 0) {
                    _this._clearTimer();
                    _this._maybeStartTimer();
                }
            })
                .catch(function (e) {
                _this._isExporting = false;
                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(e);
            });
        };
        // we only wait if the queue doesn't have enough elements yet
        if (this._finishedSpans.length >= this._maxExportBatchSize) {
            return flush();
        }
        if (this._timer !== undefined)
            return;
        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);
        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.unrefTimer)(this._timer);
    };
    BatchSpanProcessorBase.prototype._clearTimer = function () {
        if (this._timer !== undefined) {
            clearTimeout(this._timer);
            this._timer = undefined;
        }
    };
    return BatchSpanProcessorBase;
}());

//# sourceMappingURL=BatchSpanProcessorBase.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoopSpanProcessor: () => (/* binding */ NoopSpanProcessor)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** No-op implementation of SpanProcessor */
var NoopSpanProcessor = /** @class */ (function () {
    function NoopSpanProcessor() {
    }
    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };
    NoopSpanProcessor.prototype.onEnd = function (_span) { };
    NoopSpanProcessor.prototype.shutdown = function () {
        return Promise.resolve();
    };
    NoopSpanProcessor.prototype.forceFlush = function () {
        return Promise.resolve();
    };
    return NoopSpanProcessor;
}());

//# sourceMappingURL=NoopSpanProcessor.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SPAN_ID_BYTES = 8;
var TRACE_ID_BYTES = 16;
var RandomIdGenerator = /** @class */ (function () {
    function RandomIdGenerator() {
        /**
         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex
         * characters corresponding to 128 bits.
         */
        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);
        /**
         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex
         * characters corresponding to 64 bits.
         */
        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);
    }
    return RandomIdGenerator;
}());

var SHARED_CHAR_CODES_ARRAY = Array(32);
function getIdGenerator(bytes) {
    return function generateId() {
        for (var i = 0; i < bytes * 2; i++) {
            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;
            // valid hex characters in the range 48-57 and 97-102
            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {
                SHARED_CHAR_CODES_ARRAY[i] += 39;
            }
        }
        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));
    };
}
//# sourceMappingURL=RandomIdGenerator.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BatchSpanProcessor: () => (/* binding */ BatchSpanProcessor)
/* harmony export */ });
/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BatchSpanProcessor = /** @class */ (function (_super) {
    __extends(BatchSpanProcessor, _super);
    function BatchSpanProcessor(_exporter, config) {
        var _this = _super.call(this, _exporter, config) || this;
        _this.onInit(config);
        return _this;
    }
    BatchSpanProcessor.prototype.onInit = function (config) {
        var _this = this;
        if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true &&
            typeof document !== 'undefined') {
            this._visibilityChangeListener = function () {
                if (document.visibilityState === 'hidden') {
                    _this.forceFlush().catch(function (error) {
                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error);
                    });
                }
            };
            this._pageHideListener = function () {
                _this.forceFlush().catch(function (error) {
                    (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error);
                });
            };
            document.addEventListener('visibilitychange', this._visibilityChangeListener);
            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769
            document.addEventListener('pagehide', this._pageHideListener);
        }
    };
    BatchSpanProcessor.prototype.onShutdown = function () {
        if (typeof document !== 'undefined') {
            if (this._visibilityChangeListener) {
                document.removeEventListener('visibilitychange', this._visibilityChangeListener);
            }
            if (this._pageHideListener) {
                document.removeEventListener('pagehide', this._pageHideListener);
            }
        }
    };
    return BatchSpanProcessor;
}(_export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_1__.BatchSpanProcessorBase));

//# sourceMappingURL=BatchSpanProcessor.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)
/* harmony export */ });
/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sampler that samples no traces. */
var AlwaysOffSampler = /** @class */ (function () {
    function AlwaysOffSampler() {
    }
    AlwaysOffSampler.prototype.shouldSample = function () {
        return {
            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,
        };
    };
    AlwaysOffSampler.prototype.toString = function () {
        return 'AlwaysOffSampler';
    };
    return AlwaysOffSampler;
}());

//# sourceMappingURL=AlwaysOffSampler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)
/* harmony export */ });
/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Sampler that samples all traces. */
var AlwaysOnSampler = /** @class */ (function () {
    function AlwaysOnSampler() {
    }
    AlwaysOnSampler.prototype.shouldSample = function () {
        return {
            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,
        };
    };
    AlwaysOnSampler.prototype.toString = function () {
        return 'AlwaysOnSampler';
    };
    return AlwaysOnSampler;
}());

//# sourceMappingURL=AlwaysOnSampler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");
/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");
/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/**
 * A composite sampler that either respects the parent span's sampling decision
 * or delegates to `delegateSampler` for root spans.
 */
var ParentBasedSampler = /** @class */ (function () {
    function ParentBasedSampler(config) {
        var _a, _b, _c, _d;
        this._root = config.root;
        if (!this._root) {
            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));
            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();
        }
        this._remoteParentSampled =
            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();
        this._remoteParentNotSampled =
            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();
        this._localParentSampled =
            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();
        this._localParentNotSampled =
            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();
    }
    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {
        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);
        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {
            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.isRemote) {
            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {
                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
            }
            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {
            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
        }
        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);
    };
    ParentBasedSampler.prototype.toString = function () {
        return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";
    };
    return ParentBasedSampler;
}());

//# sourceMappingURL=ParentBasedSampler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Sampler */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/** Sampler that samples a given fraction of traces based of trace id deterministically. */
var TraceIdRatioBasedSampler = /** @class */ (function () {
    function TraceIdRatioBasedSampler(_ratio) {
        if (_ratio === void 0) { _ratio = 0; }
        this._ratio = _ratio;
        this._ratio = this._normalize(_ratio);
        this._upperBound = Math.floor(this._ratio * 0xffffffff);
    }
    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {
        return {
            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound
                ? _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED
                : _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,
        };
    };
    TraceIdRatioBasedSampler.prototype.toString = function () {
        return "TraceIdRatioBased{" + this._ratio + "}";
    };
    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {
        if (typeof ratio !== 'number' || isNaN(ratio))
            return 0;
        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;
    };
    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {
        var accumulation = 0;
        for (var i = 0; i < traceId.length / 8; i++) {
            var pos = i * 8;
            var part = parseInt(traceId.slice(pos, pos + 8), 16);
            accumulation = (accumulation ^ part) >>> 0;
        }
        return accumulation;
    };
    return TraceIdRatioBasedSampler;
}());

//# sourceMappingURL=TraceIdRatioBasedSampler.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeConfig: () => (/* binding */ mergeConfig),
/* harmony export */   reconfigureLimits: () => (/* binding */ reconfigureLimits)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/environment.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Function to merge Default configuration (as specified in './config') with
 * user provided configurations.
 */
function mergeConfig(userConfig) {
    var perInstanceDefaults = {
        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_0__.buildSamplerFromEnv)(),
    };
    var DEFAULT_CONFIG = (0,_config__WEBPACK_IMPORTED_MODULE_0__.loadDefaultConfig)();
    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);
    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});
    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});
    return target;
}
/**
 * When general limits are provided and model specific limits are not,
 * configures the model specific limits by using the values from the general ones.
 * @param userConfig User provided tracer configuration
 */
function reconfigureLimits(userConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var spanLimits = Object.assign({}, userConfig.spanLimits);
    var parsedEnvConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnvWithoutDefaults)();
    /**
     * Reassign span attribute count limit to use first non null value defined by user or use default value
     */
    spanLimits.attributeCountLimit =
        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ATTRIBUTE_COUNT_LIMIT;
    /**
     * Reassign span attribute value length limit to use first non null value defined by user or use default value
     */
    spanLimits.attributeValueLengthLimit =
        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;
    return Object.assign({}, userConfig, { spanLimits: spanLimits });
}
//# sourceMappingURL=utility.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StackContextManager: () => (/* binding */ StackContextManager)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

/**
 * Stack Context Manager for managing the state in web
 * it doesn't fully support the async calls though
 */
var StackContextManager = /** @class */ (function () {
    function StackContextManager() {
        /**
         * whether the context manager is enabled or not
         */
        this._enabled = false;
        /**
         * Keeps the reference to current context
         */
        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;
    }
    /**
     *
     * @param context
     * @param target Function to be executed within the context
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    StackContextManager.prototype._bindFunction = function (context, target) {
        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT; }
        var manager = this;
        var contextWrapper = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return manager.with(context, function () { return target.apply(_this, args); });
        };
        Object.defineProperty(contextWrapper, 'length', {
            enumerable: false,
            configurable: true,
            writable: false,
            value: target.length,
        });
        return contextWrapper;
    };
    /**
     * Returns the active context
     */
    StackContextManager.prototype.active = function () {
        return this._currentContext;
    };
    /**
     * Binds a the certain context or the active one to the target function and then returns the target
     * @param context A context (span) to be bind to target
     * @param target a function or event emitter. When target or one of its callbacks is called,
     *  the provided context will be used as the active context for the duration of the call.
     */
    StackContextManager.prototype.bind = function (context, target) {
        // if no specific context to propagate is given, we use the current one
        if (context === undefined) {
            context = this.active();
        }
        if (typeof target === 'function') {
            return this._bindFunction(context, target);
        }
        return target;
    };
    /**
     * Disable the context manager (clears the current context)
     */
    StackContextManager.prototype.disable = function () {
        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;
        this._enabled = false;
        return this;
    };
    /**
     * Enables the context manager and creates a default(root) context
     */
    StackContextManager.prototype.enable = function () {
        if (this._enabled) {
            return this;
        }
        this._enabled = true;
        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;
        return this;
    };
    /**
     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.
     * The context will be set as active
     * @param context
     * @param fn Callback function
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */
    StackContextManager.prototype.with = function (context, fn, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var previousContext = this._currentContext;
        this._currentContext = context || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;
        try {
            return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));
        }
        finally {
            this._currentContext = previousContext;
        }
    };
    return StackContextManager;
}());

//# sourceMappingURL=StackContextManager.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebTracerProvider: () => (/* binding */ WebTracerProvider)
/* harmony export */ });
/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js");
/* harmony import */ var _StackContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StackContextManager */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * This class represents a web tracer with {@link StackContextManager}
 */
var WebTracerProvider = /** @class */ (function (_super) {
    __extends(WebTracerProvider, _super);
    /**
     * Constructs a new Tracer instance.
     * @param config Web Tracer config
     */
    function WebTracerProvider(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        if (config.contextManager) {
            throw ('contextManager should be defined in register method not in' +
                ' constructor');
        }
        if (config.propagator) {
            throw 'propagator should be defined in register method not in constructor';
        }
        return _this;
    }
    /**
     * Register this TracerProvider for use with the OpenTelemetry API.
     * Undefined values may be replaced with defaults, and
     * null values will be skipped.
     *
     * @param config Configuration object for SDK registration
     */
    WebTracerProvider.prototype.register = function (config) {
        if (config === void 0) { config = {}; }
        if (config.contextManager === undefined) {
            config.contextManager = new _StackContextManager__WEBPACK_IMPORTED_MODULE_0__.StackContextManager();
        }
        if (config.contextManager) {
            config.contextManager.enable();
        }
        _super.prototype.register.call(this, config);
    };
    return WebTracerProvider;
}(_opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_1__.BasicTracerProvider));

//# sourceMappingURL=WebTracerProvider.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerformanceTimingNames: () => (/* binding */ PerformanceTimingNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
(function (PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (PerformanceTimingNames = {}));
//# sourceMappingURL=PerformanceTimingNames.js.map

/***/ }),

/***/ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanNetworkEvent: () => (/* binding */ addSpanNetworkEvent),
/* harmony export */   addSpanNetworkEvents: () => (/* binding */ addSpanNetworkEvents),
/* harmony export */   getElementXPath: () => (/* binding */ getElementXPath),
/* harmony export */   getResource: () => (/* binding */ getResource),
/* harmony export */   hasKey: () => (/* binding */ hasKey),
/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),
/* harmony export */   parseUrl: () => (/* binding */ parseUrl),
/* harmony export */   shouldPropagateTraceHeaders: () => (/* binding */ shouldPropagateTraceHeaders),
/* harmony export */   sortResources: () => (/* binding */ sortResources)
/* harmony export */ });
/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@honeycombio/opentelemetry-web/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Used to normalize relative URLs
var urlNormalizingAnchor;
function getUrlNormalizingAnchor() {
    if (!urlNormalizingAnchor) {
        urlNormalizingAnchor = document.createElement('a');
    }
    return urlNormalizingAnchor;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasKey(obj, key) {
    return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 * @param refPerfName name of performance entry to use for reference
 */
function addSpanNetworkEvent(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if (hasKey(entries, performanceName) &&
        typeof entries[performanceName] === 'number') {
        perfTime = entries[performanceName];
    }
    var refName = refPerfName || _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if (hasKey(entries, refName) && typeof entries[refName] === 'number') {
        refTime = entries[refName];
    }
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
/**
 * Helper function for adding network events and content length attributes
 * @param span
 * @param resource
 * @param ignoreNetworkEvents
 */
function addSpanNetworkEvents(span, resource, ignoreNetworkEvents) {
    if (ignoreNetworkEvents === void 0) { ignoreNetworkEvents = false; }
    if (!ignoreNetworkEvents) {
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);
        if (hasKey(resource, 'name') &&
            resource['name'].startsWith('https:')) {
            addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
        }
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);
    }
    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
    }
    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
    }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */
function sortResources(filteredResources) {
    return filteredResources.slice().sort(function (a, b) {
        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        if (valueA > valueB) {
            return 1;
        }
        else if (valueA < valueB) {
            return -1;
        }
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */
function getOrigin() {
    return typeof location !== 'undefined' ? location.origin : undefined;
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */
function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = parseUrl(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) {
        return {
            mainRequest: undefined,
        };
    }
    if (filteredResources.length === 1) {
        return {
            mainRequest: filteredResources[0],
        };
    }
    var sorted = sortResources(filteredResources);
    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];
        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest,
        };
    }
    else {
        return {
            mainRequest: filteredResources[0],
        };
    }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */
function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(spanEndTimeHR);
    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for (var i = 1; i < length; i++) {
        var resource = resources[i];
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */
function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(startTimeHR);
    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(endTimeHR);
    var filteredResources = resources.filter(function (resource) {
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        return (resource.initiatorType.toLowerCase() ===
            (initiatorType || 'xmlhttprequest') &&
            resource.name === spanUrl &&
            resourceStartTime >= startTime &&
            resourceEndTime <= endTime);
    });
    if (filteredResources.length > 0) {
        filteredResources = filteredResources.filter(function (resource) {
            return !ignoredResources.has(resource);
        });
    }
    return filteredResources;
}
/**
 * Parses url using URL constructor or fallback to anchor element.
 * @param url
 */
function parseUrl(url) {
    if (typeof URL === 'function') {
        return new URL(url, typeof document !== 'undefined'
            ? document.baseURI
            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this
                ? location.href
                : undefined);
    }
    var element = getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
/**
 * Parses url using URL constructor or fallback to anchor element and serialize
 * it to a string.
 *
 * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url
 *
 * @param url
 */
function normalizeUrl(url) {
    var urlLike = parseUrl(url);
    return urlLike.href;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function getElementXPath(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) {
        return '/';
    }
    var targetValue = getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf('@id') > 0) {
        return targetValue;
    }
    var xpath = '';
    if (target.parentNode) {
        xpath += getElementXPath(target.parentNode, false);
    }
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */
function getNodeIndex(target) {
    if (!target.parentNode) {
        return 0;
    }
    var allowedTypes = [target.nodeType];
    if (target.nodeType === Node.CDATA_SECTION_NODE) {
        allowedTypes.push(Node.TEXT_NODE);
    }
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function (element) {
        var localName = element.localName;
        return (allowedTypes.indexOf(element.nodeType) >= 0 &&
            localName === target.localName);
    });
    if (elements.length >= 1) {
        return elements.indexOf(target) + 1; // xpath starts from 1
    }
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */
function getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = getNodeIndex(target);
    var nodeValue = '';
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute('id');
        if (optimised && id) {
            return "//*[@id=\"" + id + "\"]";
        }
        nodeValue = target.localName;
    }
    else if (nodeType === Node.TEXT_NODE ||
        nodeType === Node.CDATA_SECTION_NODE) {
        nodeValue = 'text()';
    }
    else if (nodeType === Node.COMMENT_NODE) {
        nodeValue = 'comment()';
    }
    else {
        return '';
    }
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) {
        return "/" + nodeValue + "[" + index + "]";
    }
    return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */
function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === 'string' ||
        propagateTraceHeaderUrls instanceof RegExp) {
        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
    }
    var parsedSpanUrl = parseUrl(spanUrl);
    if (parsedSpanUrl.origin === getOrigin()) {
        return true;
    }
    else {
        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.urlMatches)(spanUrl, propagateTraceHeaderUrl);
        });
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NOOP_LOGGER: () => (/* binding */ NOOP_LOGGER),
/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NoopLogger = /** @class */ (function () {
    function NoopLogger() {
    }
    NoopLogger.prototype.emit = function (_logRecord) { };
    return NoopLogger;
}());

var NOOP_LOGGER = new NoopLogger();
//# sourceMappingURL=NoopLogger.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NOOP_LOGGER_PROVIDER: () => (/* binding */ NOOP_LOGGER_PROVIDER),
/* harmony export */   NoopLoggerProvider: () => (/* binding */ NoopLoggerProvider)
/* harmony export */ });
/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopLogger */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NoopLoggerProvider = /** @class */ (function () {
    function NoopLoggerProvider() {
    }
    NoopLoggerProvider.prototype.getLogger = function (_name, _version, _options) {
        return new _NoopLogger__WEBPACK_IMPORTED_MODULE_0__.NoopLogger();
    };
    return NoopLoggerProvider;
}());

var NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();
//# sourceMappingURL=NoopLoggerProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProxyLogger: () => (/* binding */ ProxyLogger)
/* harmony export */ });
/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopLogger */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ProxyLogger = /** @class */ (function () {
    function ProxyLogger(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    /**
     * Emit a log record. This method should only be used by log appenders.
     *
     * @param logRecord
     */
    ProxyLogger.prototype.emit = function (logRecord) {
        this._getLogger().emit(logRecord);
    };
    /**
     * Try to get a logger from the proxy logger provider.
     * If the proxy logger provider has no delegate, return a noop logger.
     */
    ProxyLogger.prototype._getLogger = function () {
        if (this._delegate) {
            return this._delegate;
        }
        var logger = this._provider.getDelegateLogger(this.name, this.version, this.options);
        if (!logger) {
            return _NoopLogger__WEBPACK_IMPORTED_MODULE_0__.NOOP_LOGGER;
        }
        this._delegate = logger;
        return this._delegate;
    };
    return ProxyLogger;
}());

//# sourceMappingURL=ProxyLogger.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProxyLoggerProvider: () => (/* binding */ ProxyLoggerProvider)
/* harmony export */ });
/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopLoggerProvider */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js");
/* harmony import */ var _ProxyLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProxyLogger */ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ProxyLoggerProvider = /** @class */ (function () {
    function ProxyLoggerProvider() {
    }
    ProxyLoggerProvider.prototype.getLogger = function (name, version, options) {
        var _a;
        return ((_a = this.getDelegateLogger(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyLogger__WEBPACK_IMPORTED_MODULE_0__.ProxyLogger(this, name, version, options));
    };
    ProxyLoggerProvider.prototype.getDelegate = function () {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_1__.NOOP_LOGGER_PROVIDER;
    };
    /**
     * Set the delegate logger provider
     */
    ProxyLoggerProvider.prototype.setDelegate = function (delegate) {
        this._delegate = delegate;
    };
    ProxyLoggerProvider.prototype.getDelegateLogger = function (name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getLogger(name, version, options);
    };
    return ProxyLoggerProvider;
}());

//# sourceMappingURL=ProxyLoggerProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LogsAPI: () => (/* binding */ LogsAPI)
/* harmony export */ });
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js");
/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../NoopLoggerProvider */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js");
/* harmony import */ var _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ProxyLoggerProvider */ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var LogsAPI = /** @class */ (function () {
    function LogsAPI() {
        this._proxyLoggerProvider = new _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyLoggerProvider();
    }
    LogsAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new LogsAPI();
        }
        return this._instance;
    };
    LogsAPI.prototype.setGlobalLoggerProvider = function (provider) {
        if (_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY]) {
            return this.getLoggerProvider();
        }
        _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY] = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.makeGetter)(_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION, provider, _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_LOGGER_PROVIDER);
        this._proxyLoggerProvider.setDelegate(provider);
        return provider;
    };
    /**
     * Returns the global logger provider.
     *
     * @returns LoggerProvider
     */
    LogsAPI.prototype.getLoggerProvider = function () {
        var _a, _b;
        return ((_b = (_a = _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global, _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : this._proxyLoggerProvider);
    };
    /**
     * Returns a logger from the global logger provider.
     *
     * @returns Logger
     */
    LogsAPI.prototype.getLogger = function (name, version, options) {
        return this.getLoggerProvider().getLogger(name, version, options);
    };
    /** Remove the global logger provider */
    LogsAPI.prototype.disable = function () {
        delete _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_LOGS_API_KEY];
        this._proxyLoggerProvider = new _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyLoggerProvider();
    };
    return LogsAPI;
}());

//# sourceMappingURL=logs.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NOOP_LOGGER: () => (/* reexport safe */ _NoopLogger__WEBPACK_IMPORTED_MODULE_1__.NOOP_LOGGER),
/* harmony export */   NOOP_LOGGER_PROVIDER: () => (/* reexport safe */ _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_LOGGER_PROVIDER),
/* harmony export */   NoopLogger: () => (/* reexport safe */ _NoopLogger__WEBPACK_IMPORTED_MODULE_1__.NoopLogger),
/* harmony export */   NoopLoggerProvider: () => (/* reexport safe */ _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__.NoopLoggerProvider),
/* harmony export */   ProxyLogger: () => (/* reexport safe */ _ProxyLogger__WEBPACK_IMPORTED_MODULE_3__.ProxyLogger),
/* harmony export */   ProxyLoggerProvider: () => (/* reexport safe */ _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_4__.ProxyLoggerProvider),
/* harmony export */   SeverityNumber: () => (/* reexport safe */ _types_LogRecord__WEBPACK_IMPORTED_MODULE_0__.SeverityNumber),
/* harmony export */   logs: () => (/* binding */ logs)
/* harmony export */ });
/* harmony import */ var _types_LogRecord__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/LogRecord */ "./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js");
/* harmony import */ var _NoopLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopLogger */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js");
/* harmony import */ var _NoopLoggerProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NoopLoggerProvider */ "./node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js");
/* harmony import */ var _ProxyLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ProxyLogger */ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLogger.js");
/* harmony import */ var _ProxyLoggerProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ProxyLoggerProvider */ "./node_modules/@opentelemetry/api-logs/build/esm/ProxyLoggerProvider.js");
/* harmony import */ var _api_logs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/logs */ "./node_modules/@opentelemetry/api-logs/build/esm/api/logs.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var logs = _api_logs__WEBPACK_IMPORTED_MODULE_5__.LogsAPI.getInstance();
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   API_BACKWARDS_COMPATIBILITY_VERSION: () => (/* binding */ API_BACKWARDS_COMPATIBILITY_VERSION),
/* harmony export */   GLOBAL_LOGS_API_KEY: () => (/* binding */ GLOBAL_LOGS_API_KEY),
/* harmony export */   _global: () => (/* binding */ _global),
/* harmony export */   makeGetter: () => (/* binding */ makeGetter)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/api-logs/build/esm/platform/browser/globalThis.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');
var _global = _platform__WEBPACK_IMPORTED_MODULE_0__._globalThis;
/**
 * Make a function which accepts a version integer and returns the instance of an API if the version
 * is compatible, or a fallback version (usually NOOP) if it is not.
 *
 * @param requiredVersion Backwards compatibility version which is required to return the instance
 * @param instance Instance which should be returned if the required version is compatible
 * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible
 */
function makeGetter(requiredVersion, instance, fallback) {
    return function (version) {
        return version === requiredVersion ? instance : fallback;
    };
}
/**
 * A number which should be incremented each time a backwards incompatible
 * change is made to the API. This number is used when an API package
 * attempts to access the global API to ensure it is getting a compatible
 * version. If the global API is not compatible with the API package
 * attempting to get it, a NOOP API implementation will be returned.
 */
var API_BACKWARDS_COMPATIBILITY_VERSION = 1;
//# sourceMappingURL=global-utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/platform/browser/globalThis.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/platform/browser/globalThis.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _globalThis: () => (/* binding */ _globalThis)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Updates to this file should also be replicated to @opentelemetry/api and
// @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = typeof globalThis === 'object'
    ? globalThis
    : typeof self === 'object'
        ? self
        : typeof window === 'object'
            ? window
            : typeof __webpack_require__.g === 'object'
                ? __webpack_require__.g
                : {};
//# sourceMappingURL=globalThis.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-logs/build/esm/types/LogRecord.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SeverityNumber: () => (/* binding */ SeverityNumber)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SeverityNumber;
(function (SeverityNumber) {
    SeverityNumber[SeverityNumber["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    SeverityNumber[SeverityNumber["TRACE"] = 1] = "TRACE";
    SeverityNumber[SeverityNumber["TRACE2"] = 2] = "TRACE2";
    SeverityNumber[SeverityNumber["TRACE3"] = 3] = "TRACE3";
    SeverityNumber[SeverityNumber["TRACE4"] = 4] = "TRACE4";
    SeverityNumber[SeverityNumber["DEBUG"] = 5] = "DEBUG";
    SeverityNumber[SeverityNumber["DEBUG2"] = 6] = "DEBUG2";
    SeverityNumber[SeverityNumber["DEBUG3"] = 7] = "DEBUG3";
    SeverityNumber[SeverityNumber["DEBUG4"] = 8] = "DEBUG4";
    SeverityNumber[SeverityNumber["INFO"] = 9] = "INFO";
    SeverityNumber[SeverityNumber["INFO2"] = 10] = "INFO2";
    SeverityNumber[SeverityNumber["INFO3"] = 11] = "INFO3";
    SeverityNumber[SeverityNumber["INFO4"] = 12] = "INFO4";
    SeverityNumber[SeverityNumber["WARN"] = 13] = "WARN";
    SeverityNumber[SeverityNumber["WARN2"] = 14] = "WARN2";
    SeverityNumber[SeverityNumber["WARN3"] = 15] = "WARN3";
    SeverityNumber[SeverityNumber["WARN4"] = 16] = "WARN4";
    SeverityNumber[SeverityNumber["ERROR"] = 17] = "ERROR";
    SeverityNumber[SeverityNumber["ERROR2"] = 18] = "ERROR2";
    SeverityNumber[SeverityNumber["ERROR3"] = 19] = "ERROR3";
    SeverityNumber[SeverityNumber["ERROR4"] = 20] = "ERROR4";
    SeverityNumber[SeverityNumber["FATAL"] = 21] = "FATAL";
    SeverityNumber[SeverityNumber["FATAL2"] = 22] = "FATAL2";
    SeverityNumber[SeverityNumber["FATAL3"] = 23] = "FATAL3";
    SeverityNumber[SeverityNumber["FATAL4"] = 24] = "FATAL4";
})(SeverityNumber || (SeverityNumber = {}));
//# sourceMappingURL=LogRecord.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/context.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextAPI: () => (/* binding */ ContextAPI)
/* harmony export */ });
/* harmony import */ var _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/NoopContextManager */ "./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js");
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};



var API_NAME = 'context';
var NOOP_CONTEXT_MANAGER = new _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */
var ContextAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function ContextAPI() {
    }
    /** Get the singleton instance of the Context API */
    ContextAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new ContextAPI();
        }
        return this._instance;
    };
    /**
     * Set the current context manager.
     *
     * @returns true if the context manager was successfully registered, else false
     */
    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.registerGlobal)(API_NAME, contextManager, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());
    };
    /**
     * Get the currently active context
     */
    ContextAPI.prototype.active = function () {
        return this._getContextManager().active();
    };
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     * @param thisArg optional receiver to be used for calling fn
     * @param args optional arguments forwarded to fn
     */
    ContextAPI.prototype.with = function (context, fn, thisArg) {
        var _a;
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));
    };
    /**
     * Bind a context to a target function or event emitter
     *
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     * @param target function or event emitter to bind
     */
    ContextAPI.prototype.bind = function (context, target) {
        return this._getContextManager().bind(context, target);
    };
    ContextAPI.prototype._getContextManager = function () {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;
    };
    /** Disable and remove the global context manager */
    ContextAPI.prototype.disable = function () {
        this._getContextManager().disable();
        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());
    };
    return ContextAPI;
}());

//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/diag.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/diag.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiagAPI: () => (/* binding */ DiagAPI)
/* harmony export */ });
/* harmony import */ var _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../diag/ComponentLogger */ "./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js");
/* harmony import */ var _diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag/internal/logLevelLogger */ "./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js");
/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../diag/types */ "./node_modules/@opentelemetry/api/build/esm/diag/types.js");
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};




var API_NAME = 'diag';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */
var DiagAPI = /** @class */ (function () {
    /**
     * Private internal constructor
     * @private
     */
    function DiagAPI() {
        function _logProxy(funcName) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');
                // shortcut if logger not set
                if (!logger)
                    return;
                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));
            };
        }
        // Using self local variable for minification purposes as 'this' cannot be minified
        var self = this;
        // DiagAPI specific functions
        var setLogger = function (logger, optionsOrLogLevel) {
            var _a, _b, _c;
            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO }; }
            if (logger === self) {
                // There isn't much we can do here.
                // Logging to the console might break the user application.
                // Try to log to self. If a logger was previously registered it will receive the log.
                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
                return false;
            }
            if (typeof optionsOrLogLevel === 'number') {
                optionsOrLogLevel = {
                    logLevel: optionsOrLogLevel,
                };
            }
            var oldLogger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');
            var newLogger = (0,_diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__.createLogLevelDiagLogger)((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO, logger);
            // There already is an logger registered. We'll let it know before overwriting it.
            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {
                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';
                oldLogger.warn("Current logger will be overwritten from " + stack);
                newLogger.warn("Current logger will overwrite one already registered from " + stack);
            }
            return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)('diag', newLogger, self, true);
        };
        self.setLogger = setLogger;
        self.disable = function () {
            (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, self);
        };
        self.createComponentLogger = function (options) {
            return new _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__.DiagComponentLogger(options);
        };
        self.verbose = _logProxy('verbose');
        self.debug = _logProxy('debug');
        self.info = _logProxy('info');
        self.warn = _logProxy('warn');
        self.error = _logProxy('error');
    }
    /** Get the singleton instance of the DiagAPI API */
    DiagAPI.instance = function () {
        if (!this._instance) {
            this._instance = new DiagAPI();
        }
        return this._instance;
    };
    return DiagAPI;
}());

//# sourceMappingURL=diag.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MetricsAPI: () => (/* binding */ MetricsAPI)
/* harmony export */ });
/* harmony import */ var _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metrics/NoopMeterProvider */ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js");
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var API_NAME = 'metrics';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */
var MetricsAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function MetricsAPI() {
    }
    /** Get the singleton instance of the Metrics API */
    MetricsAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new MetricsAPI();
        }
        return this._instance;
    };
    /**
     * Set the current global meter provider.
     * Returns true if the meter provider was successfully registered, else false.
     */
    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)(API_NAME, provider, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());
    };
    /**
     * Returns the global meter provider.
     */
    MetricsAPI.prototype.getMeterProvider = function () {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(API_NAME) || _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_METER_PROVIDER;
    };
    /**
     * Returns a meter from the global meter provider.
     */
    MetricsAPI.prototype.getMeter = function (name, version, options) {
        return this.getMeterProvider().getMeter(name, version, options);
    };
    /** Remove the global meter provider */
    MetricsAPI.prototype.disable = function () {
        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());
    };
    return MetricsAPI;
}());

//# sourceMappingURL=metrics.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/propagation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PropagationAPI: () => (/* binding */ PropagationAPI)
/* harmony export */ });
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/* harmony import */ var _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../propagation/NoopTextMapPropagator */ "./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js");
/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../propagation/TextMapPropagator */ "./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js");
/* harmony import */ var _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../baggage/context-helpers */ "./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js");
/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../baggage/utils */ "./node_modules/@opentelemetry/api/build/esm/baggage/utils.js");
/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






var API_NAME = 'propagation';
var NOOP_TEXT_MAP_PROPAGATOR = new _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__.NoopTextMapPropagator();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */
var PropagationAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function PropagationAPI() {
        this.createBaggage = _baggage_utils__WEBPACK_IMPORTED_MODULE_1__.createBaggage;
        this.getBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getBaggage;
        this.getActiveBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getActiveBaggage;
        this.setBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.setBaggage;
        this.deleteBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.deleteBaggage;
    }
    /** Get the singleton instance of the Propagator API */
    PropagationAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new PropagationAPI();
        }
        return this._instance;
    };
    /**
     * Set the current propagator.
     *
     * @returns true if the propagator was successfully registered, else false
     */
    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, propagator, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());
    };
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param context Context carrying tracing data to inject
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     */
    PropagationAPI.prototype.inject = function (context, carrier, setter) {
        if (setter === void 0) { setter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapSetter; }
        return this._getGlobalPropagator().inject(context, carrier, setter);
    };
    /**
     * Extract context from a carrier
     *
     * @param context Context which the newly created context will inherit from
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     */
    PropagationAPI.prototype.extract = function (context, carrier, getter) {
        if (getter === void 0) { getter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapGetter; }
        return this._getGlobalPropagator().extract(context, carrier, getter);
    };
    /**
     * Return a list of all fields which may be used by the propagator.
     */
    PropagationAPI.prototype.fields = function () {
        return this._getGlobalPropagator().fields();
    };
    /** Remove the global propagator */
    PropagationAPI.prototype.disable = function () {
        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());
    };
    PropagationAPI.prototype._getGlobalPropagator = function () {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;
    };
    return PropagationAPI;
}());

//# sourceMappingURL=propagation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/trace.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceAPI: () => (/* binding */ TraceAPI)
/* harmony export */ });
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trace/ProxyTracerProvider */ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js");
/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/spancontext-utils */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ "./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js");
/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var API_NAME = 'trace';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */
var TraceAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function TraceAPI() {
        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();
        this.wrapSpanContext = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.wrapSpanContext;
        this.isSpanContextValid = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.isSpanContextValid;
        this.deleteSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.deleteSpan;
        this.getSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpan;
        this.getActiveSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan;
        this.getSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext;
        this.setSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan;
        this.setSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpanContext;
    }
    /** Get the singleton instance of the Trace API */
    TraceAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new TraceAPI();
        }
        return this._instance;
    };
    /**
     * Set the current global tracer.
     *
     * @returns true if the tracer provider was successfully registered, else false
     */
    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
        var success = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());
        if (success) {
            this._proxyTracerProvider.setDelegate(provider);
        }
        return success;
    };
    /**
     * Returns the global tracer provider.
     */
    TraceAPI.prototype.getTracerProvider = function () {
        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || this._proxyTracerProvider;
    };
    /**
     * Returns a tracer from the global tracer provider.
     */
    TraceAPI.prototype.getTracer = function (name, version) {
        return this.getTracerProvider().getTracer(name, version);
    };
    /** Remove the global tracer provider */
    TraceAPI.prototype.disable = function () {
        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());
        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();
    };
    return TraceAPI;
}());

//# sourceMappingURL=trace.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteBaggage: () => (/* binding */ deleteBaggage),
/* harmony export */   getActiveBaggage: () => (/* binding */ getActiveBaggage),
/* harmony export */   getBaggage: () => (/* binding */ getBaggage),
/* harmony export */   setBaggage: () => (/* binding */ setBaggage)
/* harmony export */ });
/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ "./node_modules/@opentelemetry/api/build/esm/api/context.js");
/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Baggage key
 */
var BAGGAGE_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Baggage Key');
/**
 * Retrieve the current baggage from the given context
 *
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */
function getBaggage(context) {
    return context.getValue(BAGGAGE_KEY) || undefined;
}
/**
 * Retrieve the current baggage from the active/current context
 *
 * @returns {Baggage} Extracted baggage from the context
 */
function getActiveBaggage() {
    return getBaggage(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());
}
/**
 * Store a baggage in the given context
 *
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */
function setBaggage(context, baggage) {
    return context.setValue(BAGGAGE_KEY, baggage);
}
/**
 * Delete the baggage stored in the given context
 *
 * @param {Context} Context that manage all context values
 */
function deleteBaggage(context) {
    return context.deleteValue(BAGGAGE_KEY);
}
//# sourceMappingURL=context-helpers.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaggageImpl: () => (/* binding */ BaggageImpl)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var BaggageImpl = /** @class */ (function () {
    function BaggageImpl(entries) {
        this._entries = entries ? new Map(entries) : new Map();
    }
    BaggageImpl.prototype.getEntry = function (key) {
        var entry = this._entries.get(key);
        if (!entry) {
            return undefined;
        }
        return Object.assign({}, entry);
    };
    BaggageImpl.prototype.getAllEntries = function () {
        return Array.from(this._entries.entries()).map(function (_a) {
            var _b = __read(_a, 2), k = _b[0], v = _b[1];
            return [k, v];
        });
    };
    BaggageImpl.prototype.setEntry = function (key, entry) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntry = function (key) {
        var newBaggage = new BaggageImpl(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
    };
    BaggageImpl.prototype.removeEntries = function () {
        var e_1, _a;
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        var newBaggage = new BaggageImpl(this._entries);
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                newBaggage._entries.delete(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return newBaggage;
    };
    BaggageImpl.prototype.clear = function () {
        return new BaggageImpl();
    };
    return BaggageImpl;
}());

//# sourceMappingURL=baggage-impl.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   baggageEntryMetadataSymbol: () => (/* binding */ baggageEntryMetadataSymbol)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Symbol used to make BaggageEntryMetadata an opaque type
 */
var baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');
//# sourceMappingURL=symbol.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   baggageEntryMetadataFromString: () => (/* binding */ baggageEntryMetadataFromString),
/* harmony export */   createBaggage: () => (/* binding */ createBaggage)
/* harmony export */ });
/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/* harmony import */ var _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/baggage-impl */ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js");
/* harmony import */ var _internal_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/symbol */ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();
/**
 * Create a new Baggage with optional entries
 *
 * @param entries An array of baggage entries the new baggage should contain
 */
function createBaggage(entries) {
    if (entries === void 0) { entries = {}; }
    return new _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__.BaggageImpl(new Map(Object.entries(entries)));
}
/**
 * Create a serializable BaggageEntryMetadata object from a string.
 *
 * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
 *
 */
function baggageEntryMetadataFromString(str) {
    if (typeof str !== 'string') {
        diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
        str = '';
    }
    return {
        __TYPE__: _internal_symbol__WEBPACK_IMPORTED_MODULE_2__.baggageEntryMetadataSymbol,
        toString: function () {
            return str;
        },
    };
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   context: () => (/* binding */ context)
/* harmony export */ });
/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/context */ "./node_modules/@opentelemetry/api/build/esm/api/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

/** Entrypoint for context API */
var context = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();
//# sourceMappingURL=context-api.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoopContextManager: () => (/* binding */ NoopContextManager)
/* harmony export */ });
/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

var NoopContextManager = /** @class */ (function () {
    function NoopContextManager() {
    }
    NoopContextManager.prototype.active = function () {
        return _context__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;
    };
    NoopContextManager.prototype.with = function (_context, fn, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));
    };
    NoopContextManager.prototype.bind = function (_context, target) {
        return target;
    };
    NoopContextManager.prototype.enable = function () {
        return this;
    };
    NoopContextManager.prototype.disable = function () {
        return this;
    };
    return NoopContextManager;
}());

//# sourceMappingURL=NoopContextManager.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/context.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/context.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ROOT_CONTEXT: () => (/* binding */ ROOT_CONTEXT),
/* harmony export */   createContextKey: () => (/* binding */ createContextKey)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Get a key to uniquely identify a context value */
function createContextKey(description) {
    // The specification states that for the same input, multiple calls should
    // return different keys. Due to the nature of the JS dependency management
    // system, this creates problems where multiple versions of some package
    // could hold different keys for the same property.
    //
    // Therefore, we use Symbol.for which returns the same key for the same input.
    return Symbol.for(description);
}
var BaseContext = /** @class */ (function () {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */
    function BaseContext(parentContext) {
        // for minification
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : new Map();
        self.getValue = function (key) { return self._currentContext.get(key); };
        self.setValue = function (key, value) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.set(key, value);
            return context;
        };
        self.deleteValue = function (key) {
            var context = new BaseContext(self._currentContext);
            context._currentContext.delete(key);
            return context;
        };
    }
    return BaseContext;
}());
/** The root context is used as the default parent context when there is no active context */
var ROOT_CONTEXT = new BaseContext();
//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag-api.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag-api.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   diag: () => (/* binding */ diag)
/* harmony export */ });
/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/diag */ "./node_modules/@opentelemetry/api/build/esm/api/diag.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

/**
 * Entrypoint for Diag API.
 * Defines Diagnostic handler used for internal diagnostic logging operations.
 * The default provides a Noop DiagLogger implementation which may be changed via the
 * diag.setLogger(logger: DiagLogger) function.
 */
var diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();
//# sourceMappingURL=diag-api.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiagComponentLogger: () => (/* binding */ DiagComponentLogger)
/* harmony export */ });
/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

/**
 * Component Logger which is meant to be used as part of any component which
 * will add automatically additional namespace in front of the log message.
 * It will then forward all message to global diag logger
 * @example
 * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
 * cLogger.debug('test');
 * // @opentelemetry/instrumentation-http test
 */
var DiagComponentLogger = /** @class */ (function () {
    function DiagComponentLogger(props) {
        this._namespace = props.namespace || 'DiagComponentLogger';
    }
    DiagComponentLogger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('debug', this._namespace, args);
    };
    DiagComponentLogger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('error', this._namespace, args);
    };
    DiagComponentLogger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('info', this._namespace, args);
    };
    DiagComponentLogger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('warn', this._namespace, args);
    };
    DiagComponentLogger.prototype.verbose = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return logProxy('verbose', this._namespace, args);
    };
    return DiagComponentLogger;
}());

function logProxy(funcName, namespace, args) {
    var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');
    // shortcut if logger not set
    if (!logger) {
        return;
    }
    args.unshift(namespace);
    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));
}
//# sourceMappingURL=ComponentLogger.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiagConsoleLogger: () => (/* binding */ DiagConsoleLogger)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var consoleMap = [
    { n: 'error', c: 'error' },
    { n: 'warn', c: 'warn' },
    { n: 'info', c: 'info' },
    { n: 'debug', c: 'debug' },
    { n: 'verbose', c: 'trace' },
];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */
var DiagConsoleLogger = /** @class */ (function () {
    function DiagConsoleLogger() {
        function _consoleFunc(funcName) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (console) {
                    // Some environments only expose the console when the F12 developer console is open
                    // eslint-disable-next-line no-console
                    var theFunc = console[funcName];
                    if (typeof theFunc !== 'function') {
                        // Not all environments support all functions
                        // eslint-disable-next-line no-console
                        theFunc = console.log;
                    }
                    // One last final check
                    if (typeof theFunc === 'function') {
                        return theFunc.apply(console, args);
                    }
                }
            };
        }
        for (var i = 0; i < consoleMap.length; i++) {
            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
        }
    }
    return DiagConsoleLogger;
}());

//# sourceMappingURL=consoleLogger.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLogLevelDiagLogger: () => (/* binding */ createLogLevelDiagLogger)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ "./node_modules/@opentelemetry/api/build/esm/diag/types.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createLogLevelDiagLogger(maxLevel, logger) {
    if (maxLevel < _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE) {
        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE;
    }
    else if (maxLevel > _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL) {
        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL;
    }
    // In case the logger is null or undefined
    logger = logger || {};
    function _filterFunc(funcName, theLevel) {
        var theFunc = logger[funcName];
        if (typeof theFunc === 'function' && maxLevel >= theLevel) {
            return theFunc.bind(logger);
        }
        return function () { };
    }
    return {
        error: _filterFunc('error', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR),
        warn: _filterFunc('warn', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN),
        info: _filterFunc('info', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO),
        debug: _filterFunc('debug', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG),
        verbose: _filterFunc('verbose', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE),
    };
}
//# sourceMappingURL=logLevelLogger.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiagLogLevel: () => (/* binding */ DiagLogLevel)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Defines the available internal logging levels for the diagnostic logger, the numeric values
 * of the levels are defined to match the original values from the initial LogLevel to avoid
 * compatibility/migration issues for any implementation that assume the numeric ordering.
 */
var DiagLogLevel;
(function (DiagLogLevel) {
    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */
    DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
    /** Identifies an error scenario */
    DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
    /** Identifies a warning scenario */
    DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
    /** General informational log message */
    DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
    /** General debug log message */
    DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
    /**
     * Detailed trace level logging should only be used for development, should only be set
     * in a development environment.
     */
    DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
    /** Used to set the logging level to include all logging */
    DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (DiagLogLevel = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGlobal: () => (/* binding */ getGlobal),
/* harmony export */   registerGlobal: () => (/* binding */ registerGlobal),
/* harmony export */   unregisterGlobal: () => (/* binding */ unregisterGlobal)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ "./node_modules/@opentelemetry/api/build/esm/version.js");
/* harmony import */ var _semver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./semver */ "./node_modules/@opentelemetry/api/build/esm/internal/semver.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var major = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION.split('.')[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _platform__WEBPACK_IMPORTED_MODULE_1__._globalThis;
function registerGlobal(type, instance, diag, allowOverride) {
    var _a;
    if (allowOverride === void 0) { allowOverride = false; }
    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
        version: _version__WEBPACK_IMPORTED_MODULE_0__.VERSION,
    });
    if (!allowOverride && api[type]) {
        // already registered an API of this type
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag.error(err.stack || err.message);
        return false;
    }
    if (api.version !== _version__WEBPACK_IMPORTED_MODULE_0__.VERSION) {
        // All registered APIs must be of the same version exactly
        var err = new Error("@opentelemetry/api: Registration of version v" + api.version + " for " + type + " does not match previously registered API v" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION);
        diag.error(err.stack || err.message);
        return false;
    }
    api[type] = instance;
    diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + ".");
    return true;
}
function getGlobal(type) {
    var _a, _b;
    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;
    if (!globalVersion || !(0,_semver__WEBPACK_IMPORTED_MODULE_2__.isCompatible)(globalVersion)) {
        return;
    }
    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function unregisterGlobal(type, diag) {
    diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + ".");
    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
    if (api) {
        delete api[type];
    }
}
//# sourceMappingURL=global-utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _makeCompatibilityCheck: () => (/* binding */ _makeCompatibilityCheck),
/* harmony export */   isCompatible: () => (/* binding */ isCompatible)
/* harmony export */ });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ "./node_modules/@opentelemetry/api/build/esm/version.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
/**
 * Create a function to test an API version to see if it is compatible with the provided ownVersion.
 *
 * The returned function has the following semantics:
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param ownVersion version which should be checked against
 */
function _makeCompatibilityCheck(ownVersion) {
    var acceptedVersions = new Set([ownVersion]);
    var rejectedVersions = new Set();
    var myVersionMatch = ownVersion.match(re);
    if (!myVersionMatch) {
        // we cannot guarantee compatibility so we always return noop
        return function () { return false; };
    }
    var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4],
    };
    // if ownVersion has a prerelease tag, versions must match exactly
    if (ownVersionParsed.prerelease != null) {
        return function isExactmatch(globalVersion) {
            return globalVersion === ownVersion;
        };
    }
    function _reject(v) {
        rejectedVersions.add(v);
        return false;
    }
    function _accept(v) {
        acceptedVersions.add(v);
        return true;
    }
    return function isCompatible(globalVersion) {
        if (acceptedVersions.has(globalVersion)) {
            return true;
        }
        if (rejectedVersions.has(globalVersion)) {
            return false;
        }
        var globalVersionMatch = globalVersion.match(re);
        if (!globalVersionMatch) {
            // cannot parse other version
            // we cannot guarantee compatibility so we always noop
            return _reject(globalVersion);
        }
        var globalVersionParsed = {
            major: +globalVersionMatch[1],
            minor: +globalVersionMatch[2],
            patch: +globalVersionMatch[3],
            prerelease: globalVersionMatch[4],
        };
        // if globalVersion has a prerelease tag, versions must match exactly
        if (globalVersionParsed.prerelease != null) {
            return _reject(globalVersion);
        }
        // major versions must match
        if (ownVersionParsed.major !== globalVersionParsed.major) {
            return _reject(globalVersion);
        }
        if (ownVersionParsed.major === 0) {
            if (ownVersionParsed.minor === globalVersionParsed.minor &&
                ownVersionParsed.patch <= globalVersionParsed.patch) {
                return _accept(globalVersion);
            }
            return _reject(globalVersion);
        }
        if (ownVersionParsed.minor <= globalVersionParsed.minor) {
            return _accept(globalVersion);
        }
        return _reject(globalVersion);
    };
}
/**
 * Test an API version to see if it is compatible with this API.
 *
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param version version of the API requesting an instance of the global API
 */
var isCompatible = _makeCompatibilityCheck(_version__WEBPACK_IMPORTED_MODULE_0__.VERSION);
//# sourceMappingURL=semver.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   metrics: () => (/* binding */ metrics)
/* harmony export */ });
/* harmony import */ var _api_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/metrics */ "./node_modules/@opentelemetry/api/build/esm/api/metrics.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

/** Entrypoint for metrics API */
var metrics = _api_metrics__WEBPACK_IMPORTED_MODULE_0__.MetricsAPI.getInstance();
//# sourceMappingURL=metrics-api.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NOOP_COUNTER_METRIC: () => (/* binding */ NOOP_COUNTER_METRIC),
/* harmony export */   NOOP_GAUGE_METRIC: () => (/* binding */ NOOP_GAUGE_METRIC),
/* harmony export */   NOOP_HISTOGRAM_METRIC: () => (/* binding */ NOOP_HISTOGRAM_METRIC),
/* harmony export */   NOOP_METER: () => (/* binding */ NOOP_METER),
/* harmony export */   NOOP_OBSERVABLE_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_COUNTER_METRIC),
/* harmony export */   NOOP_OBSERVABLE_GAUGE_METRIC: () => (/* binding */ NOOP_OBSERVABLE_GAUGE_METRIC),
/* harmony export */   NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC),
/* harmony export */   NOOP_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_UP_DOWN_COUNTER_METRIC),
/* harmony export */   NoopCounterMetric: () => (/* binding */ NoopCounterMetric),
/* harmony export */   NoopGaugeMetric: () => (/* binding */ NoopGaugeMetric),
/* harmony export */   NoopHistogramMetric: () => (/* binding */ NoopHistogramMetric),
/* harmony export */   NoopMeter: () => (/* binding */ NoopMeter),
/* harmony export */   NoopMetric: () => (/* binding */ NoopMetric),
/* harmony export */   NoopObservableCounterMetric: () => (/* binding */ NoopObservableCounterMetric),
/* harmony export */   NoopObservableGaugeMetric: () => (/* binding */ NoopObservableGaugeMetric),
/* harmony export */   NoopObservableMetric: () => (/* binding */ NoopObservableMetric),
/* harmony export */   NoopObservableUpDownCounterMetric: () => (/* binding */ NoopObservableUpDownCounterMetric),
/* harmony export */   NoopUpDownCounterMetric: () => (/* binding */ NoopUpDownCounterMetric),
/* harmony export */   createNoopMeter: () => (/* binding */ createNoopMeter)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */
var NoopMeter = /** @class */ (function () {
    function NoopMeter() {
    }
    /**
     * @see {@link Meter.createGauge}
     */
    NoopMeter.prototype.createGauge = function (_name, _options) {
        return NOOP_GAUGE_METRIC;
    };
    /**
     * @see {@link Meter.createHistogram}
     */
    NoopMeter.prototype.createHistogram = function (_name, _options) {
        return NOOP_HISTOGRAM_METRIC;
    };
    /**
     * @see {@link Meter.createCounter}
     */
    NoopMeter.prototype.createCounter = function (_name, _options) {
        return NOOP_COUNTER_METRIC;
    };
    /**
     * @see {@link Meter.createUpDownCounter}
     */
    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {
        return NOOP_UP_DOWN_COUNTER_METRIC;
    };
    /**
     * @see {@link Meter.createObservableGauge}
     */
    NoopMeter.prototype.createObservableGauge = function (_name, _options) {
        return NOOP_OBSERVABLE_GAUGE_METRIC;
    };
    /**
     * @see {@link Meter.createObservableCounter}
     */
    NoopMeter.prototype.createObservableCounter = function (_name, _options) {
        return NOOP_OBSERVABLE_COUNTER_METRIC;
    };
    /**
     * @see {@link Meter.createObservableUpDownCounter}
     */
    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {
        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;
    };
    /**
     * @see {@link Meter.addBatchObservableCallback}
     */
    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };
    /**
     * @see {@link Meter.removeBatchObservableCallback}
     */
    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };
    return NoopMeter;
}());

var NoopMetric = /** @class */ (function () {
    function NoopMetric() {
    }
    return NoopMetric;
}());

var NoopCounterMetric = /** @class */ (function (_super) {
    __extends(NoopCounterMetric, _super);
    function NoopCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopCounterMetric.prototype.add = function (_value, _attributes) { };
    return NoopCounterMetric;
}(NoopMetric));

var NoopUpDownCounterMetric = /** @class */ (function (_super) {
    __extends(NoopUpDownCounterMetric, _super);
    function NoopUpDownCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };
    return NoopUpDownCounterMetric;
}(NoopMetric));

var NoopGaugeMetric = /** @class */ (function (_super) {
    __extends(NoopGaugeMetric, _super);
    function NoopGaugeMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopGaugeMetric.prototype.record = function (_value, _attributes) { };
    return NoopGaugeMetric;
}(NoopMetric));

var NoopHistogramMetric = /** @class */ (function (_super) {
    __extends(NoopHistogramMetric, _super);
    function NoopHistogramMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };
    return NoopHistogramMetric;
}(NoopMetric));

var NoopObservableMetric = /** @class */ (function () {
    function NoopObservableMetric() {
    }
    NoopObservableMetric.prototype.addCallback = function (_callback) { };
    NoopObservableMetric.prototype.removeCallback = function (_callback) { };
    return NoopObservableMetric;
}());

var NoopObservableCounterMetric = /** @class */ (function (_super) {
    __extends(NoopObservableCounterMetric, _super);
    function NoopObservableCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableCounterMetric;
}(NoopObservableMetric));

var NoopObservableGaugeMetric = /** @class */ (function (_super) {
    __extends(NoopObservableGaugeMetric, _super);
    function NoopObservableGaugeMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableGaugeMetric;
}(NoopObservableMetric));

var NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {
    __extends(NoopObservableUpDownCounterMetric, _super);
    function NoopObservableUpDownCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NoopObservableUpDownCounterMetric;
}(NoopObservableMetric));

var NOOP_METER = new NoopMeter();
// Synchronous instruments
var NOOP_COUNTER_METRIC = new NoopCounterMetric();
var NOOP_GAUGE_METRIC = new NoopGaugeMetric();
var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();
var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();
// Asynchronous instruments
var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();
var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();
var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();
/**
 * Create a no-op Meter
 */
function createNoopMeter() {
    return NOOP_METER;
}
//# sourceMappingURL=NoopMeter.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NOOP_METER_PROVIDER: () => (/* binding */ NOOP_METER_PROVIDER),
/* harmony export */   NoopMeterProvider: () => (/* binding */ NoopMeterProvider)
/* harmony export */ });
/* harmony import */ var _NoopMeter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopMeter */ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */
var NoopMeterProvider = /** @class */ (function () {
    function NoopMeterProvider() {
    }
    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {
        return _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER;
    };
    return NoopMeterProvider;
}());

var NOOP_METER_PROVIDER = new NoopMeterProvider();
//# sourceMappingURL=NoopMeterProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _globalThis: () => (/* binding */ _globalThis)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Updates to this file should also be replicated to @opentelemetry/core too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = typeof globalThis === 'object'
    ? globalThis
    : typeof self === 'object'
        ? self
        : typeof window === 'object'
            ? window
            : typeof __webpack_require__.g === 'object'
                ? __webpack_require__.g
                : {};
//# sourceMappingURL=globalThis.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   propagation: () => (/* binding */ propagation)
/* harmony export */ });
/* harmony import */ var _api_propagation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/propagation */ "./node_modules/@opentelemetry/api/build/esm/api/propagation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

/** Entrypoint for propagation API */
var propagation = _api_propagation__WEBPACK_IMPORTED_MODULE_0__.PropagationAPI.getInstance();
//# sourceMappingURL=propagation-api.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoopTextMapPropagator: () => (/* binding */ NoopTextMapPropagator)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * No-op implementations of {@link TextMapPropagator}.
 */
var NoopTextMapPropagator = /** @class */ (function () {
    function NoopTextMapPropagator() {
    }
    /** Noop inject function does nothing */
    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };
    /** Noop extract function does nothing and returns the input context */
    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
        return context;
    };
    NoopTextMapPropagator.prototype.fields = function () {
        return [];
    };
    return NoopTextMapPropagator;
}());

//# sourceMappingURL=NoopTextMapPropagator.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultTextMapGetter: () => (/* binding */ defaultTextMapGetter),
/* harmony export */   defaultTextMapSetter: () => (/* binding */ defaultTextMapSetter)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var defaultTextMapGetter = {
    get: function (carrier, key) {
        if (carrier == null) {
            return undefined;
        }
        return carrier[key];
    },
    keys: function (carrier) {
        if (carrier == null) {
            return [];
        }
        return Object.keys(carrier);
    },
};
var defaultTextMapSetter = {
    set: function (carrier, key, value) {
        if (carrier == null) {
            return;
        }
        carrier[key] = value;
    },
};
//# sourceMappingURL=TextMapPropagator.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace-api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace-api.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   trace: () => (/* binding */ trace)
/* harmony export */ });
/* harmony import */ var _api_trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/trace */ "./node_modules/@opentelemetry/api/build/esm/api/trace.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Split module-level variable definition into separate files to allow
// tree-shaking on each api instance.

/** Entrypoint for trace API */
var trace = _api_trace__WEBPACK_IMPORTED_MODULE_0__.TraceAPI.getInstance();
//# sourceMappingURL=trace-api.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NonRecordingSpan: () => (/* binding */ NonRecordingSpan)
/* harmony export */ });
/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The NonRecordingSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */
var NonRecordingSpan = /** @class */ (function () {
    function NonRecordingSpan(_spanContext) {
        if (_spanContext === void 0) { _spanContext = _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT; }
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    NonRecordingSpan.prototype.spanContext = function () {
        return this._spanContext;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setAttributes = function (_attributes) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
    };
    NonRecordingSpan.prototype.addLink = function (_link) {
        return this;
    };
    NonRecordingSpan.prototype.addLinks = function (_links) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.setStatus = function (_status) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.updateName = function (_name) {
        return this;
    };
    // By default does nothing
    NonRecordingSpan.prototype.end = function (_endTime) { };
    // isRecording always returns false for NonRecordingSpan.
    NonRecordingSpan.prototype.isRecording = function () {
        return false;
    };
    // By default does nothing
    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };
    return NonRecordingSpan;
}());

//# sourceMappingURL=NonRecordingSpan.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoopTracer: () => (/* binding */ NoopTracer)
/* harmony export */ });
/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/context */ "./node_modules/@opentelemetry/api/build/esm/api/context.js");
/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ "./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js");
/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js");
/* harmony import */ var _spancontext_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spancontext-utils */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




var contextApi = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();
/**
 * No-op implementations of {@link Tracer}.
 */
var NoopTracer = /** @class */ (function () {
    function NoopTracer() {
    }
    // startSpan starts a noop span.
    NoopTracer.prototype.startSpan = function (name, options, context) {
        if (context === void 0) { context = contextApi.active(); }
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) {
            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();
        }
        var parentFromContext = context && (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext)(context);
        if (isSpanContext(parentFromContext) &&
            (0,_spancontext_utils__WEBPACK_IMPORTED_MODULE_3__.isSpanContextValid)(parentFromContext)) {
            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(parentFromContext);
        }
        else {
            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();
        }
    };
    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
            return;
        }
        else if (arguments.length === 2) {
            fn = arg2;
        }
        else if (arguments.length === 3) {
            opts = arg2;
            fn = arg3;
        }
        else {
            opts = arg2;
            ctx = arg3;
            fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan)(parentContext, span);
        return contextApi.with(contextWithSpanSet, fn, undefined, span);
    };
    return NoopTracer;
}());

function isSpanContext(spanContext) {
    return (typeof spanContext === 'object' &&
        typeof spanContext['spanId'] === 'string' &&
        typeof spanContext['traceId'] === 'string' &&
        typeof spanContext['traceFlags'] === 'number');
}
//# sourceMappingURL=NoopTracer.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoopTracerProvider: () => (/* binding */ NoopTracerProvider)
/* harmony export */ });
/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */
var NoopTracerProvider = /** @class */ (function () {
    function NoopTracerProvider() {
    }
    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {
        return new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();
    };
    return NoopTracerProvider;
}());

//# sourceMappingURL=NoopTracerProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProxyTracer: () => (/* binding */ ProxyTracer)
/* harmony export */ });
/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NOOP_TRACER = new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();
/**
 * Proxy tracer provided by the proxy tracer provider
 */
var ProxyTracer = /** @class */ (function () {
    function ProxyTracer(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
    }
    ProxyTracer.prototype.startSpan = function (name, options, context) {
        return this._getTracer().startSpan(name, options, context);
    };
    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
    };
    /**
     * Try to get a tracer from the proxy tracer provider.
     * If the proxy tracer provider has no delegate, return a noop tracer.
     */
    ProxyTracer.prototype._getTracer = function () {
        if (this._delegate) {
            return this._delegate;
        }
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) {
            return NOOP_TRACER;
        }
        this._delegate = tracer;
        return this._delegate;
    };
    return ProxyTracer;
}());

//# sourceMappingURL=ProxyTracer.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProxyTracerProvider: () => (/* binding */ ProxyTracerProvider)
/* harmony export */ });
/* harmony import */ var _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProxyTracer */ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js");
/* harmony import */ var _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracerProvider */ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var NOOP_TRACER_PROVIDER = new _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__.NoopTracerProvider();
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */
var ProxyTracerProvider = /** @class */ (function () {
    function ProxyTracerProvider() {
    }
    /**
     * Get a {@link ProxyTracer}
     */
    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {
        var _a;
        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__.ProxyTracer(this, name, version, options));
    };
    ProxyTracerProvider.prototype.getDelegate = function () {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
    };
    /**
     * Set the delegate tracer provider
     */
    ProxyTracerProvider.prototype.setDelegate = function (delegate) {
        this._delegate = delegate;
    };
    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
    };
    return ProxyTracerProvider;
}());

//# sourceMappingURL=ProxyTracerProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */
var SamplingDecision;
(function (SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */
    SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */
    SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */
    SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision || (SamplingDecision = {}));
//# sourceMappingURL=SamplingResult.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteSpan: () => (/* binding */ deleteSpan),
/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),
/* harmony export */   getSpan: () => (/* binding */ getSpan),
/* harmony export */   getSpanContext: () => (/* binding */ getSpanContext),
/* harmony export */   setSpan: () => (/* binding */ setSpan),
/* harmony export */   setSpanContext: () => (/* binding */ setSpanContext)
/* harmony export */ });
/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NonRecordingSpan */ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js");
/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ "./node_modules/@opentelemetry/api/build/esm/api/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * span key
 */
var SPAN_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Context Key SPAN');
/**
 * Return the span if one exists
 *
 * @param context context to get span from
 */
function getSpan(context) {
    return context.getValue(SPAN_KEY) || undefined;
}
/**
 * Gets the span from the current context, if one exists.
 */
function getActiveSpan() {
    return getSpan(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());
}
/**
 * Set the span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */
function setSpan(context, span) {
    return context.setValue(SPAN_KEY, span);
}
/**
 * Remove current span stored in the context
 *
 * @param context context to delete span from
 */
function deleteSpan(context) {
    return context.deleteValue(SPAN_KEY);
}
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */
function setSpanContext(context, spanContext) {
    return setSpan(context, new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan(spanContext));
}
/**
 * Get the span context of the span if it exists.
 *
 * @param context context to get values from
 */
function getSpanContext(context) {
    var _a;
    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();
}
//# sourceMappingURL=context-utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INVALID_SPANID: () => (/* binding */ INVALID_SPANID),
/* harmony export */   INVALID_SPAN_CONTEXT: () => (/* binding */ INVALID_SPAN_CONTEXT),
/* harmony export */   INVALID_TRACEID: () => (/* binding */ INVALID_TRACEID)
/* harmony export */ });
/* harmony import */ var _trace_flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace_flags */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var INVALID_SPANID = '0000000000000000';
var INVALID_TRACEID = '00000000000000000000000000000000';
var INVALID_SPAN_CONTEXT = {
    traceId: INVALID_TRACEID,
    spanId: INVALID_SPANID,
    traceFlags: _trace_flags__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE,
};
//# sourceMappingURL=invalid-span-constants.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpanKind: () => (/* binding */ SpanKind)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SpanKind;
(function (SpanKind) {
    /** Default value. Indicates that the span is used internally. */
    SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */
    SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */
    SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (SpanKind = {}));
//# sourceMappingURL=span_kind.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isSpanContextValid: () => (/* binding */ isSpanContextValid),
/* harmony export */   isValidSpanId: () => (/* binding */ isValidSpanId),
/* harmony export */   isValidTraceId: () => (/* binding */ isValidTraceId),
/* harmony export */   wrapSpanContext: () => (/* binding */ wrapSpanContext)
/* harmony export */ });
/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js");
/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function isValidTraceId(traceId) {
    return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_TRACEID;
}
function isValidSpanId(spanId) {
    return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPANID;
}
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */
function isSpanContextValid(spanContext) {
    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));
}
/**
 * Wrap the given {@link SpanContext} in a new non-recording {@link Span}
 *
 * @param spanContext span context to be wrapped
 * @returns a new non-recording {@link Span} with the provided context
 */
function wrapSpanContext(spanContext) {
    return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(spanContext);
}
//# sourceMappingURL=spancontext-utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpanStatusCode: () => (/* binding */ SpanStatusCode)
/* harmony export */ });
/**
 * An enumeration of status codes.
 */
var SpanStatusCode;
(function (SpanStatusCode) {
    /**
     * The default status.
     */
    SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */
    SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
    /**
     * The operation contains an error.
     */
    SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {}));
//# sourceMappingURL=status.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceFlags: () => (/* binding */ TraceFlags)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TraceFlags;
(function (TraceFlags) {
    /** Represents no flag set. */
    TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */
    TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (TraceFlags = {}));
//# sourceMappingURL=trace_flags.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.9.0';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWebAutoInstrumentations: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_0__.getWebAutoInstrumentations)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/utils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWebAutoInstrumentations: () => (/* binding */ getWebAutoInstrumentations)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_instrumentation_document_load__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/instrumentation-document-load */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js");
/* harmony import */ var _opentelemetry_instrumentation_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/instrumentation-fetch */ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js");
/* harmony import */ var _opentelemetry_instrumentation_user_interaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/instrumentation-user-interaction */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/instrumentation.js");
/* harmony import */ var _opentelemetry_instrumentation_xml_http_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/instrumentation-xml-http-request */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */





var InstrumentationMap = {
    '@opentelemetry/instrumentation-document-load': _opentelemetry_instrumentation_document_load__WEBPACK_IMPORTED_MODULE_0__.DocumentLoadInstrumentation,
    '@opentelemetry/instrumentation-fetch': _opentelemetry_instrumentation_fetch__WEBPACK_IMPORTED_MODULE_1__.FetchInstrumentation,
    '@opentelemetry/instrumentation-user-interaction': _opentelemetry_instrumentation_user_interaction__WEBPACK_IMPORTED_MODULE_2__.UserInteractionInstrumentation,
    '@opentelemetry/instrumentation-xml-http-request': _opentelemetry_instrumentation_xml_http_request__WEBPACK_IMPORTED_MODULE_3__.XMLHttpRequestInstrumentation,
};
function getWebAutoInstrumentations(inputConfigs) {
    var _a;
    if (inputConfigs === void 0) { inputConfigs = {}; }
    for (var _i = 0, _b = Object.keys(inputConfigs); _i < _b.length; _i++) {
        var name_1 = _b[_i];
        if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name_1)) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.diag.error("Provided instrumentation name \"" + name_1 + "\" not found");
            continue;
        }
    }
    var instrumentations = [];
    for (var _c = 0, _d = Object.keys(InstrumentationMap); _c < _d.length; _c++) {
        var name_2 = _d[_c];
        var Instance = InstrumentationMap[name_2];
        // Defaults are defined by the instrumentation itself
        var userConfig = (_a = inputConfigs[name_2]) !== null && _a !== void 0 ? _a : {};
        if (userConfig.enabled === false) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.diag.debug("Disabling instrumentation for " + name_2);
            continue;
        }
        try {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.diag.debug("Loading instrumentation for " + name_2);
            instrumentations.push(new Instance(userConfig));
        }
        catch (e) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.diag.error(e);
        }
    }
    return instrumentations;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),
/* harmony export */   urlMatches: () => (/* binding */ urlMatches)
/* harmony export */ });
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
    if (typeof urlToMatch === 'string') {
        return url === urlToMatch;
    }
    else {
        return !!url.match(urlToMatch);
    }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */
function isUrlIgnored(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) {
        return false;
    }
    try {
        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {
            var ignoreUrl = ignoredUrls_1_1.value;
            if (urlMatches(url, ignoreUrl)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/enums/AttributeNames.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/enums/AttributeNames.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttributeNames: () => (/* binding */ AttributeNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AttributeNames;
(function (AttributeNames) {
    AttributeNames["EVENT_TYPE"] = "event_type";
    AttributeNames["TARGET_ELEMENT"] = "target_element";
    AttributeNames["TARGET_XPATH"] = "target_xpath";
    AttributeNames["HTTP_URL"] = "http.url";
})(AttributeNames || (AttributeNames = {}));
//# sourceMappingURL=AttributeNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/instrumentation.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/instrumentation.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UserInteractionInstrumentation: () => (/* binding */ UserInteractionInstrumentation)
/* harmony export */ });
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/utils.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");
/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums/AttributeNames */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/enums/AttributeNames.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/version.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference types="zone.js" />





/** @knipignore */

var ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';
var EVENT_NAVIGATION_NAME = 'Navigation:';
var DEFAULT_EVENT_NAMES = ['click'];
function defaultShouldPreventSpanCreation() {
    return false;
}
/**
 * This class represents a UserInteraction plugin for auto instrumentation.
 * If zone.js is available then it patches the zone otherwise it patches
 * addEventListener of HTMLElement
 */
var UserInteractionInstrumentation = /** @class */ (function (_super) {
    __extends(UserInteractionInstrumentation, _super);
    function UserInteractionInstrumentation(config) {
        if (config === void 0) { config = {}; }
        var _a;
        var _this = _super.call(this, _version__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_NAME, _version__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_VERSION, config) || this;
        _this.version = _version__WEBPACK_IMPORTED_MODULE_0__.PACKAGE_VERSION;
        _this.moduleName = 'user-interaction';
        _this._spansData = new WeakMap();
        // for addEventListener/removeEventListener state
        _this._wrappedListeners = new WeakMap();
        // for event bubbling
        _this._eventsSpanMap = new WeakMap();
        _this._eventNames = new Set((_a = config === null || config === void 0 ? void 0 : config.eventNames) !== null && _a !== void 0 ? _a : DEFAULT_EVENT_NAMES);
        _this._shouldPreventSpanCreation =
            typeof (config === null || config === void 0 ? void 0 : config.shouldPreventSpanCreation) === 'function'
                ? config.shouldPreventSpanCreation
                : defaultShouldPreventSpanCreation;
        return _this;
    }
    UserInteractionInstrumentation.prototype.init = function () { };
    /**
     * This will check if last task was timeout and will save the time to
     * fix the user interaction when nothing happens
     * This timeout comes from xhr plugin which is needed to collect information
     * about last xhr main request from observer
     * @param task
     * @param span
     */
    UserInteractionInstrumentation.prototype._checkForTimeout = function (task, span) {
        var spanData = this._spansData.get(span);
        if (spanData) {
            if (task.source === 'setTimeout') {
                spanData.hrTimeLastTimeout = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTime)();
            }
            else if (task.source !== 'Promise.then' &&
                task.source !== 'setTimeout') {
                spanData.hrTimeLastTimeout = undefined;
            }
        }
    };
    /**
     * Controls whether or not to create a span, based on the event type.
     */
    UserInteractionInstrumentation.prototype._allowEventName = function (eventName) {
        return this._eventNames.has(eventName);
    };
    /**
     * Creates a new span
     * @param element
     * @param eventName
     * @param parentSpan
     */
    UserInteractionInstrumentation.prototype._createSpan = function (element, eventName, parentSpan) {
        var _a;
        if (!(element instanceof HTMLElement)) {
            return undefined;
        }
        if (!element.getAttribute) {
            return undefined;
        }
        if (element.hasAttribute('disabled')) {
            return undefined;
        }
        if (!this._allowEventName(eventName)) {
            return undefined;
        }
        var xpath = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.getElementXPath)(element, true);
        try {
            var span = this.tracer.startSpan(eventName, {
                attributes: (_a = {},
                    _a[_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_3__.AttributeNames.EVENT_TYPE] = eventName,
                    _a[_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_3__.AttributeNames.TARGET_ELEMENT] = element.tagName,
                    _a[_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_3__.AttributeNames.TARGET_XPATH] = xpath,
                    _a[_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_3__.AttributeNames.HTTP_URL] = window.location.href,
                    _a),
            }, parentSpan
                ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), parentSpan)
                : undefined);
            if (this._shouldPreventSpanCreation(eventName, element, span) === true) {
                return undefined;
            }
            this._spansData.set(span, {
                taskCount: 0,
            });
            return span;
        }
        catch (e) {
            this._diag.error('failed to start create new user interaction span', e);
        }
        return undefined;
    };
    /**
     * Decrement number of tasks that left in zone,
     * This is needed to be able to end span when no more tasks left
     * @param span
     */
    UserInteractionInstrumentation.prototype._decrementTask = function (span) {
        var spanData = this._spansData.get(span);
        if (spanData) {
            spanData.taskCount--;
            if (spanData.taskCount === 0) {
                this._tryToEndSpan(span, spanData.hrTimeLastTimeout);
            }
        }
    };
    /**
     * Return the current span
     * @param zone
     * @private
     */
    UserInteractionInstrumentation.prototype._getCurrentSpan = function (zone) {
        var context = zone.get(ZONE_CONTEXT_KEY);
        if (context) {
            return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.getSpan(context);
        }
        return context;
    };
    /**
     * Increment number of tasks that are run within the same zone.
     *     This is needed to be able to end span when no more tasks left
     * @param span
     */
    UserInteractionInstrumentation.prototype._incrementTask = function (span) {
        var spanData = this._spansData.get(span);
        if (spanData) {
            spanData.taskCount++;
        }
    };
    /**
     * Returns true iff we should use the patched callback; false if it's already been patched
     */
    UserInteractionInstrumentation.prototype.addPatchedListener = function (on, type, listener, wrappedListener) {
        var listener2Type = this._wrappedListeners.get(listener);
        if (!listener2Type) {
            listener2Type = new Map();
            this._wrappedListeners.set(listener, listener2Type);
        }
        var element2patched = listener2Type.get(type);
        if (!element2patched) {
            element2patched = new Map();
            listener2Type.set(type, element2patched);
        }
        if (element2patched.has(on)) {
            return false;
        }
        element2patched.set(on, wrappedListener);
        return true;
    };
    /**
     * Returns the patched version of the callback (or undefined)
     */
    UserInteractionInstrumentation.prototype.removePatchedListener = function (on, type, listener) {
        var listener2Type = this._wrappedListeners.get(listener);
        if (!listener2Type) {
            return undefined;
        }
        var element2patched = listener2Type.get(type);
        if (!element2patched) {
            return undefined;
        }
        var patched = element2patched.get(on);
        if (patched) {
            element2patched.delete(on);
            if (element2patched.size === 0) {
                listener2Type.delete(type);
                if (listener2Type.size === 0) {
                    this._wrappedListeners.delete(listener);
                }
            }
        }
        return patched;
    };
    // utility method to deal with the Function|EventListener nature of addEventListener
    UserInteractionInstrumentation.prototype._invokeListener = function (listener, target, args) {
        if (typeof listener === 'function') {
            return listener.apply(target, args);
        }
        else {
            return listener.handleEvent(args[0]);
        }
    };
    /**
     * This patches the addEventListener of HTMLElement to be able to
     * auto instrument the click events
     * This is done when zone is not available
     */
    UserInteractionInstrumentation.prototype._patchAddEventListener = function () {
        var plugin = this;
        return function (original) {
            return function addEventListenerPatched(type, listener, useCapture) {
                // Forward calls with listener = null
                if (!listener) {
                    return original.call(this, type, listener, useCapture);
                }
                // filter out null (typeof null === 'object')
                var once = useCapture && typeof useCapture === 'object' && useCapture.once;
                var patchedListener = function () {
                    var _this = this;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var parentSpan;
                    var event = args[0];
                    var target = event === null || event === void 0 ? void 0 : event.target;
                    if (event) {
                        parentSpan = plugin._eventsSpanMap.get(event);
                    }
                    if (once) {
                        plugin.removePatchedListener(this, type, listener);
                    }
                    var span = plugin._createSpan(target, type, parentSpan);
                    if (span) {
                        if (event) {
                            plugin._eventsSpanMap.set(event, span);
                        }
                        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), span), function () {
                            var result = plugin._invokeListener(listener, _this, args);
                            // no zone so end span immediately
                            span.end();
                            return result;
                        });
                    }
                    else {
                        return plugin._invokeListener(listener, this, args);
                    }
                };
                if (plugin.addPatchedListener(this, type, listener, patchedListener)) {
                    return original.call(this, type, patchedListener, useCapture);
                }
            };
        };
    };
    /**
     * This patches the removeEventListener of HTMLElement to handle the fact that
     * we patched the original callbacks
     * This is done when zone is not available
     */
    UserInteractionInstrumentation.prototype._patchRemoveEventListener = function () {
        var plugin = this;
        return function (original) {
            return function removeEventListenerPatched(type, listener, useCapture) {
                var wrappedListener = plugin.removePatchedListener(this, type, listener);
                if (wrappedListener) {
                    return original.call(this, type, wrappedListener, useCapture);
                }
                else {
                    return original.call(this, type, listener, useCapture);
                }
            };
        };
    };
    /**
     * Most browser provide event listener api via EventTarget in prototype chain.
     * Exception to this is IE 11 which has it on the prototypes closest to EventTarget:
     *
     * * - has addEventListener in IE
     * ** - has addEventListener in all other browsers
     * ! - missing in IE
     *
     * HTMLElement -> Element -> Node * -> EventTarget **! -> Object
     * Document -> Node * -> EventTarget **! -> Object
     * Window * -> WindowProperties ! -> EventTarget **! -> Object
     */
    UserInteractionInstrumentation.prototype._getPatchableEventTargets = function () {
        return window.EventTarget
            ? [EventTarget.prototype]
            : [Node.prototype, Window.prototype];
    };
    /**
     * Patches the history api
     */
    UserInteractionInstrumentation.prototype._patchHistoryApi = function () {
        this._unpatchHistoryApi();
        this._wrap(history, 'replaceState', this._patchHistoryMethod());
        this._wrap(history, 'pushState', this._patchHistoryMethod());
        this._wrap(history, 'back', this._patchHistoryMethod());
        this._wrap(history, 'forward', this._patchHistoryMethod());
        this._wrap(history, 'go', this._patchHistoryMethod());
    };
    /**
     * Patches the certain history api method
     */
    UserInteractionInstrumentation.prototype._patchHistoryMethod = function () {
        var plugin = this;
        return function (original) {
            return function patchHistoryMethod() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var url = "" + location.pathname + location.hash + location.search;
                var result = original.apply(this, args);
                var urlAfter = "" + location.pathname + location.hash + location.search;
                if (url !== urlAfter) {
                    plugin._updateInteractionName(urlAfter);
                }
                return result;
            };
        };
    };
    /**
     * unpatch the history api methods
     */
    UserInteractionInstrumentation.prototype._unpatchHistoryApi = function () {
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(history.replaceState))
            this._unwrap(history, 'replaceState');
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(history.pushState))
            this._unwrap(history, 'pushState');
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(history.back))
            this._unwrap(history, 'back');
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(history.forward))
            this._unwrap(history, 'forward');
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(history.go))
            this._unwrap(history, 'go');
    };
    /**
     * Updates interaction span name
     * @param url
     */
    UserInteractionInstrumentation.prototype._updateInteractionName = function (url) {
        var span = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.getSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active());
        if (span && typeof span.updateName === 'function') {
            span.updateName(EVENT_NAVIGATION_NAME + " " + url);
        }
    };
    /**
     * Patches zone cancel task - this is done to be able to correctly
     * decrement the number of remaining tasks
     */
    UserInteractionInstrumentation.prototype._patchZoneCancelTask = function () {
        var plugin = this;
        return function (original) {
            return function patchCancelTask(task) {
                var currentZone = Zone.current;
                var currentSpan = plugin._getCurrentSpan(currentZone);
                if (currentSpan && plugin._shouldCountTask(task, currentZone)) {
                    plugin._decrementTask(currentSpan);
                }
                return original.call(this, task);
            };
        };
    };
    /**
     * Patches zone schedule task - this is done to be able to correctly
     * increment the number of tasks running within current zone but also to
     * save time in case of timeout running from xhr plugin when waiting for
     * main request from PerformanceResourceTiming
     */
    UserInteractionInstrumentation.prototype._patchZoneScheduleTask = function () {
        var plugin = this;
        return function (original) {
            return function patchScheduleTask(task) {
                var currentZone = Zone.current;
                var currentSpan = plugin._getCurrentSpan(currentZone);
                if (currentSpan && plugin._shouldCountTask(task, currentZone)) {
                    plugin._incrementTask(currentSpan);
                    plugin._checkForTimeout(task, currentSpan);
                }
                return original.call(this, task);
            };
        };
    };
    /**
     * Patches zone run task - this is done to be able to create a span when
     * user interaction starts
     * @private
     */
    UserInteractionInstrumentation.prototype._patchZoneRunTask = function () {
        var plugin = this;
        return function (original) {
            return function patchRunTask(task, applyThis, applyArgs) {
                var event = Array.isArray(applyArgs) && applyArgs[0] instanceof Event
                    ? applyArgs[0]
                    : undefined;
                var target = event === null || event === void 0 ? void 0 : event.target;
                var span;
                var activeZone = this;
                if (target) {
                    span = plugin._createSpan(target, task.eventName);
                    if (span) {
                        plugin._incrementTask(span);
                        return activeZone.run(function () {
                            try {
                                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), span), function () {
                                    var currentZone = Zone.current;
                                    task._zone = currentZone;
                                    return original.call(currentZone, task, applyThis, applyArgs);
                                });
                            }
                            finally {
                                plugin._decrementTask(span);
                            }
                        });
                    }
                }
                else {
                    span = plugin._getCurrentSpan(activeZone);
                }
                try {
                    return original.call(activeZone, task, applyThis, applyArgs);
                }
                finally {
                    if (span && plugin._shouldCountTask(task, activeZone)) {
                        plugin._decrementTask(span);
                    }
                }
            };
        };
    };
    /**
     * Decides if task should be counted.
     * @param task
     * @param currentZone
     * @private
     */
    UserInteractionInstrumentation.prototype._shouldCountTask = function (task, currentZone) {
        if (task._zone) {
            currentZone = task._zone;
        }
        if (!currentZone || !task.data || task.data.isPeriodic) {
            return false;
        }
        var currentSpan = this._getCurrentSpan(currentZone);
        if (!currentSpan) {
            return false;
        }
        if (!this._spansData.get(currentSpan)) {
            return false;
        }
        return task.type === 'macroTask' || task.type === 'microTask';
    };
    /**
     * Will try to end span when such span still exists.
     * @param span
     * @param endTime
     * @private
     */
    UserInteractionInstrumentation.prototype._tryToEndSpan = function (span, endTime) {
        if (span) {
            var spanData = this._spansData.get(span);
            if (spanData) {
                span.end(endTime);
                this._spansData.delete(span);
            }
        }
    };
    /**
     * implements enable function
     */
    UserInteractionInstrumentation.prototype.enable = function () {
        var _this = this;
        var ZoneWithPrototype = this._getZoneWithPrototype();
        this._diag.debug('applying patch to', this.moduleName, this.version, 'zone:', !!ZoneWithPrototype);
        if (ZoneWithPrototype) {
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.runTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'runTask');
                this._diag.debug('removing previous patch from method runTask');
            }
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.scheduleTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'scheduleTask');
                this._diag.debug('removing previous patch from method scheduleTask');
            }
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.cancelTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'cancelTask');
                this._diag.debug('removing previous patch from method cancelTask');
            }
            this._zonePatched = true;
            this._wrap(ZoneWithPrototype.prototype, 'runTask', this._patchZoneRunTask());
            this._wrap(ZoneWithPrototype.prototype, 'scheduleTask', this._patchZoneScheduleTask());
            this._wrap(ZoneWithPrototype.prototype, 'cancelTask', this._patchZoneCancelTask());
        }
        else {
            this._zonePatched = false;
            var targets = this._getPatchableEventTargets();
            targets.forEach(function (target) {
                if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(target.addEventListener)) {
                    _this._unwrap(target, 'addEventListener');
                    _this._diag.debug('removing previous patch from method addEventListener');
                }
                if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(target.removeEventListener)) {
                    _this._unwrap(target, 'removeEventListener');
                    _this._diag.debug('removing previous patch from method removeEventListener');
                }
                _this._wrap(target, 'addEventListener', _this._patchAddEventListener());
                _this._wrap(target, 'removeEventListener', _this._patchRemoveEventListener());
            });
        }
        this._patchHistoryApi();
    };
    /**
     * implements unpatch function
     */
    UserInteractionInstrumentation.prototype.disable = function () {
        var _this = this;
        var ZoneWithPrototype = this._getZoneWithPrototype();
        this._diag.debug('removing patch from', this.moduleName, this.version, 'zone:', !!ZoneWithPrototype);
        if (ZoneWithPrototype && this._zonePatched) {
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.runTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'runTask');
            }
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.scheduleTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'scheduleTask');
            }
            if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(ZoneWithPrototype.prototype.cancelTask)) {
                this._unwrap(ZoneWithPrototype.prototype, 'cancelTask');
            }
        }
        else {
            var targets = this._getPatchableEventTargets();
            targets.forEach(function (target) {
                if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(target.addEventListener)) {
                    _this._unwrap(target, 'addEventListener');
                }
                if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_6__.isWrapped)(target.removeEventListener)) {
                    _this._unwrap(target, 'removeEventListener');
                }
            });
        }
        this._unpatchHistoryApi();
    };
    /**
     * returns Zone
     */
    UserInteractionInstrumentation.prototype._getZoneWithPrototype = function () {
        var _window = window;
        return _window.Zone;
    };
    return UserInteractionInstrumentation;
}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_7__.InstrumentationBase));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/version.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation-user-interaction/build/esm/version.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PACKAGE_NAME: () => (/* binding */ PACKAGE_NAME),
/* harmony export */   PACKAGE_VERSION: () => (/* binding */ PACKAGE_VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var PACKAGE_VERSION = '0.44.1';
var PACKAGE_NAME = '@opentelemetry/instrumentation-user-interaction';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract = /** @class */ (function () {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */
        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.wrap;
        /* Api to unwrap instrumented methods */
        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.unwrap;
        /* Api to mass wrap instrumented method */
        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massWrap;
        /* Api to mass unwrap instrumented methods */
        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massUnwrap;
        this.setConfig(config);
        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.createComponentLogger({
            namespace: instrumentationName,
        });
        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(instrumentationName, instrumentationVersion);
        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.metrics.getMeter(instrumentationName, instrumentationVersion);
        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__.logs.getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */
        get: function () {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */
    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */
    InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */
    InstrumentationAbstract.prototype.getModuleDefinitions = function () {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) {
            return [initResult];
        }
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */
    InstrumentationAbstract.prototype._updateMetricInstruments = function () {
        return;
    };
    /* Returns InstrumentationConfig */
    InstrumentationAbstract.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */
    InstrumentationAbstract.prototype.setConfig = function (config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = __assign({ enabled: true }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */
    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */
        get: function () {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */
    InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {
        if (!hookHandler) {
            return;
        }
        try {
            hookHandler(span, info);
        }
        catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", { triggerName: triggerName }, e);
        }
    };
    return InstrumentationAbstract;
}());

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase = /** @class */ (function (_super) {
    __extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) {
            _this.enable();
        }
        return _this;
    }
    return InstrumentationBase;
}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isWrapped: () => (/* binding */ isWrapped),
/* harmony export */   safeExecuteInTheMiddle: () => (/* binding */ safeExecuteInTheMiddle),
/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* binding */ safeExecuteInTheMiddleAsync)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    }
    catch (e) {
        error = e;
    }
    finally {
        onFinish(error, result);
        if (error && !preventThrowingError) {
            // eslint-disable-next-line no-unsafe-finally
            throw error;
        }
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
/**
 * Async function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {
    return __awaiter(this, void 0, void 0, function () {
        var error, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    return [4 /*yield*/, execute()];
                case 1:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 4];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) {
                        // eslint-disable-next-line no-unsafe-finally
                        throw error;
                    }
                    // eslint-disable-next-line no-unsafe-finally
                    return [2 /*return*/, result];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Checks if certain function has been already wrapped
 * @param func
 */
function isWrapped(func) {
    return (typeof func === 'function' &&
        typeof func.__original === 'function' &&
        typeof func.__unwrap === 'function' &&
        func.__wrapped === true);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerformanceTimingNames: () => (/* binding */ PerformanceTimingNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
(function (PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (PerformanceTimingNames = {}));
//# sourceMappingURL=PerformanceTimingNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanNetworkEvent: () => (/* binding */ addSpanNetworkEvent),
/* harmony export */   addSpanNetworkEvents: () => (/* binding */ addSpanNetworkEvents),
/* harmony export */   getElementXPath: () => (/* binding */ getElementXPath),
/* harmony export */   getResource: () => (/* binding */ getResource),
/* harmony export */   hasKey: () => (/* binding */ hasKey),
/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),
/* harmony export */   parseUrl: () => (/* binding */ parseUrl),
/* harmony export */   shouldPropagateTraceHeaders: () => (/* binding */ shouldPropagateTraceHeaders),
/* harmony export */   sortResources: () => (/* binding */ sortResources)
/* harmony export */ });
/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/auto-instrumentations-web/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Used to normalize relative URLs
var urlNormalizingAnchor;
function getUrlNormalizingAnchor() {
    if (!urlNormalizingAnchor) {
        urlNormalizingAnchor = document.createElement('a');
    }
    return urlNormalizingAnchor;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasKey(obj, key) {
    return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 * @param refPerfName name of performance entry to use for reference
 */
function addSpanNetworkEvent(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if (hasKey(entries, performanceName) &&
        typeof entries[performanceName] === 'number') {
        perfTime = entries[performanceName];
    }
    var refName = refPerfName || _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if (hasKey(entries, refName) && typeof entries[refName] === 'number') {
        refTime = entries[refName];
    }
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
/**
 * Helper function for adding network events and content length attributes
 * @param span
 * @param resource
 * @param ignoreNetworkEvents
 */
function addSpanNetworkEvents(span, resource, ignoreNetworkEvents) {
    if (ignoreNetworkEvents === void 0) { ignoreNetworkEvents = false; }
    if (!ignoreNetworkEvents) {
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);
        if (hasKey(resource, 'name') &&
            resource['name'].startsWith('https:')) {
            addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
        }
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);
    }
    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
    }
    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
    }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */
function sortResources(filteredResources) {
    return filteredResources.slice().sort(function (a, b) {
        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        if (valueA > valueB) {
            return 1;
        }
        else if (valueA < valueB) {
            return -1;
        }
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */
function getOrigin() {
    return typeof location !== 'undefined' ? location.origin : undefined;
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */
function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = parseUrl(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) {
        return {
            mainRequest: undefined,
        };
    }
    if (filteredResources.length === 1) {
        return {
            mainRequest: filteredResources[0],
        };
    }
    var sorted = sortResources(filteredResources);
    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];
        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest,
        };
    }
    else {
        return {
            mainRequest: filteredResources[0],
        };
    }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */
function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(spanEndTimeHR);
    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for (var i = 1; i < length; i++) {
        var resource = resources[i];
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */
function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(startTimeHR);
    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(endTimeHR);
    var filteredResources = resources.filter(function (resource) {
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        return (resource.initiatorType.toLowerCase() ===
            (initiatorType || 'xmlhttprequest') &&
            resource.name === spanUrl &&
            resourceStartTime >= startTime &&
            resourceEndTime <= endTime);
    });
    if (filteredResources.length > 0) {
        filteredResources = filteredResources.filter(function (resource) {
            return !ignoredResources.has(resource);
        });
    }
    return filteredResources;
}
/**
 * Parses url using URL constructor or fallback to anchor element.
 * @param url
 */
function parseUrl(url) {
    if (typeof URL === 'function') {
        return new URL(url, typeof document !== 'undefined'
            ? document.baseURI
            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this
                ? location.href
                : undefined);
    }
    var element = getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
/**
 * Parses url using URL constructor or fallback to anchor element and serialize
 * it to a string.
 *
 * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url
 *
 * @param url
 */
function normalizeUrl(url) {
    var urlLike = parseUrl(url);
    return urlLike.href;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function getElementXPath(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) {
        return '/';
    }
    var targetValue = getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf('@id') > 0) {
        return targetValue;
    }
    var xpath = '';
    if (target.parentNode) {
        xpath += getElementXPath(target.parentNode, false);
    }
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */
function getNodeIndex(target) {
    if (!target.parentNode) {
        return 0;
    }
    var allowedTypes = [target.nodeType];
    if (target.nodeType === Node.CDATA_SECTION_NODE) {
        allowedTypes.push(Node.TEXT_NODE);
    }
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function (element) {
        var localName = element.localName;
        return (allowedTypes.indexOf(element.nodeType) >= 0 &&
            localName === target.localName);
    });
    if (elements.length >= 1) {
        return elements.indexOf(target) + 1; // xpath starts from 1
    }
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */
function getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = getNodeIndex(target);
    var nodeValue = '';
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute('id');
        if (optimised && id) {
            return "//*[@id=\"" + id + "\"]";
        }
        nodeValue = target.localName;
    }
    else if (nodeType === Node.TEXT_NODE ||
        nodeType === Node.CDATA_SECTION_NODE) {
        nodeValue = 'text()';
    }
    else if (nodeType === Node.COMMENT_NODE) {
        nodeValue = 'comment()';
    }
    else {
        return '';
    }
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) {
        return "/" + nodeValue + "[" + index + "]";
    }
    return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */
function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === 'string' ||
        propagateTraceHeaderUrls instanceof RegExp) {
        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
    }
    var parsedSpanUrl = parseUrl(spanUrl);
    if (parsedSpanUrl.origin === getOrigin()) {
        return true;
    }
    else {
        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.urlMatches)(spanUrl, propagateTraceHeaderUrl);
        });
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OTLPTraceExporter: () => (/* binding */ OTLPTraceExporter)
/* harmony export */ });
/* harmony import */ var _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js");
/* harmony import */ var _opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/otlp-transformer */ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/trace.js");
/* harmony import */ var _opentelemetry_otlp_exporter_base_browser_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base/browser-http */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/create-legacy-browser-delegate.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Collector Trace Exporter for Web
 */
var OTLPTraceExporter = /** @class */ (function (_super) {
    __extends(OTLPTraceExporter, _super);
    function OTLPTraceExporter(config) {
        if (config === void 0) { config = {}; }
        return _super.call(this, (0,_opentelemetry_otlp_exporter_base_browser_http__WEBPACK_IMPORTED_MODULE_0__.createLegacyOtlpBrowserExportDelegate)(config, _opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_1__.JsonTraceSerializer, 'v1/traces', { 'Content-Type': 'application/json' })) || this;
    }
    return OTLPTraceExporter;
}(_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_2__.OTLPExporterBase));

//# sourceMappingURL=OTLPTraceExporter.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttributeNames: () => (/* binding */ AttributeNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AttributeNames;
(function (AttributeNames) {
    AttributeNames["DOCUMENT_LOAD"] = "documentLoad";
    AttributeNames["DOCUMENT_FETCH"] = "documentFetch";
    AttributeNames["RESOURCE_FETCH"] = "resourceFetch";
})(AttributeNames || (AttributeNames = {}));
//# sourceMappingURL=AttributeNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventNames: () => (/* binding */ EventNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EventNames;
(function (EventNames) {
    EventNames["FIRST_PAINT"] = "firstPaint";
    EventNames["FIRST_CONTENTFUL_PAINT"] = "firstContentfulPaint";
})(EventNames || (EventNames = {}));
//# sourceMappingURL=EventNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttributeNames: () => (/* reexport safe */ _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_1__.AttributeNames),
/* harmony export */   DocumentLoadInstrumentation: () => (/* reexport safe */ _instrumentation__WEBPACK_IMPORTED_MODULE_0__.DocumentLoadInstrumentation)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumentation */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js");
/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums/AttributeNames */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/types.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocumentLoadInstrumentation: () => (/* binding */ DocumentLoadInstrumentation)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/utils.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js");
/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/AttributeNames */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/** @knipignore */



/**
 * This class represents a document load plugin
 */
var DocumentLoadInstrumentation = /** @class */ (function (_super) {
    __extends(DocumentLoadInstrumentation, _super);
    function DocumentLoadInstrumentation(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, _version__WEBPACK_IMPORTED_MODULE_1__.PACKAGE_NAME, _version__WEBPACK_IMPORTED_MODULE_1__.PACKAGE_VERSION, config) || this;
        _this.component = 'document-load';
        _this.version = '1';
        _this.moduleName = _this.component;
        return _this;
    }
    DocumentLoadInstrumentation.prototype.init = function () { };
    /**
     * callback to be executed when page is loaded
     */
    DocumentLoadInstrumentation.prototype._onDocumentLoaded = function () {
        var _this = this;
        // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.
        // Support for event "loadend" is very limited and cannot be used
        window.setTimeout(function () {
            _this._collectPerformance();
        });
    };
    /**
     * Adds spans for all resources
     * @param rootSpan
     */
    DocumentLoadInstrumentation.prototype._addResourcesSpans = function (rootSpan) {
        var _this = this;
        var _a, _b;
        var resources = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'resource');
        if (resources) {
            resources.forEach(function (resource) {
                _this._initResourceSpan(resource, rootSpan);
            });
        }
    };
    /**
     * Collects information about performance and creates appropriate spans
     */
    DocumentLoadInstrumentation.prototype._collectPerformance = function () {
        var _this = this;
        var metaElement = Array.from(document.getElementsByTagName('meta')).find(function (e) { return e.getAttribute('name') === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.TRACE_PARENT_HEADER; });
        var entries = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getPerformanceNavigationEntries)();
        var traceparent = (metaElement && metaElement.content) || '';
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.propagation.extract(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.ROOT_CONTEXT, { traceparent: traceparent }), function () {
            var _a;
            var rootSpan = _this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_0__.AttributeNames.DOCUMENT_LOAD, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.FETCH_START, entries);
            if (!rootSpan) {
                return;
            }
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), rootSpan), function () {
                var fetchSpan = _this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_0__.AttributeNames.DOCUMENT_FETCH, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.FETCH_START, entries);
                if (fetchSpan) {
                    fetchSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_10__.SEMATTRS_HTTP_URL, location.href);
                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), fetchSpan), function () {
                        var _a;
                        if (!_this.getConfig().ignoreNetworkEvents) {
                            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvents)(fetchSpan, entries);
                        }
                        _this._addCustomAttributesOnSpan(fetchSpan, (_a = _this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentFetch);
                        _this._endSpan(fetchSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.RESPONSE_END, entries);
                    });
                }
            });
            rootSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_10__.SEMATTRS_HTTP_URL, location.href);
            rootSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_10__.SEMATTRS_HTTP_USER_AGENT, navigator.userAgent);
            _this._addResourcesSpans(rootSpan);
            if (!_this.getConfig().ignoreNetworkEvents) {
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.FETCH_START, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.UNLOAD_EVENT_START, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.UNLOAD_EVENT_END, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.DOM_INTERACTIVE, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_START, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_END, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.DOM_COMPLETE, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.LOAD_EVENT_START, entries);
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.LOAD_EVENT_END, entries);
            }
            if (!_this.getConfig().ignorePerformancePaintEvents) {
                (0,_utils__WEBPACK_IMPORTED_MODULE_2__.addSpanPerformancePaintEvents)(rootSpan);
            }
            _this._addCustomAttributesOnSpan(rootSpan, (_a = _this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentLoad);
            _this._endSpan(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.LOAD_EVENT_END, entries);
        });
    };
    /**
     * Helper function for ending span
     * @param span
     * @param performanceName name of performance entry for time end
     * @param entries
     */
    DocumentLoadInstrumentation.prototype._endSpan = function (span, performanceName, entries) {
        // span can be undefined when entries are missing the certain performance - the span will not be created
        if (span) {
            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.hasKey)(entries, performanceName)) {
                span.end(entries[performanceName]);
            }
            else {
                // just end span
                span.end();
            }
        }
    };
    /**
     * Creates and ends a span with network information about resource added as timed events
     * @param resource
     * @param parentSpan
     */
    DocumentLoadInstrumentation.prototype._initResourceSpan = function (resource, parentSpan) {
        var _a;
        var span = this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_0__.AttributeNames.RESOURCE_FETCH, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.FETCH_START, resource, parentSpan);
        if (span) {
            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_10__.SEMATTRS_HTTP_URL, resource.name);
            if (!this.getConfig().ignoreNetworkEvents) {
                (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.addSpanNetworkEvents)(span, resource);
            }
            this._addCustomAttributesOnResourceSpan(span, resource, (_a = this.getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.resourceFetch);
            this._endSpan(span, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_8__.PerformanceTimingNames.RESPONSE_END, resource);
        }
    };
    /**
     * Helper function for starting a span
     * @param spanName name of span
     * @param performanceName name of performance entry for time start
     * @param entries
     * @param parentSpan
     */
    DocumentLoadInstrumentation.prototype._startSpan = function (spanName, performanceName, entries, parentSpan) {
        if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_11__.hasKey)(entries, performanceName) &&
            typeof entries[performanceName] === 'number') {
            var span = this.tracer.startSpan(spanName, {
                startTime: entries[performanceName],
            }, parentSpan ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.context.active(), parentSpan) : undefined);
            return span;
        }
        return undefined;
    };
    /**
     * executes callback {_onDocumentLoaded} when the page is loaded
     */
    DocumentLoadInstrumentation.prototype._waitForPageLoad = function () {
        if (window.document.readyState === 'complete') {
            this._onDocumentLoaded();
        }
        else {
            this._onDocumentLoaded = this._onDocumentLoaded.bind(this);
            window.addEventListener('load', this._onDocumentLoaded);
        }
    };
    /**
     * adds custom attributes to root span if configured
     */
    DocumentLoadInstrumentation.prototype._addCustomAttributesOnSpan = function (span, applyCustomAttributesOnSpan) {
        var _this = this;
        if (applyCustomAttributesOnSpan) {
            (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__.safeExecuteInTheMiddle)(function () { return applyCustomAttributesOnSpan(span); }, function (error) {
                if (!error) {
                    return;
                }
                _this._diag.error('addCustomAttributesOnSpan', error);
            }, true);
        }
    };
    /**
     * adds custom attributes to span if configured
     */
    DocumentLoadInstrumentation.prototype._addCustomAttributesOnResourceSpan = function (span, resource, applyCustomAttributesOnSpan) {
        var _this = this;
        if (applyCustomAttributesOnSpan) {
            (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__.safeExecuteInTheMiddle)(function () { return applyCustomAttributesOnSpan(span, resource); }, function (error) {
                if (!error) {
                    return;
                }
                _this._diag.error('addCustomAttributesOnResourceSpan', error);
            }, true);
        }
    };
    /**
     * implements enable function
     */
    DocumentLoadInstrumentation.prototype.enable = function () {
        // remove previously attached load to avoid adding the same event twice
        // in case of multiple enable calling.
        window.removeEventListener('load', this._onDocumentLoaded);
        this._waitForPageLoad();
    };
    /**
     * implements disable function
     */
    DocumentLoadInstrumentation.prototype.disable = function () {
        window.removeEventListener('load', this._onDocumentLoaded);
    };
    return DocumentLoadInstrumentation;
}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_13__.InstrumentationBase));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/types.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/types.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanPerformancePaintEvents: () => (/* binding */ addSpanPerformancePaintEvents),
/* harmony export */   getPerformanceNavigationEntries: () => (/* binding */ getPerformanceNavigationEntries)
/* harmony export */ });
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");
/* harmony import */ var _enums_EventNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/EventNames */ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var getPerformanceNavigationEntries = function () {
    var _a, _b;
    var entries = {};
    var performanceNavigationTiming = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'navigation')[0];
    if (performanceNavigationTiming) {
        var keys = Object.values(_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames);
        keys.forEach(function (key) {
            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_3__.hasKey)(performanceNavigationTiming, key)) {
                var value = performanceNavigationTiming[key];
                if (typeof value === 'number') {
                    entries[key] = value;
                }
            }
        });
    }
    else {
        // // fallback to previous version
        var perf = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance;
        var performanceTiming_1 = perf.timing;
        if (performanceTiming_1) {
            var keys = Object.values(_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames);
            keys.forEach(function (key) {
                if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_3__.hasKey)(performanceTiming_1, key)) {
                    var value = performanceTiming_1[key];
                    if (typeof value === 'number') {
                        entries[key] = value;
                    }
                }
            });
        }
    }
    return entries;
};
var performancePaintNames = {
    'first-paint': _enums_EventNames__WEBPACK_IMPORTED_MODULE_0__.EventNames.FIRST_PAINT,
    'first-contentful-paint': _enums_EventNames__WEBPACK_IMPORTED_MODULE_0__.EventNames.FIRST_CONTENTFUL_PAINT,
};
var addSpanPerformancePaintEvents = function (span) {
    var _a, _b;
    var performancePaintTiming = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'paint');
    if (performancePaintTiming) {
        performancePaintTiming.forEach(function (_a) {
            var name = _a.name, startTime = _a.startTime;
            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_3__.hasKey)(performancePaintNames, name)) {
                span.addEvent(performancePaintNames[name], startTime);
            }
        });
    }
};
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PACKAGE_NAME: () => (/* binding */ PACKAGE_NAME),
/* harmony export */   PACKAGE_VERSION: () => (/* binding */ PACKAGE_VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var PACKAGE_VERSION = '0.44.1';
var PACKAGE_NAME = '@opentelemetry/instrumentation-document-load';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/internal/validators.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/internal/validators.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validateKey: () => (/* binding */ validateKey),
/* harmony export */   validateValue: () => (/* binding */ validateValue)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';
var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
/**
 * Key is opaque string up to 256 characters printable. It MUST begin with a
 * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,
 * underscores _, dashes -, asterisks *, and forward slashes /.
 * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the
 * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.
 * see https://www.w3.org/TR/trace-context/#key
 */
function validateKey(key) {
    return VALID_KEY_REGEX.test(key);
}
/**
 * Value is opaque string up to 256 characters printable ASCII RFC0020
 * characters (i.e., the range 0x20 to 0x7E) except comma , and =.
 */
function validateValue(value) {
    return (VALID_VALUE_BASE_REGEX.test(value) &&
        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));
}
//# sourceMappingURL=validators.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceState: () => (/* binding */ TraceState)
/* harmony export */ });
/* harmony import */ var _internal_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/validators */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/internal/validators.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_TRACE_STATE_ITEMS = 32;
var MAX_TRACE_STATE_LEN = 512;
var LIST_MEMBERS_SEPARATOR = ',';
var LIST_MEMBER_KEY_VALUE_SPLITTER = '=';
/**
 * TraceState must be a class and not a simple object type because of the spec
 * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).
 *
 * Here is the list of allowed mutations:
 * - New key-value pair should be added into the beginning of the list
 * - The value of any key can be updated. Modified keys MUST be moved to the
 * beginning of the list.
 */
var TraceState = /** @class */ (function () {
    function TraceState(rawTraceState) {
        this._internalState = new Map();
        if (rawTraceState)
            this._parse(rawTraceState);
    }
    TraceState.prototype.set = function (key, value) {
        // TODO: Benchmark the different approaches(map vs list) and
        // use the faster one.
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
            traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
    };
    TraceState.prototype.unset = function (key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
    };
    TraceState.prototype.get = function (key) {
        return this._internalState.get(key);
    };
    TraceState.prototype.serialize = function () {
        var _this = this;
        return this._keys()
            .reduce(function (agg, key) {
            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
            return agg;
        }, [])
            .join(LIST_MEMBERS_SEPARATOR);
    };
    TraceState.prototype._parse = function (rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN)
            return;
        this._internalState = rawTraceState
            .split(LIST_MEMBERS_SEPARATOR)
            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning
            .reduce(function (agg, part) {
            var listMember = part.trim(); // Optional Whitespace (OWS) handling
            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
            if (i !== -1) {
                var key = listMember.slice(0, i);
                var value = listMember.slice(i + 1, part.length);
                if ((0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {
                    agg.set(key, value);
                }
                else {
                    // TODO: Consider to add warning log
                }
            }
            return agg;
        }, new Map());
        // Because of the reverse() requirement, trunc must be done after map is created
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
            this._internalState = new Map(Array.from(this._internalState.entries())
                .reverse() // Use reverse same as original tracestate parse chain
                .slice(0, MAX_TRACE_STATE_ITEMS));
        }
    };
    TraceState.prototype._keys = function () {
        return Array.from(this._internalState.keys()).reverse();
    };
    TraceState.prototype._clone = function () {
        var traceState = new TraceState();
        traceState._internalState = new Map(this._internalState);
        return traceState;
    };
    return TraceState;
}());

//# sourceMappingURL=TraceState.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TRACE_PARENT_HEADER: () => (/* binding */ TRACE_PARENT_HEADER),
/* harmony export */   TRACE_STATE_HEADER: () => (/* binding */ TRACE_STATE_HEADER),
/* harmony export */   W3CTraceContextPropagator: () => (/* binding */ W3CTraceContextPropagator),
/* harmony export */   parseTraceParent: () => (/* binding */ parseTraceParent)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");
/* harmony import */ var _suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suppress-tracing */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");
/* harmony import */ var _TraceState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraceState */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



var TRACE_PARENT_HEADER = 'traceparent';
var TRACE_STATE_HEADER = 'tracestate';
var VERSION = '00';
var VERSION_PART = '(?!ff)[\\da-f]{2}';
var TRACE_ID_PART = '(?![0]{32})[\\da-f]{32}';
var PARENT_ID_PART = '(?![0]{16})[\\da-f]{16}';
var FLAGS_PART = '[\\da-f]{2}';
var TRACE_PARENT_REGEX = new RegExp("^\\s?(" + VERSION_PART + ")-(" + TRACE_ID_PART + ")-(" + PARENT_ID_PART + ")-(" + FLAGS_PART + ")(-.*)?\\s?$");
/**
 * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}
 * @param traceParent - A meta property that comes from server.
 *     It should be dynamically generated server side to have the server's request trace Id,
 *     a parent span Id that was set on the server's request span,
 *     and the trace flags to indicate the server's sampling decision
 *     (01 = sampled, 00 = not sampled).
 *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'
 *     For more information see {@link https://www.w3.org/TR/trace-context/}
 */
function parseTraceParent(traceParent) {
    var match = TRACE_PARENT_REGEX.exec(traceParent);
    if (!match)
        return null;
    // According to the specification the implementation should be compatible
    // with future versions. If there are more parts, we only reject it if it's using version 00
    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent
    if (match[1] === '00' && match[5])
        return null;
    return {
        traceId: match[2],
        spanId: match[3],
        traceFlags: parseInt(match[4], 16),
    };
}
/**
 * Propagates {@link SpanContext} through Trace Context format propagation.
 *
 * Based on the Trace Context specification:
 * https://www.w3.org/TR/trace-context/
 */
var W3CTraceContextPropagator = /** @class */ (function () {
    function W3CTraceContextPropagator() {
    }
    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {
        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);
        if (!spanContext ||
            (0,_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context) ||
            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.isSpanContextValid)(spanContext))
            return;
        var traceParent = VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-0" + Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.NONE).toString(16);
        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);
        if (spanContext.traceState) {
            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());
        }
    };
    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {
        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);
        if (!traceParentHeader)
            return context;
        var traceParent = Array.isArray(traceParentHeader)
            ? traceParentHeader[0]
            : traceParentHeader;
        if (typeof traceParent !== 'string')
            return context;
        var spanContext = parseTraceParent(traceParent);
        if (!spanContext)
            return context;
        spanContext.isRemote = true;
        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);
        if (traceStateHeader) {
            // If more than one `tracestate` header is found, we merge them into a
            // single header.
            var state = Array.isArray(traceStateHeader)
                ? traceStateHeader.join(',')
                : traceStateHeader;
            spanContext.traceState = new _TraceState__WEBPACK_IMPORTED_MODULE_4__.TraceState(typeof state === 'string' ? state : undefined);
        }
        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, spanContext);
    };
    W3CTraceContextPropagator.prototype.fields = function () {
        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];
    };
    return W3CTraceContextPropagator;
}());

//# sourceMappingURL=W3CTraceContextPropagator.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isTracingSuppressed: () => (/* binding */ isTracingSuppressed),
/* harmony export */   suppressTracing: () => (/* binding */ suppressTracing),
/* harmony export */   unsuppressTracing: () => (/* binding */ unsuppressTracing)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context/context.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');
function suppressTracing(context) {
    return context.setValue(SUPPRESS_TRACING_KEY, true);
}
function unsuppressTracing(context) {
    return context.deleteValue(SUPPRESS_TRACING_KEY);
}
function isTracingSuppressed(context) {
    return context.getValue(SUPPRESS_TRACING_KEY) === true;
}
//# sourceMappingURL=suppress-tracing.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),
/* harmony export */   urlMatches: () => (/* binding */ urlMatches)
/* harmony export */ });
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
    if (typeof urlToMatch === 'string') {
        return url === urlToMatch;
    }
    else {
        return !!url.match(urlToMatch);
    }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */
function isUrlIgnored(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) {
        return false;
    }
    try {
        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {
            var ignoreUrl = ignoredUrls_1_1.value;
            if (urlMatches(url, ignoreUrl)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract = /** @class */ (function () {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */
        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.wrap;
        /* Api to unwrap instrumented methods */
        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.unwrap;
        /* Api to mass wrap instrumented method */
        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massWrap;
        /* Api to mass unwrap instrumented methods */
        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massUnwrap;
        this.setConfig(config);
        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.createComponentLogger({
            namespace: instrumentationName,
        });
        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(instrumentationName, instrumentationVersion);
        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.metrics.getMeter(instrumentationName, instrumentationVersion);
        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__.logs.getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */
        get: function () {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */
    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */
    InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */
    InstrumentationAbstract.prototype.getModuleDefinitions = function () {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) {
            return [initResult];
        }
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */
    InstrumentationAbstract.prototype._updateMetricInstruments = function () {
        return;
    };
    /* Returns InstrumentationConfig */
    InstrumentationAbstract.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */
    InstrumentationAbstract.prototype.setConfig = function (config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = __assign({ enabled: true }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */
    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */
        get: function () {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */
    InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {
        if (!hookHandler) {
            return;
        }
        try {
            hookHandler(span, info);
        }
        catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", { triggerName: triggerName }, e);
        }
    };
    return InstrumentationAbstract;
}());

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase = /** @class */ (function (_super) {
    __extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) {
            _this.enable();
        }
        return _this;
    }
    return InstrumentationBase;
}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isWrapped: () => (/* binding */ isWrapped),
/* harmony export */   safeExecuteInTheMiddle: () => (/* binding */ safeExecuteInTheMiddle),
/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* binding */ safeExecuteInTheMiddleAsync)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    }
    catch (e) {
        error = e;
    }
    finally {
        onFinish(error, result);
        if (error && !preventThrowingError) {
            // eslint-disable-next-line no-unsafe-finally
            throw error;
        }
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
/**
 * Async function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {
    return __awaiter(this, void 0, void 0, function () {
        var error, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    return [4 /*yield*/, execute()];
                case 1:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 4];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) {
                        // eslint-disable-next-line no-unsafe-finally
                        throw error;
                    }
                    // eslint-disable-next-line no-unsafe-finally
                    return [2 /*return*/, result];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Checks if certain function has been already wrapped
 * @param func
 */
function isWrapped(func) {
    return (typeof func === 'function' &&
        typeof func.__original === 'function' &&
        typeof func.__unwrap === 'function' &&
        func.__wrapped === true);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerformanceTimingNames: () => (/* binding */ PerformanceTimingNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
(function (PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (PerformanceTimingNames = {}));
//# sourceMappingURL=PerformanceTimingNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanNetworkEvent: () => (/* binding */ addSpanNetworkEvent),
/* harmony export */   addSpanNetworkEvents: () => (/* binding */ addSpanNetworkEvents),
/* harmony export */   getElementXPath: () => (/* binding */ getElementXPath),
/* harmony export */   getResource: () => (/* binding */ getResource),
/* harmony export */   hasKey: () => (/* binding */ hasKey),
/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),
/* harmony export */   parseUrl: () => (/* binding */ parseUrl),
/* harmony export */   shouldPropagateTraceHeaders: () => (/* binding */ shouldPropagateTraceHeaders),
/* harmony export */   sortResources: () => (/* binding */ sortResources)
/* harmony export */ });
/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-document-load/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Used to normalize relative URLs
var urlNormalizingAnchor;
function getUrlNormalizingAnchor() {
    if (!urlNormalizingAnchor) {
        urlNormalizingAnchor = document.createElement('a');
    }
    return urlNormalizingAnchor;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasKey(obj, key) {
    return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 * @param refPerfName name of performance entry to use for reference
 */
function addSpanNetworkEvent(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if (hasKey(entries, performanceName) &&
        typeof entries[performanceName] === 'number') {
        perfTime = entries[performanceName];
    }
    var refName = refPerfName || _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if (hasKey(entries, refName) && typeof entries[refName] === 'number') {
        refTime = entries[refName];
    }
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
/**
 * Helper function for adding network events and content length attributes
 * @param span
 * @param resource
 * @param ignoreNetworkEvents
 */
function addSpanNetworkEvents(span, resource, ignoreNetworkEvents) {
    if (ignoreNetworkEvents === void 0) { ignoreNetworkEvents = false; }
    if (!ignoreNetworkEvents) {
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);
        if (hasKey(resource, 'name') &&
            resource['name'].startsWith('https:')) {
            addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
        }
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);
    }
    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
    }
    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
    }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */
function sortResources(filteredResources) {
    return filteredResources.slice().sort(function (a, b) {
        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        if (valueA > valueB) {
            return 1;
        }
        else if (valueA < valueB) {
            return -1;
        }
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */
function getOrigin() {
    return typeof location !== 'undefined' ? location.origin : undefined;
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */
function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = parseUrl(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) {
        return {
            mainRequest: undefined,
        };
    }
    if (filteredResources.length === 1) {
        return {
            mainRequest: filteredResources[0],
        };
    }
    var sorted = sortResources(filteredResources);
    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];
        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest,
        };
    }
    else {
        return {
            mainRequest: filteredResources[0],
        };
    }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */
function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(spanEndTimeHR);
    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for (var i = 1; i < length; i++) {
        var resource = resources[i];
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */
function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(startTimeHR);
    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(endTimeHR);
    var filteredResources = resources.filter(function (resource) {
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        return (resource.initiatorType.toLowerCase() ===
            (initiatorType || 'xmlhttprequest') &&
            resource.name === spanUrl &&
            resourceStartTime >= startTime &&
            resourceEndTime <= endTime);
    });
    if (filteredResources.length > 0) {
        filteredResources = filteredResources.filter(function (resource) {
            return !ignoredResources.has(resource);
        });
    }
    return filteredResources;
}
/**
 * Parses url using URL constructor or fallback to anchor element.
 * @param url
 */
function parseUrl(url) {
    if (typeof URL === 'function') {
        return new URL(url, typeof document !== 'undefined'
            ? document.baseURI
            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this
                ? location.href
                : undefined);
    }
    var element = getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
/**
 * Parses url using URL constructor or fallback to anchor element and serialize
 * it to a string.
 *
 * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url
 *
 * @param url
 */
function normalizeUrl(url) {
    var urlLike = parseUrl(url);
    return urlLike.href;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function getElementXPath(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) {
        return '/';
    }
    var targetValue = getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf('@id') > 0) {
        return targetValue;
    }
    var xpath = '';
    if (target.parentNode) {
        xpath += getElementXPath(target.parentNode, false);
    }
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */
function getNodeIndex(target) {
    if (!target.parentNode) {
        return 0;
    }
    var allowedTypes = [target.nodeType];
    if (target.nodeType === Node.CDATA_SECTION_NODE) {
        allowedTypes.push(Node.TEXT_NODE);
    }
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function (element) {
        var localName = element.localName;
        return (allowedTypes.indexOf(element.nodeType) >= 0 &&
            localName === target.localName);
    });
    if (elements.length >= 1) {
        return elements.indexOf(target) + 1; // xpath starts from 1
    }
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */
function getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = getNodeIndex(target);
    var nodeValue = '';
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute('id');
        if (optimised && id) {
            return "//*[@id=\"" + id + "\"]";
        }
        nodeValue = target.localName;
    }
    else if (nodeType === Node.TEXT_NODE ||
        nodeType === Node.CDATA_SECTION_NODE) {
        nodeValue = 'text()';
    }
    else if (nodeType === Node.COMMENT_NODE) {
        nodeValue = 'comment()';
    }
    else {
        return '';
    }
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) {
        return "/" + nodeValue + "[" + index + "]";
    }
    return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */
function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === 'string' ||
        propagateTraceHeaderUrls instanceof RegExp) {
        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
    }
    var parsedSpanUrl = parseUrl(spanUrl);
    if (parsedSpanUrl.origin === getOrigin()) {
        return true;
    }
    else {
        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.urlMatches)(spanUrl, propagateTraceHeaderUrl);
        });
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttributeNames: () => (/* binding */ AttributeNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md
 */
var AttributeNames;
(function (AttributeNames) {
    AttributeNames["COMPONENT"] = "component";
    AttributeNames["HTTP_ERROR_NAME"] = "http.error_name";
    AttributeNames["HTTP_STATUS_TEXT"] = "http.status_text";
})(AttributeNames || (AttributeNames = {}));
//# sourceMappingURL=AttributeNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/build/esm/fetch.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FetchInstrumentation: () => (/* binding */ FetchInstrumentation)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/utils.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");
/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums/AttributeNames */ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/enums/AttributeNames.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils */ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/utils.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;









// how long to wait for observer to collect information about resources
// this is needed as event "load" is called before observer
// hard to say how long it should really wait, seems like 300ms is
// safe enough
var OBSERVER_WAIT_TIME_MS = 300;
var isNode = typeof process === 'object' && ((_a = process.release) === null || _a === void 0 ? void 0 : _a.name) === 'node';
/**
 * This class represents a fetch plugin for auto instrumentation
 */
var FetchInstrumentation = /** @class */ (function (_super) {
    __extends(FetchInstrumentation, _super);
    function FetchInstrumentation(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, '@opentelemetry/instrumentation-fetch', _version__WEBPACK_IMPORTED_MODULE_0__.VERSION, config) || this;
        _this.component = 'fetch';
        _this.version = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION;
        _this.moduleName = _this.component;
        _this._usedResources = new WeakSet();
        _this._tasksCount = 0;
        return _this;
    }
    FetchInstrumentation.prototype.init = function () { };
    /**
     * Add cors pre flight child span
     * @param span
     * @param corsPreFlightRequest
     */
    FetchInstrumentation.prototype._addChildSpan = function (span, corsPreFlightRequest) {
        var childSpan = this.tracer.startSpan('CORS Preflight', {
            startTime: corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.PerformanceTimingNames.FETCH_START],
        }, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), span));
        _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvents(childSpan, corsPreFlightRequest, this.getConfig().ignoreNetworkEvents);
        childSpan.end(corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.PerformanceTimingNames.RESPONSE_END]);
    };
    /**
     * Adds more attributes to span just before ending it
     * @param span
     * @param response
     */
    FetchInstrumentation.prototype._addFinalSpanAttributes = function (span, response) {
        var parsedUrl = _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.parseUrl(response.url);
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_STATUS_CODE, response.status);
        if (response.statusText != null) {
            span.setAttribute(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_6__.AttributeNames.HTTP_STATUS_TEXT, response.statusText);
        }
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_HOST, parsedUrl.host);
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));
        if (typeof navigator !== 'undefined') {
            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_USER_AGENT, navigator.userAgent);
        }
    };
    /**
     * Add headers
     * @param options
     * @param spanUrl
     */
    FetchInstrumentation.prototype._addHeaders = function (options, spanUrl) {
        if (!_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.shouldPropagateTraceHeaders(spanUrl, this.getConfig().propagateTraceHeaderCorsUrls)) {
            var headers = {};
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), headers);
            if (Object.keys(headers).length > 0) {
                this._diag.debug('headers inject skipped due to CORS policy');
            }
            return;
        }
        if (options instanceof Request) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), options.headers, {
                set: function (h, k, v) { return h.set(k, typeof v === 'string' ? v : String(v)); },
            });
        }
        else if (options.headers instanceof Headers) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), options.headers, {
                set: function (h, k, v) { return h.set(k, typeof v === 'string' ? v : String(v)); },
            });
        }
        else if (options.headers instanceof Map) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), options.headers, {
                set: function (h, k, v) { return h.set(k, typeof v === 'string' ? v : String(v)); },
            });
        }
        else {
            var headers = {};
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), headers);
            options.headers = Object.assign({}, headers, options.headers || {});
        }
    };
    /**
     * Clears the resource timings and all resources assigned with spans
     *     when {@link FetchPluginConfig.clearTimingResources} is
     *     set to true (default false)
     * @private
     */
    FetchInstrumentation.prototype._clearResources = function () {
        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {
            performance.clearResourceTimings();
            this._usedResources = new WeakSet();
        }
    };
    /**
     * Creates a new span
     * @param url
     * @param options
     */
    FetchInstrumentation.prototype._createSpan = function (url, options) {
        var _a;
        if (options === void 0) { options = {}; }
        if (_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.isUrlIgnored(url, this.getConfig().ignoreUrls)) {
            this._diag.debug('ignoring span as url matches ignored url');
            return;
        }
        var method = (options.method || 'GET').toUpperCase();
        var spanName = "HTTP " + method;
        return this.tracer.startSpan(spanName, {
            kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SpanKind.CLIENT,
            attributes: (_a = {},
                _a[_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_6__.AttributeNames.COMPONENT] = this.moduleName,
                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_METHOD] = method,
                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_URL] = url,
                _a),
        });
    };
    /**
     * Finds appropriate resource and add network events to the span
     * @param span
     * @param resourcesObserver
     * @param endTime
     */
    FetchInstrumentation.prototype._findResourceAndAddNetworkEvents = function (span, resourcesObserver, endTime) {
        var resources = resourcesObserver.entries;
        if (!resources.length) {
            if (!performance.getEntriesByType) {
                return;
            }
            // fallback - either Observer is not available or it took longer
            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough
            // information
            resources = performance.getEntriesByType('resource');
        }
        var resource = _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.getResource(resourcesObserver.spanUrl, resourcesObserver.startTime, endTime, resources, this._usedResources, 'fetch');
        if (resource.mainRequest) {
            var mainRequest = resource.mainRequest;
            this._markResourceAsUsed(mainRequest);
            var corsPreFlightRequest = resource.corsPreFlightRequest;
            if (corsPreFlightRequest) {
                this._addChildSpan(span, corsPreFlightRequest);
                this._markResourceAsUsed(corsPreFlightRequest);
            }
            _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvents(span, mainRequest, this.getConfig().ignoreNetworkEvents);
        }
    };
    /**
     * Marks certain [resource]{@link PerformanceResourceTiming} when information
     * from this is used to add events to span.
     * This is done to avoid reusing the same resource again for next span
     * @param resource
     */
    FetchInstrumentation.prototype._markResourceAsUsed = function (resource) {
        this._usedResources.add(resource);
    };
    /**
     * Finish span, add attributes, network events etc.
     * @param span
     * @param spanData
     * @param response
     */
    FetchInstrumentation.prototype._endSpan = function (span, spanData, response) {
        var _this = this;
        var endTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__.millisToHrTime(Date.now());
        var performanceEndTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__.hrTime();
        this._addFinalSpanAttributes(span, response);
        setTimeout(function () {
            var _a;
            (_a = spanData.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
            _this._findResourceAndAddNetworkEvents(span, spanData, performanceEndTime);
            _this._tasksCount--;
            _this._clearResources();
            span.end(endTime);
        }, OBSERVER_WAIT_TIME_MS);
    };
    /**
     * Patches the constructor of fetch
     */
    FetchInstrumentation.prototype._patchConstructor = function () {
        var _this = this;
        return function (original) {
            var plugin = _this;
            return function patchConstructor() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var self = this;
                var url = _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.parseUrl(args[0] instanceof Request ? args[0].url : String(args[0])).href;
                var options = args[0] instanceof Request ? args[0] : args[1] || {};
                var createdSpan = plugin._createSpan(url, options);
                if (!createdSpan) {
                    return original.apply(this, args);
                }
                var spanData = plugin._prepareSpanData(url);
                if (plugin.getConfig().measureRequestSize) {
                    _utils__WEBPACK_IMPORTED_MODULE_11__.getFetchBodyLength.apply(void 0, __spreadArray([], __read(args), false)).then(function (length) {
                        if (!length)
                            return;
                        createdSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, length);
                    })
                        .catch(function (error) {
                        plugin._diag.warn('getFetchBodyLength', error);
                    });
                }
                function endSpanOnError(span, error) {
                    plugin._applyAttributesAfterFetch(span, options, error);
                    plugin._endSpan(span, spanData, {
                        status: error.status || 0,
                        statusText: error.message,
                        url: url,
                    });
                }
                function endSpanOnSuccess(span, response) {
                    plugin._applyAttributesAfterFetch(span, options, response);
                    if (response.status >= 200 && response.status < 400) {
                        plugin._endSpan(span, spanData, response);
                    }
                    else {
                        plugin._endSpan(span, spanData, {
                            status: response.status,
                            statusText: response.statusText,
                            url: url,
                        });
                    }
                }
                function onSuccess(span, resolve, response) {
                    try {
                        var resClone = response.clone();
                        var resClone4Hook_1 = response.clone();
                        var body = resClone.body;
                        if (body) {
                            var reader_1 = body.getReader();
                            var read_1 = function () {
                                reader_1.read().then(function (_a) {
                                    var done = _a.done;
                                    if (done) {
                                        endSpanOnSuccess(span, resClone4Hook_1);
                                    }
                                    else {
                                        read_1();
                                    }
                                }, function (error) {
                                    endSpanOnError(span, error);
                                });
                            };
                            read_1();
                        }
                        else {
                            // some older browsers don't have .body implemented
                            endSpanOnSuccess(span, response);
                        }
                    }
                    finally {
                        resolve(response);
                    }
                }
                function onError(span, reject, error) {
                    try {
                        endSpanOnError(span, error);
                    }
                    finally {
                        reject(error);
                    }
                }
                return new Promise(function (resolve, reject) {
                    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), createdSpan), function () {
                        plugin._addHeaders(options, url);
                        plugin._tasksCount++;
                        // TypeScript complains about arrow function captured a this typed as globalThis
                        // ts(7041)
                        return original
                            .apply(self, options instanceof Request ? [options] : [url, options])
                            .then(onSuccess.bind(self, createdSpan, resolve), onError.bind(self, createdSpan, reject));
                    });
                });
            };
        };
    };
    FetchInstrumentation.prototype._applyAttributesAfterFetch = function (span, request, result) {
        var _this = this;
        var applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;
        if (applyCustomAttributesOnSpan) {
            (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__.safeExecuteInTheMiddle)(function () { return applyCustomAttributesOnSpan(span, request, result); }, function (error) {
                if (!error) {
                    return;
                }
                _this._diag.error('applyCustomAttributesOnSpan', error);
            }, true);
        }
    };
    /**
     * Prepares a span data - needed later for matching appropriate network
     *     resources
     * @param spanUrl
     */
    FetchInstrumentation.prototype._prepareSpanData = function (spanUrl) {
        var startTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__.hrTime();
        var entries = [];
        if (typeof PerformanceObserver !== 'function') {
            return { entries: entries, startTime: startTime, spanUrl: spanUrl };
        }
        var observer = new PerformanceObserver(function (list) {
            var perfObsEntries = list.getEntries();
            perfObsEntries.forEach(function (entry) {
                if (entry.initiatorType === 'fetch' && entry.name === spanUrl) {
                    entries.push(entry);
                }
            });
        });
        observer.observe({
            entryTypes: ['resource'],
        });
        return { entries: entries, observer: observer, startTime: startTime, spanUrl: spanUrl };
    };
    /**
     * implements enable function
     */
    FetchInstrumentation.prototype.enable = function () {
        if (isNode) {
            // Node.js v18+ *does* have a global `fetch()`, but this package does not
            // support instrumenting it.
            this._diag.warn("this instrumentation is intended for web usage only, it does not instrument Node.js's fetch()");
            return;
        }
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_12__.isWrapped)(fetch)) {
            this._unwrap(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__._globalThis, 'fetch');
            this._diag.debug('removing previous patch for constructor');
        }
        this._wrap(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__._globalThis, 'fetch', this._patchConstructor());
    };
    /**
     * implements unpatch function
     */
    FetchInstrumentation.prototype.disable = function () {
        if (isNode) {
            return;
        }
        this._unwrap(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__._globalThis, 'fetch');
        this._usedResources = new WeakSet();
    };
    return FetchInstrumentation;
}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_14__.InstrumentationBase));

//# sourceMappingURL=fetch.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/build/esm/utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFetchBodyLength: () => (/* binding */ getFetchBodyLength),
/* harmony export */   getXHRBodyLength: () => (/* binding */ getXHRBodyLength)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-xml-http-request
// These may be unified in the future.

var DIAG_LOGGER = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.createComponentLogger({
    namespace: '@opentelemetry/opentelemetry-instrumentation-fetch/utils',
});
/**
 * Helper function to determine payload content length for fetch requests
 *
 * The fetch API is kinda messy: there are a couple of ways the body can be passed in.
 *
 * In all cases, the body param can be some variation of ReadableStream,
 * and ReadableStreams can only be read once! We want to avoid consuming the body here,
 * because that would mean that the body never gets sent with the actual fetch request.
 *
 * Either the first arg is a Request object, which can be cloned
 *   so we can clone that object and read the body of the clone
 *   without disturbing the original argument
 *   However, reading the body here can only be done async; the body() method returns a promise
 *   this means this entire function has to return a promise
 *
 * OR the first arg is a url/string
 *   in which case the second arg has type RequestInit
 *   RequestInit is NOT cloneable, but RequestInit.body is writable
 *   so we can chain it into ReadableStream.pipeThrough()
 *
 *   ReadableStream.pipeThrough() lets us process a stream and returns a new stream
 *   So we can measure the body length as it passes through the pie, but need to attach
 *   the new stream to the original request
 *   so that the browser still has access to the body.
 *
 * @param body
 * @returns promise that resolves to the content length of the body
 */
function getFetchBodyLength() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args[0] instanceof URL || typeof args[0] === 'string') {
        var requestInit = args[1];
        if (!(requestInit === null || requestInit === void 0 ? void 0 : requestInit.body)) {
            return Promise.resolve();
        }
        if (requestInit.body instanceof ReadableStream) {
            var _a = _getBodyNonDestructively(requestInit.body), body = _a.body, length_1 = _a.length;
            requestInit.body = body;
            return length_1;
        }
        else {
            return Promise.resolve(getXHRBodyLength(requestInit.body));
        }
    }
    else {
        var info = args[0];
        if (!(info === null || info === void 0 ? void 0 : info.body)) {
            return Promise.resolve();
        }
        return info
            .clone()
            .text()
            .then(function (t) { return getByteLength(t); });
    }
}
function _getBodyNonDestructively(body) {
    // can't read a ReadableStream without destroying it
    // but we CAN pipe it through and return a new ReadableStream
    // some (older) platforms don't expose the pipeThrough method and in that scenario, we're out of luck;
    //   there's no way to read the stream without consuming it.
    if (!body.pipeThrough) {
        DIAG_LOGGER.warn('Platform has ReadableStream but not pipeThrough!');
        return {
            body: body,
            length: Promise.resolve(undefined),
        };
    }
    var length = 0;
    var resolveLength;
    var lengthPromise = new Promise(function (resolve) {
        resolveLength = resolve;
    });
    var transform = new TransformStream({
        start: function () { },
        transform: function (chunk, controller) {
            return __awaiter(this, void 0, void 0, function () {
                var bytearray;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, chunk];
                        case 1:
                            bytearray = (_a.sent());
                            length += bytearray.byteLength;
                            controller.enqueue(chunk);
                            return [2 /*return*/];
                    }
                });
            });
        },
        flush: function () {
            resolveLength(length);
        },
    });
    return {
        body: body.pipeThrough(transform),
        length: lengthPromise,
    };
}
/**
 * Helper function to determine payload content length for XHR requests
 * @param body
 * @returns content length
 */
function getXHRBodyLength(body) {
    if (typeof Document !== 'undefined' && body instanceof Document) {
        return new XMLSerializer().serializeToString(document).length;
    }
    // XMLHttpRequestBodyInit expands to the following:
    if (body instanceof Blob) {
        return body.size;
    }
    // ArrayBuffer | ArrayBufferView
    if (body.byteLength !== undefined) {
        return body.byteLength;
    }
    if (body instanceof FormData) {
        return getFormDataSize(body);
    }
    if (body instanceof URLSearchParams) {
        return getByteLength(body.toString());
    }
    if (typeof body === 'string') {
        return getByteLength(body);
    }
    DIAG_LOGGER.warn('unknown body type');
    return undefined;
}
var TEXT_ENCODER = new TextEncoder();
function getByteLength(s) {
    return TEXT_ENCODER.encode(s).byteLength;
}
function getFormDataSize(formData) {
    var e_1, _a;
    var size = 0;
    try {
        for (var _b = __values(formData.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            size += key.length;
            if (value instanceof Blob) {
                size += value.size;
            }
            else {
                size += value.length;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return size;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/build/esm/version.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '0.57.2';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _globalThis: () => (/* binding */ _globalThis)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Updates to this file should also be replicated to @opentelemetry/api too.
/**
 * - globalThis (New standard)
 * - self (Will return the current window instance for supported browsers)
 * - window (fallback for older browser implementations)
 * - global (NodeJS implementation)
 * - <object> (When all else fails)
 */
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
var _globalThis = typeof globalThis === 'object'
    ? globalThis
    : typeof self === 'object'
        ? self
        : typeof window === 'object'
            ? window
            : typeof __webpack_require__.g === 'object'
                ? __webpack_require__.g
                : {};
//# sourceMappingURL=globalThis.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),
/* harmony export */   urlMatches: () => (/* binding */ urlMatches)
/* harmony export */ });
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
    if (typeof urlToMatch === 'string') {
        return url === urlToMatch;
    }
    else {
        return !!url.match(urlToMatch);
    }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */
function isUrlIgnored(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) {
        return false;
    }
    try {
        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {
            var ignoreUrl = ignoredUrls_1_1.value;
            if (urlMatches(url, ignoreUrl)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract = /** @class */ (function () {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */
        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.wrap;
        /* Api to unwrap instrumented methods */
        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.unwrap;
        /* Api to mass wrap instrumented method */
        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massWrap;
        /* Api to mass unwrap instrumented methods */
        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massUnwrap;
        this.setConfig(config);
        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.createComponentLogger({
            namespace: instrumentationName,
        });
        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(instrumentationName, instrumentationVersion);
        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.metrics.getMeter(instrumentationName, instrumentationVersion);
        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__.logs.getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */
        get: function () {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */
    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */
    InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */
    InstrumentationAbstract.prototype.getModuleDefinitions = function () {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) {
            return [initResult];
        }
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */
    InstrumentationAbstract.prototype._updateMetricInstruments = function () {
        return;
    };
    /* Returns InstrumentationConfig */
    InstrumentationAbstract.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */
    InstrumentationAbstract.prototype.setConfig = function (config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = __assign({ enabled: true }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */
    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */
        get: function () {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */
    InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {
        if (!hookHandler) {
            return;
        }
        try {
            hookHandler(span, info);
        }
        catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", { triggerName: triggerName }, e);
        }
    };
    return InstrumentationAbstract;
}());

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase = /** @class */ (function (_super) {
    __extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) {
            _this.enable();
        }
        return _this;
    }
    return InstrumentationBase;
}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isWrapped: () => (/* binding */ isWrapped),
/* harmony export */   safeExecuteInTheMiddle: () => (/* binding */ safeExecuteInTheMiddle),
/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* binding */ safeExecuteInTheMiddleAsync)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    }
    catch (e) {
        error = e;
    }
    finally {
        onFinish(error, result);
        if (error && !preventThrowingError) {
            // eslint-disable-next-line no-unsafe-finally
            throw error;
        }
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
/**
 * Async function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {
    return __awaiter(this, void 0, void 0, function () {
        var error, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    return [4 /*yield*/, execute()];
                case 1:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 4];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) {
                        // eslint-disable-next-line no-unsafe-finally
                        throw error;
                    }
                    // eslint-disable-next-line no-unsafe-finally
                    return [2 /*return*/, result];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Checks if certain function has been already wrapped
 * @param func
 */
function isWrapped(func) {
    return (typeof func === 'function' &&
        typeof func.__original === 'function' &&
        typeof func.__unwrap === 'function' &&
        func.__wrapped === true);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerformanceTimingNames: () => (/* binding */ PerformanceTimingNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
(function (PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (PerformanceTimingNames = {}));
//# sourceMappingURL=PerformanceTimingNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanNetworkEvent: () => (/* binding */ addSpanNetworkEvent),
/* harmony export */   addSpanNetworkEvents: () => (/* binding */ addSpanNetworkEvents),
/* harmony export */   getElementXPath: () => (/* binding */ getElementXPath),
/* harmony export */   getResource: () => (/* binding */ getResource),
/* harmony export */   hasKey: () => (/* binding */ hasKey),
/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),
/* harmony export */   parseUrl: () => (/* binding */ parseUrl),
/* harmony export */   shouldPropagateTraceHeaders: () => (/* binding */ shouldPropagateTraceHeaders),
/* harmony export */   sortResources: () => (/* binding */ sortResources)
/* harmony export */ });
/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-fetch/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Used to normalize relative URLs
var urlNormalizingAnchor;
function getUrlNormalizingAnchor() {
    if (!urlNormalizingAnchor) {
        urlNormalizingAnchor = document.createElement('a');
    }
    return urlNormalizingAnchor;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasKey(obj, key) {
    return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 * @param refPerfName name of performance entry to use for reference
 */
function addSpanNetworkEvent(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if (hasKey(entries, performanceName) &&
        typeof entries[performanceName] === 'number') {
        perfTime = entries[performanceName];
    }
    var refName = refPerfName || _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if (hasKey(entries, refName) && typeof entries[refName] === 'number') {
        refTime = entries[refName];
    }
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
/**
 * Helper function for adding network events and content length attributes
 * @param span
 * @param resource
 * @param ignoreNetworkEvents
 */
function addSpanNetworkEvents(span, resource, ignoreNetworkEvents) {
    if (ignoreNetworkEvents === void 0) { ignoreNetworkEvents = false; }
    if (!ignoreNetworkEvents) {
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);
        if (hasKey(resource, 'name') &&
            resource['name'].startsWith('https:')) {
            addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
        }
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);
    }
    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
    }
    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
    }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */
function sortResources(filteredResources) {
    return filteredResources.slice().sort(function (a, b) {
        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        if (valueA > valueB) {
            return 1;
        }
        else if (valueA < valueB) {
            return -1;
        }
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */
function getOrigin() {
    return typeof location !== 'undefined' ? location.origin : undefined;
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */
function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = parseUrl(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) {
        return {
            mainRequest: undefined,
        };
    }
    if (filteredResources.length === 1) {
        return {
            mainRequest: filteredResources[0],
        };
    }
    var sorted = sortResources(filteredResources);
    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];
        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest,
        };
    }
    else {
        return {
            mainRequest: filteredResources[0],
        };
    }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */
function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(spanEndTimeHR);
    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for (var i = 1; i < length; i++) {
        var resource = resources[i];
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */
function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(startTimeHR);
    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(endTimeHR);
    var filteredResources = resources.filter(function (resource) {
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        return (resource.initiatorType.toLowerCase() ===
            (initiatorType || 'xmlhttprequest') &&
            resource.name === spanUrl &&
            resourceStartTime >= startTime &&
            resourceEndTime <= endTime);
    });
    if (filteredResources.length > 0) {
        filteredResources = filteredResources.filter(function (resource) {
            return !ignoredResources.has(resource);
        });
    }
    return filteredResources;
}
/**
 * Parses url using URL constructor or fallback to anchor element.
 * @param url
 */
function parseUrl(url) {
    if (typeof URL === 'function') {
        return new URL(url, typeof document !== 'undefined'
            ? document.baseURI
            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this
                ? location.href
                : undefined);
    }
    var element = getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
/**
 * Parses url using URL constructor or fallback to anchor element and serialize
 * it to a string.
 *
 * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url
 *
 * @param url
 */
function normalizeUrl(url) {
    var urlLike = parseUrl(url);
    return urlLike.href;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function getElementXPath(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) {
        return '/';
    }
    var targetValue = getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf('@id') > 0) {
        return targetValue;
    }
    var xpath = '';
    if (target.parentNode) {
        xpath += getElementXPath(target.parentNode, false);
    }
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */
function getNodeIndex(target) {
    if (!target.parentNode) {
        return 0;
    }
    var allowedTypes = [target.nodeType];
    if (target.nodeType === Node.CDATA_SECTION_NODE) {
        allowedTypes.push(Node.TEXT_NODE);
    }
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function (element) {
        var localName = element.localName;
        return (allowedTypes.indexOf(element.nodeType) >= 0 &&
            localName === target.localName);
    });
    if (elements.length >= 1) {
        return elements.indexOf(target) + 1; // xpath starts from 1
    }
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */
function getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = getNodeIndex(target);
    var nodeValue = '';
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute('id');
        if (optimised && id) {
            return "//*[@id=\"" + id + "\"]";
        }
        nodeValue = target.localName;
    }
    else if (nodeType === Node.TEXT_NODE ||
        nodeType === Node.CDATA_SECTION_NODE) {
        nodeValue = 'text()';
    }
    else if (nodeType === Node.COMMENT_NODE) {
        nodeValue = 'comment()';
    }
    else {
        return '';
    }
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) {
        return "/" + nodeValue + "[" + index + "]";
    }
    return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */
function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === 'string' ||
        propagateTraceHeaderUrls instanceof RegExp) {
        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
    }
    var parsedSpanUrl = parseUrl(spanUrl);
    if (parsedSpanUrl.origin === getOrigin()) {
        return true;
    }
    else {
        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.urlMatches)(spanUrl, propagateTraceHeaderUrl);
        });
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AttributeNames: () => (/* binding */ AttributeNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md
 */
var AttributeNames;
(function (AttributeNames) {
    AttributeNames["HTTP_STATUS_TEXT"] = "http.status_text";
})(AttributeNames || (AttributeNames = {}));
//# sourceMappingURL=AttributeNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventNames: () => (/* binding */ EventNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var EventNames;
(function (EventNames) {
    EventNames["METHOD_OPEN"] = "open";
    EventNames["METHOD_SEND"] = "send";
    EventNames["EVENT_ABORT"] = "abort";
    EventNames["EVENT_ERROR"] = "error";
    EventNames["EVENT_LOAD"] = "loaded";
    EventNames["EVENT_TIMEOUT"] = "timeout";
})(EventNames || (EventNames = {}));
//# sourceMappingURL=EventNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getXHRBodyLength: () => (/* binding */ getXHRBodyLength)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
// Much of the logic here overlaps with the same utils file in opentelemetry-instrumentation-fetch
// These may be unified in the future.

var DIAG_LOGGER = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.createComponentLogger({
    namespace: '@opentelemetry/opentelemetry-instrumentation-xml-http-request/utils',
});
/**
 * Helper function to determine payload content length for XHR requests
 * @param body
 * @returns content length
 */
function getXHRBodyLength(body) {
    if (typeof Document !== 'undefined' && body instanceof Document) {
        return new XMLSerializer().serializeToString(document).length;
    }
    // XMLHttpRequestBodyInit expands to the following:
    if (body instanceof Blob) {
        return body.size;
    }
    // ArrayBuffer | ArrayBufferView
    if (body.byteLength !== undefined) {
        return body.byteLength;
    }
    if (body instanceof FormData) {
        return getFormDataSize(body);
    }
    if (body instanceof URLSearchParams) {
        return getByteLength(body.toString());
    }
    if (typeof body === 'string') {
        return getByteLength(body);
    }
    DIAG_LOGGER.warn('unknown body type');
    return undefined;
}
var TEXT_ENCODER = new TextEncoder();
function getByteLength(s) {
    return TEXT_ENCODER.encode(s).byteLength;
}
function getFormDataSize(formData) {
    var e_1, _a;
    var size = 0;
    try {
        for (var _b = __values(formData.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
            size += key.length;
            if (value instanceof Blob) {
                size += value.size;
            }
            else {
                size += value.length;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return size;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '0.57.2';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XMLHttpRequestInstrumentation: () => (/* binding */ XMLHttpRequestInstrumentation)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/context-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/utils.js");
/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/instrumentation */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js");
/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _enums_EventNames__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./enums/EventNames */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/utils.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js");
/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums/AttributeNames */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









// how long to wait for observer to collect information about resources
// this is needed as event "load" is called before observer
// hard to say how long it should really wait, seems like 300ms is
// safe enough
var OBSERVER_WAIT_TIME_MS = 300;
/**
 * This class represents a XMLHttpRequest plugin for auto instrumentation
 */
var XMLHttpRequestInstrumentation = /** @class */ (function (_super) {
    __extends(XMLHttpRequestInstrumentation, _super);
    function XMLHttpRequestInstrumentation(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, '@opentelemetry/instrumentation-xml-http-request', _version__WEBPACK_IMPORTED_MODULE_0__.VERSION, config) || this;
        _this.component = 'xml-http-request';
        _this.version = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION;
        _this.moduleName = _this.component;
        _this._tasksCount = 0;
        _this._xhrMem = new WeakMap();
        _this._usedResources = new WeakSet();
        return _this;
    }
    XMLHttpRequestInstrumentation.prototype.init = function () { };
    /**
     * Adds custom headers to XMLHttpRequest
     * @param xhr
     * @param spanUrl
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._addHeaders = function (xhr, spanUrl) {
        var url = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(spanUrl).href;
        if (!(0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.shouldPropagateTraceHeaders)(url, this.getConfig().propagateTraceHeaderCorsUrls)) {
            var headers_1 = {};
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), headers_1);
            if (Object.keys(headers_1).length > 0) {
                this._diag.debug('headers inject skipped due to CORS policy');
            }
            return;
        }
        var headers = {};
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), headers);
        Object.keys(headers).forEach(function (key) {
            xhr.setRequestHeader(key, String(headers[key]));
        });
    };
    /**
     * Add cors pre flight child span
     * @param span
     * @param corsPreFlightRequest
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._addChildSpan = function (span, corsPreFlightRequest) {
        var _this = this;
        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), span), function () {
            var childSpan = _this.tracer.startSpan('CORS Preflight', {
                startTime: corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_5__.PerformanceTimingNames.FETCH_START],
            });
            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.addSpanNetworkEvents)(childSpan, corsPreFlightRequest, _this.getConfig().ignoreNetworkEvents);
            childSpan.end(corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_5__.PerformanceTimingNames.RESPONSE_END]);
        });
    };
    /**
     * Add attributes when span is going to end
     * @param span
     * @param xhr
     * @param spanUrl
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._addFinalSpanAttributes = function (span, xhrMem, spanUrl) {
        if (typeof spanUrl === 'string') {
            var parsedUrl = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(spanUrl);
            if (xhrMem.status !== undefined) {
                span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_STATUS_CODE, xhrMem.status);
            }
            if (xhrMem.statusText !== undefined) {
                span.setAttribute(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_7__.AttributeNames.HTTP_STATUS_TEXT, xhrMem.statusText);
            }
            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_HOST, parsedUrl.host);
            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));
            // @TODO do we want to collect this or it will be collected earlier once only or
            //    maybe when parent span is not available ?
            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_USER_AGENT, navigator.userAgent);
        }
    };
    XMLHttpRequestInstrumentation.prototype._applyAttributesAfterXHR = function (span, xhr) {
        var _this = this;
        var applyCustomAttributesOnSpan = this.getConfig().applyCustomAttributesOnSpan;
        if (typeof applyCustomAttributesOnSpan === 'function') {
            (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_8__.safeExecuteInTheMiddle)(function () { return applyCustomAttributesOnSpan(span, xhr); }, function (error) {
                if (!error) {
                    return;
                }
                _this._diag.error('applyCustomAttributesOnSpan', error);
            }, true);
        }
    };
    /**
     * will collect information about all resources created
     * between "send" and "end" with additional waiting for main resource
     * @param xhr
     * @param spanUrl
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._addResourceObserver = function (xhr, spanUrl) {
        var xhrMem = this._xhrMem.get(xhr);
        if (!xhrMem ||
            typeof PerformanceObserver !== 'function' ||
            typeof PerformanceResourceTiming !== 'function') {
            return;
        }
        xhrMem.createdResources = {
            observer: new PerformanceObserver(function (list) {
                var entries = list.getEntries();
                var parsedUrl = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(spanUrl);
                entries.forEach(function (entry) {
                    if (entry.initiatorType === 'xmlhttprequest' &&
                        entry.name === parsedUrl.href) {
                        if (xhrMem.createdResources) {
                            xhrMem.createdResources.entries.push(entry);
                        }
                    }
                });
            }),
            entries: [],
        };
        xhrMem.createdResources.observer.observe({
            entryTypes: ['resource'],
        });
    };
    /**
     * Clears the resource timings and all resources assigned with spans
     *     when {@link XMLHttpRequestInstrumentationConfig.clearTimingResources} is
     *     set to true (default false)
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._clearResources = function () {
        if (this._tasksCount === 0 && this.getConfig().clearTimingResources) {
            _opentelemetry_core__WEBPACK_IMPORTED_MODULE_9__.otperformance.clearResourceTimings();
            this._xhrMem = new WeakMap();
            this._usedResources = new WeakSet();
        }
    };
    /**
     * Finds appropriate resource and add network events to the span
     * @param span
     */
    XMLHttpRequestInstrumentation.prototype._findResourceAndAddNetworkEvents = function (xhrMem, span, spanUrl, startTime, endTime) {
        if (!spanUrl || !startTime || !endTime || !xhrMem.createdResources) {
            return;
        }
        var resources = xhrMem.createdResources.entries;
        if (!resources || !resources.length) {
            // fallback - either Observer is not available or it took longer
            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough
            // information
            // ts thinks this is the perf_hooks module, but it is the browser performance api
            resources = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_9__.otperformance.getEntriesByType('resource');
        }
        var resource = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.getResource)((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(spanUrl).href, startTime, endTime, resources, this._usedResources);
        if (resource.mainRequest) {
            var mainRequest = resource.mainRequest;
            this._markResourceAsUsed(mainRequest);
            var corsPreFlightRequest = resource.corsPreFlightRequest;
            if (corsPreFlightRequest) {
                this._addChildSpan(span, corsPreFlightRequest);
                this._markResourceAsUsed(corsPreFlightRequest);
            }
            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.addSpanNetworkEvents)(span, mainRequest, this.getConfig().ignoreNetworkEvents);
        }
    };
    /**
     * Removes the previous information about span.
     * This might happened when the same xhr is used again.
     * @param xhr
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._cleanPreviousSpanInformation = function (xhr) {
        var xhrMem = this._xhrMem.get(xhr);
        if (xhrMem) {
            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;
            if (callbackToRemoveEvents) {
                callbackToRemoveEvents();
            }
            this._xhrMem.delete(xhr);
        }
    };
    /**
     * Creates a new span when method "open" is called
     * @param xhr
     * @param url
     * @param method
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._createSpan = function (xhr, url, method) {
        var _a;
        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__.isUrlIgnored)(url, this.getConfig().ignoreUrls)) {
            this._diag.debug('ignoring span as url matches ignored url');
            return;
        }
        var spanName = method.toUpperCase();
        var currentSpan = this.tracer.startSpan(spanName, {
            kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.SpanKind.CLIENT,
            attributes: (_a = {},
                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_METHOD] = method,
                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_URL] = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(url).toString(),
                _a),
        });
        currentSpan.addEvent(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.METHOD_OPEN);
        this._cleanPreviousSpanInformation(xhr);
        this._xhrMem.set(xhr, {
            span: currentSpan,
            spanUrl: url,
        });
        return currentSpan;
    };
    /**
     * Marks certain [resource]{@link PerformanceResourceTiming} when information
     * from this is used to add events to span.
     * This is done to avoid reusing the same resource again for next span
     * @param resource
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._markResourceAsUsed = function (resource) {
        this._usedResources.add(resource);
    };
    /**
     * Patches the method open
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._patchOpen = function () {
        var _this = this;
        return function (original) {
            var plugin = _this;
            return function patchOpen() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var method = args[0];
                var url = args[1];
                plugin._createSpan(this, url, method);
                return original.apply(this, args);
            };
        };
    };
    /**
     * Patches the method send
     * @private
     */
    XMLHttpRequestInstrumentation.prototype._patchSend = function () {
        var plugin = this;
        function endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime) {
            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;
            if (typeof callbackToRemoveEvents === 'function') {
                callbackToRemoveEvents();
            }
            var span = xhrMem.span, spanUrl = xhrMem.spanUrl, sendStartTime = xhrMem.sendStartTime;
            if (span) {
                plugin._findResourceAndAddNetworkEvents(xhrMem, span, spanUrl, sendStartTime, performanceEndTime);
                span.addEvent(eventName, endTime);
                plugin._addFinalSpanAttributes(span, xhrMem, spanUrl);
                span.end(endTime);
                plugin._tasksCount--;
            }
            plugin._clearResources();
        }
        function endSpan(eventName, xhr) {
            var xhrMem = plugin._xhrMem.get(xhr);
            if (!xhrMem) {
                return;
            }
            xhrMem.status = xhr.status;
            xhrMem.statusText = xhr.statusText;
            plugin._xhrMem.delete(xhr);
            if (xhrMem.span) {
                plugin._applyAttributesAfterXHR(xhrMem.span, xhr);
            }
            var performanceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__.hrTime)();
            var endTime = Date.now();
            // the timeout is needed as observer doesn't have yet information
            // when event "load" is called. Also the time may differ depends on
            // browser and speed of computer
            setTimeout(function () {
                endSpanTimeout(eventName, xhrMem, performanceEndTime, endTime);
            }, OBSERVER_WAIT_TIME_MS);
        }
        function onError() {
            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.EVENT_ERROR, this);
        }
        function onAbort() {
            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.EVENT_ABORT, this);
        }
        function onTimeout() {
            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.EVENT_TIMEOUT, this);
        }
        function onLoad() {
            if (this.status < 299) {
                endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.EVENT_LOAD, this);
            }
            else {
                endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.EVENT_ERROR, this);
            }
        }
        function unregister(xhr) {
            xhr.removeEventListener('abort', onAbort);
            xhr.removeEventListener('error', onError);
            xhr.removeEventListener('load', onLoad);
            xhr.removeEventListener('timeout', onTimeout);
            var xhrMem = plugin._xhrMem.get(xhr);
            if (xhrMem) {
                xhrMem.callbackToRemoveEvents = undefined;
            }
        }
        return function (original) {
            return function patchSend() {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var xhrMem = plugin._xhrMem.get(this);
                if (!xhrMem) {
                    return original.apply(this, args);
                }
                var currentSpan = xhrMem.span;
                var spanUrl = xhrMem.spanUrl;
                if (currentSpan && spanUrl) {
                    if (plugin.getConfig().measureRequestSize && (args === null || args === void 0 ? void 0 : args[0])) {
                        var body = args[0];
                        var bodyLength = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getXHRBodyLength)(body);
                        if (bodyLength !== undefined) {
                            currentSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, bodyLength);
                        }
                    }
                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.with(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.context.active(), currentSpan), function () {
                        plugin._tasksCount++;
                        xhrMem.sendStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__.hrTime)();
                        currentSpan.addEvent(_enums_EventNames__WEBPACK_IMPORTED_MODULE_12__.EventNames.METHOD_SEND);
                        _this.addEventListener('abort', onAbort);
                        _this.addEventListener('error', onError);
                        _this.addEventListener('load', onLoad);
                        _this.addEventListener('timeout', onTimeout);
                        xhrMem.callbackToRemoveEvents = function () {
                            unregister(_this);
                            if (xhrMem.createdResources) {
                                xhrMem.createdResources.observer.disconnect();
                            }
                        };
                        plugin._addHeaders(_this, spanUrl);
                        plugin._addResourceObserver(_this, spanUrl);
                    });
                }
                return original.apply(this, args);
            };
        };
    };
    /**
     * implements enable function
     */
    XMLHttpRequestInstrumentation.prototype.enable = function () {
        this._diag.debug('applying patch to', this.moduleName, this.version);
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_8__.isWrapped)(XMLHttpRequest.prototype.open)) {
            this._unwrap(XMLHttpRequest.prototype, 'open');
            this._diag.debug('removing previous patch from method open');
        }
        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_8__.isWrapped)(XMLHttpRequest.prototype.send)) {
            this._unwrap(XMLHttpRequest.prototype, 'send');
            this._diag.debug('removing previous patch from method send');
        }
        this._wrap(XMLHttpRequest.prototype, 'open', this._patchOpen());
        this._wrap(XMLHttpRequest.prototype, 'send', this._patchSend());
    };
    /**
     * implements disable function
     */
    XMLHttpRequestInstrumentation.prototype.disable = function () {
        this._diag.debug('removing patch from', this.moduleName, this.version);
        this._unwrap(XMLHttpRequest.prototype, 'open');
        this._unwrap(XMLHttpRequest.prototype, 'send');
        this._tasksCount = 0;
        this._xhrMem = new WeakMap();
        this._usedResources = new WeakSet();
    };
    return XMLHttpRequestInstrumentation;
}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_15__.InstrumentationBase));

//# sourceMappingURL=xhr.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),
/* harmony export */   urlMatches: () => (/* binding */ urlMatches)
/* harmony export */ });
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function urlMatches(url, urlToMatch) {
    if (typeof urlToMatch === 'string') {
        return url === urlToMatch;
    }
    else {
        return !!url.match(urlToMatch);
    }
}
/**
 * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}
 * @param url
 * @param ignoredUrls
 */
function isUrlIgnored(url, ignoredUrls) {
    var e_1, _a;
    if (!ignoredUrls) {
        return false;
    }
    try {
        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {
            var ignoreUrl = ignoredUrls_1_1.value;
            if (urlMatches(url, ignoreUrl)) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationAbstract: () => (/* binding */ InstrumentationAbstract)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/trace-api.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js");
/* harmony import */ var _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api-logs */ "./node_modules/@opentelemetry/api-logs/build/esm/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shimmer */ "./node_modules/shimmer/index.js");
/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_0__);
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



/**
 * Base abstract internal class for instrumenting node and web plugins
 */
var InstrumentationAbstract = /** @class */ (function () {
    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {
        this.instrumentationName = instrumentationName;
        this.instrumentationVersion = instrumentationVersion;
        this._config = {};
        /* Api to wrap instrumented method */
        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.wrap;
        /* Api to unwrap instrumented methods */
        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.unwrap;
        /* Api to mass wrap instrumented method */
        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massWrap;
        /* Api to mass unwrap instrumented methods */
        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_0__.massUnwrap;
        this.setConfig(config);
        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.createComponentLogger({
            namespace: instrumentationName,
        });
        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.trace.getTracer(instrumentationName, instrumentationVersion);
        this._meter = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.metrics.getMeter(instrumentationName, instrumentationVersion);
        this._logger = _opentelemetry_api_logs__WEBPACK_IMPORTED_MODULE_4__.logs.getLogger(instrumentationName, instrumentationVersion);
        this._updateMetricInstruments();
    }
    Object.defineProperty(InstrumentationAbstract.prototype, "meter", {
        /* Returns meter */
        get: function () {
            return this._meter;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets MeterProvider to this plugin
     * @param meterProvider
     */
    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {
        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);
        this._updateMetricInstruments();
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "logger", {
        /* Returns logger */
        get: function () {
            return this._logger;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets LoggerProvider to this plugin
     * @param loggerProvider
     */
    InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {
        this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);
    };
    /**
     * @experimental
     *
     * Get module definitions defined by {@link init}.
     * This can be used for experimental compile-time instrumentation.
     *
     * @returns an array of {@link InstrumentationModuleDefinition}
     */
    InstrumentationAbstract.prototype.getModuleDefinitions = function () {
        var _a;
        var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];
        if (!Array.isArray(initResult)) {
            return [initResult];
        }
        return initResult;
    };
    /**
     * Sets the new metric instruments with the current Meter.
     */
    InstrumentationAbstract.prototype._updateMetricInstruments = function () {
        return;
    };
    /* Returns InstrumentationConfig */
    InstrumentationAbstract.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Sets InstrumentationConfig to this plugin
     * @param config
     */
    InstrumentationAbstract.prototype.setConfig = function (config) {
        // copy config first level properties to ensure they are immutable.
        // nested properties are not copied, thus are mutable from the outside.
        this._config = __assign({ enabled: true }, config);
    };
    /**
     * Sets TraceProvider to this plugin
     * @param tracerProvider
     */
    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {
        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);
    };
    Object.defineProperty(InstrumentationAbstract.prototype, "tracer", {
        /* Returns tracer */
        get: function () {
            return this._tracer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Execute span customization hook, if configured, and log any errors.
     * Any semantics of the trigger and info are defined by the specific instrumentation.
     * @param hookHandler The optional hook handler which the user has configured via instrumentation config
     * @param triggerName The name of the trigger for executing the hook for logging purposes
     * @param span The span to which the hook should be applied
     * @param info The info object to be passed to the hook, with useful data the hook may use
     */
    InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {
        if (!hookHandler) {
            return;
        }
        try {
            hookHandler(span, info);
        }
        catch (e) {
            this._diag.error("Error running span customization hook due to exception in handler", { triggerName: triggerName }, e);
        }
    };
    return InstrumentationAbstract;
}());

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstrumentationBase: () => (/* binding */ InstrumentationBase)
/* harmony export */ });
/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Base abstract class for instrumenting web plugins
 */
var InstrumentationBase = /** @class */ (function (_super) {
    __extends(InstrumentationBase, _super);
    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {
        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;
        if (_this._config.enabled) {
            _this.enable();
        }
        return _this;
    }
    return InstrumentationBase;
}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));

//# sourceMappingURL=instrumentation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isWrapped: () => (/* binding */ isWrapped),
/* harmony export */   safeExecuteInTheMiddle: () => (/* binding */ safeExecuteInTheMiddle),
/* harmony export */   safeExecuteInTheMiddleAsync: () => (/* binding */ safeExecuteInTheMiddleAsync)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {
    var error;
    var result;
    try {
        result = execute();
    }
    catch (e) {
        error = e;
    }
    finally {
        onFinish(error, result);
        if (error && !preventThrowingError) {
            // eslint-disable-next-line no-unsafe-finally
            throw error;
        }
        // eslint-disable-next-line no-unsafe-finally
        return result;
    }
}
/**
 * Async function to execute patched function and being able to catch errors
 * @param execute - function to be executed
 * @param onFinish - callback to run when execute finishes
 */
function safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {
    return __awaiter(this, void 0, void 0, function () {
        var error, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    return [4 /*yield*/, execute()];
                case 1:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    error = e_1;
                    return [3 /*break*/, 4];
                case 3:
                    onFinish(error, result);
                    if (error && !preventThrowingError) {
                        // eslint-disable-next-line no-unsafe-finally
                        throw error;
                    }
                    // eslint-disable-next-line no-unsafe-finally
                    return [2 /*return*/, result];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Checks if certain function has been already wrapped
 * @param func
 */
function isWrapped(func) {
    return (typeof func === 'function' &&
        typeof func.__original === 'function' &&
        typeof func.__unwrap === 'function' &&
        func.__wrapped === true);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PerformanceTimingNames: () => (/* binding */ PerformanceTimingNames)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PerformanceTimingNames;
(function (PerformanceTimingNames) {
    PerformanceTimingNames["CONNECT_END"] = "connectEnd";
    PerformanceTimingNames["CONNECT_START"] = "connectStart";
    PerformanceTimingNames["DECODED_BODY_SIZE"] = "decodedBodySize";
    PerformanceTimingNames["DOM_COMPLETE"] = "domComplete";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_END"] = "domContentLoadedEventEnd";
    PerformanceTimingNames["DOM_CONTENT_LOADED_EVENT_START"] = "domContentLoadedEventStart";
    PerformanceTimingNames["DOM_INTERACTIVE"] = "domInteractive";
    PerformanceTimingNames["DOMAIN_LOOKUP_END"] = "domainLookupEnd";
    PerformanceTimingNames["DOMAIN_LOOKUP_START"] = "domainLookupStart";
    PerformanceTimingNames["ENCODED_BODY_SIZE"] = "encodedBodySize";
    PerformanceTimingNames["FETCH_START"] = "fetchStart";
    PerformanceTimingNames["LOAD_EVENT_END"] = "loadEventEnd";
    PerformanceTimingNames["LOAD_EVENT_START"] = "loadEventStart";
    PerformanceTimingNames["NAVIGATION_START"] = "navigationStart";
    PerformanceTimingNames["REDIRECT_END"] = "redirectEnd";
    PerformanceTimingNames["REDIRECT_START"] = "redirectStart";
    PerformanceTimingNames["REQUEST_START"] = "requestStart";
    PerformanceTimingNames["RESPONSE_END"] = "responseEnd";
    PerformanceTimingNames["RESPONSE_START"] = "responseStart";
    PerformanceTimingNames["SECURE_CONNECTION_START"] = "secureConnectionStart";
    PerformanceTimingNames["UNLOAD_EVENT_END"] = "unloadEventEnd";
    PerformanceTimingNames["UNLOAD_EVENT_START"] = "unloadEventStart";
})(PerformanceTimingNames || (PerformanceTimingNames = {}));
//# sourceMappingURL=PerformanceTimingNames.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addSpanNetworkEvent: () => (/* binding */ addSpanNetworkEvent),
/* harmony export */   addSpanNetworkEvents: () => (/* binding */ addSpanNetworkEvents),
/* harmony export */   getElementXPath: () => (/* binding */ getElementXPath),
/* harmony export */   getResource: () => (/* binding */ getResource),
/* harmony export */   hasKey: () => (/* binding */ hasKey),
/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),
/* harmony export */   parseUrl: () => (/* binding */ parseUrl),
/* harmony export */   shouldPropagateTraceHeaders: () => (/* binding */ shouldPropagateTraceHeaders),
/* harmony export */   sortResources: () => (/* binding */ sortResources)
/* harmony export */ });
/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/instrumentation-xml-http-request/node_modules/@opentelemetry/core/build/esm/utils/url.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



// Used to normalize relative URLs
var urlNormalizingAnchor;
function getUrlNormalizingAnchor() {
    if (!urlNormalizingAnchor) {
        urlNormalizingAnchor = document.createElement('a');
    }
    return urlNormalizingAnchor;
}
/**
 * Helper function to be able to use enum as typed key in type and in interface when using forEach
 * @param obj
 * @param key
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function hasKey(obj, key) {
    return key in obj;
}
/**
 * Helper function for starting an event on span based on {@link PerformanceEntries}
 * @param span
 * @param performanceName name of performance entry for time start
 * @param entries
 * @param refPerfName name of performance entry to use for reference
 */
function addSpanNetworkEvent(span, performanceName, entries, refPerfName) {
    var perfTime = undefined;
    var refTime = undefined;
    if (hasKey(entries, performanceName) &&
        typeof entries[performanceName] === 'number') {
        perfTime = entries[performanceName];
    }
    var refName = refPerfName || _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START;
    // Use a reference time which is the earliest possible value so that the performance timings that are earlier should not be added
    // using FETCH START time in case no reference is provided
    if (hasKey(entries, refName) && typeof entries[refName] === 'number') {
        refTime = entries[refName];
    }
    if (perfTime !== undefined && refTime !== undefined && perfTime >= refTime) {
        span.addEvent(performanceName, perfTime);
        return span;
    }
    return undefined;
}
/**
 * Helper function for adding network events and content length attributes
 * @param span
 * @param resource
 * @param ignoreNetworkEvents
 */
function addSpanNetworkEvents(span, resource, ignoreNetworkEvents) {
    if (ignoreNetworkEvents === void 0) { ignoreNetworkEvents = false; }
    if (!ignoreNetworkEvents) {
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);
        if (hasKey(resource, 'name') &&
            resource['name'].startsWith('https:')) {
            addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);
        }
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);
        addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);
    }
    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];
    if (encodedLength !== undefined) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);
    }
    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];
    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)
    if (decodedLength !== undefined && encodedLength !== decodedLength) {
        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);
    }
}
/**
 * sort resources by startTime
 * @param filteredResources
 */
function sortResources(filteredResources) {
    return filteredResources.slice().sort(function (a, b) {
        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        if (valueA > valueB) {
            return 1;
        }
        else if (valueA < valueB) {
            return -1;
        }
        return 0;
    });
}
/** Returns the origin if present (if in browser context). */
function getOrigin() {
    return typeof location !== 'undefined' ? location.origin : undefined;
}
/**
 * Get closest performance resource ignoring the resources that have been
 * already used.
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 * @param initiatorType
 */
function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }
    // de-relativize the URL before usage (does no harm to absolute URLs)
    var parsedSpanUrl = parseUrl(spanUrl);
    spanUrl = parsedSpanUrl.toString();
    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);
    if (filteredResources.length === 0) {
        return {
            mainRequest: undefined,
        };
    }
    if (filteredResources.length === 1) {
        return {
            mainRequest: filteredResources[0],
        };
    }
    var sorted = sortResources(filteredResources);
    if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {
        var corsPreFlightRequest = sorted[0];
        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);
        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];
        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];
        // no corsPreFlightRequest
        if (fetchStart < responseEnd) {
            mainRequest = corsPreFlightRequest;
            corsPreFlightRequest = undefined;
        }
        return {
            corsPreFlightRequest: corsPreFlightRequest,
            mainRequest: mainRequest,
        };
    }
    else {
        return {
            mainRequest: filteredResources[0],
        };
    }
}
/**
 * Will find the main request skipping the cors pre flight requests
 * @param resources
 * @param corsPreFlightRequestEndTime
 * @param spanEndTimeHR
 */
function findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {
    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(spanEndTimeHR);
    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(corsPreFlightRequestEndTime));
    var mainRequest = resources[1];
    var bestGap;
    var length = resources.length;
    for (var i = 1; i < length; i++) {
        var resource = resources[i];
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        var currentGap = spanEndTime - resourceEndTime;
        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {
            bestGap = currentGap;
            mainRequest = resource;
        }
    }
    return mainRequest;
}
/**
 * Filter all resources that has started and finished according to span start time and end time.
 *     It will return the closest resource to a start time
 * @param spanUrl
 * @param startTimeHR
 * @param endTimeHR
 * @param resources
 * @param ignoredResources
 */
function filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {
    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(startTimeHR);
    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)(endTimeHR);
    var filteredResources = resources.filter(function (resource) {
        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));
        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));
        return (resource.initiatorType.toLowerCase() ===
            (initiatorType || 'xmlhttprequest') &&
            resource.name === spanUrl &&
            resourceStartTime >= startTime &&
            resourceEndTime <= endTime);
    });
    if (filteredResources.length > 0) {
        filteredResources = filteredResources.filter(function (resource) {
            return !ignoredResources.has(resource);
        });
    }
    return filteredResources;
}
/**
 * Parses url using URL constructor or fallback to anchor element.
 * @param url
 */
function parseUrl(url) {
    if (typeof URL === 'function') {
        return new URL(url, typeof document !== 'undefined'
            ? document.baseURI
            : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this
                ? location.href
                : undefined);
    }
    var element = getUrlNormalizingAnchor();
    element.href = url;
    return element;
}
/**
 * Parses url using URL constructor or fallback to anchor element and serialize
 * it to a string.
 *
 * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url
 *
 * @param url
 */
function normalizeUrl(url) {
    var urlLike = parseUrl(url);
    return urlLike.href;
}
/**
 * Get element XPath
 * @param target - target element
 * @param optimised - when id attribute of element is present the xpath can be
 * simplified to contain id
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function getElementXPath(target, optimised) {
    if (target.nodeType === Node.DOCUMENT_NODE) {
        return '/';
    }
    var targetValue = getNodeValue(target, optimised);
    if (optimised && targetValue.indexOf('@id') > 0) {
        return targetValue;
    }
    var xpath = '';
    if (target.parentNode) {
        xpath += getElementXPath(target.parentNode, false);
    }
    xpath += targetValue;
    return xpath;
}
/**
 * get node index within the siblings
 * @param target
 */
function getNodeIndex(target) {
    if (!target.parentNode) {
        return 0;
    }
    var allowedTypes = [target.nodeType];
    if (target.nodeType === Node.CDATA_SECTION_NODE) {
        allowedTypes.push(Node.TEXT_NODE);
    }
    var elements = Array.from(target.parentNode.childNodes);
    elements = elements.filter(function (element) {
        var localName = element.localName;
        return (allowedTypes.indexOf(element.nodeType) >= 0 &&
            localName === target.localName);
    });
    if (elements.length >= 1) {
        return elements.indexOf(target) + 1; // xpath starts from 1
    }
    // if there are no other similar child xpath doesn't need index
    return 0;
}
/**
 * get node value for xpath
 * @param target
 * @param optimised
 */
function getNodeValue(target, optimised) {
    var nodeType = target.nodeType;
    var index = getNodeIndex(target);
    var nodeValue = '';
    if (nodeType === Node.ELEMENT_NODE) {
        var id = target.getAttribute('id');
        if (optimised && id) {
            return "//*[@id=\"" + id + "\"]";
        }
        nodeValue = target.localName;
    }
    else if (nodeType === Node.TEXT_NODE ||
        nodeType === Node.CDATA_SECTION_NODE) {
        nodeValue = 'text()';
    }
    else if (nodeType === Node.COMMENT_NODE) {
        nodeValue = 'comment()';
    }
    else {
        return '';
    }
    // if index is 1 it can be omitted in xpath
    if (nodeValue && index > 1) {
        return "/" + nodeValue + "[" + index + "]";
    }
    return "/" + nodeValue;
}
/**
 * Checks if trace headers should be propagated
 * @param spanUrl
 * @private
 */
function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {
    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];
    if (typeof propagateTraceHeaderUrls === 'string' ||
        propagateTraceHeaderUrls instanceof RegExp) {
        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];
    }
    var parsedSpanUrl = parseUrl(spanUrl);
    if (parsedSpanUrl.origin === getOrigin()) {
        return true;
    }
    else {
        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {
            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.urlMatches)(spanUrl, propagateTraceHeaderUrl);
        });
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/BrowserDetector.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/BrowserDetector.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   browserDetector: () => (/* binding */ browserDetector)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/resources */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/Resource.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/types.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



/**
 * BrowserDetector will be used to detect the resources related to browser.
 */
var BrowserDetector = /** @class */ (function () {
    function BrowserDetector() {
    }
    BrowserDetector.prototype.detect = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var isBrowser, browserResource;
            return __generator(this, function (_a) {
                isBrowser = typeof navigator !== 'undefined';
                if (!isBrowser) {
                    return [2 /*return*/, _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_1__.Resource.empty()];
                }
                browserResource = getBrowserAttributes();
                return [2 /*return*/, this._getResourceAttributes(browserResource, config)];
            });
        });
    };
    /**
     * Validates browser resource attribute map from browser variables
     *
     * @param browserResource The un-sanitized resource attributes from browser as key/value pairs.
     * @param config: Config
     * @returns The sanitized resource attributes.
     */
    BrowserDetector.prototype._getResourceAttributes = function (browserResource, _config) {
        if (!browserResource[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.USER_AGENT] &&
            !browserResource[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.PLATFORM]) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('BrowserDetector failed: Unable to find required browser resources. ');
            return _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_1__.Resource.empty();
        }
        else {
            return new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_1__.Resource(browserResource);
        }
    };
    return BrowserDetector;
}());
// Add Browser related attributes to resources
function getBrowserAttributes() {
    var browserAttribs = {};
    var userAgentData = navigator
        .userAgentData;
    if (userAgentData) {
        browserAttribs[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.PLATFORM] = userAgentData.platform;
        browserAttribs[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.BRANDS] = userAgentData.brands.map(function (b) { return b.brand + " " + b.version; });
        browserAttribs[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.MOBILE] = userAgentData.mobile;
    }
    else {
        browserAttribs[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.USER_AGENT] = navigator.userAgent;
    }
    browserAttribs[_types__WEBPACK_IMPORTED_MODULE_0__.BROWSER_ATTRIBUTES.LANGUAGE] = navigator.language;
    return browserAttribs;
}
var browserDetector = new BrowserDetector();
//# sourceMappingURL=BrowserDetector.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   browserDetector: () => (/* reexport safe */ _BrowserDetector__WEBPACK_IMPORTED_MODULE_0__.browserDetector)
/* harmony export */ });
/* harmony import */ var _BrowserDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserDetector */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/BrowserDetector.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/types.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/build/esm/types.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BROWSER_ATTRIBUTES: () => (/* binding */ BROWSER_ATTRIBUTES)
/* harmony export */ });
var BROWSER_ATTRIBUTES = {
    PLATFORM: 'browser.platform',
    BRANDS: 'browser.brands',
    MOBILE: 'browser.mobile',
    LANGUAGE: 'browser.language',
    USER_AGENT: 'browser.user_agent',
};
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SDK_INFO: () => (/* binding */ SDK_INFO)
/* harmony export */ });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../version */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/version.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a;


/** Constants describing the SDK in use */
var SDK_INFO = (_a = {},
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'browser',
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.TELEMETRYSDKLANGUAGEVALUES_WEBJS,
    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SEMRESATTRS_TELEMETRY_SDK_VERSION] = _version__WEBPACK_IMPORTED_MODULE_1__.VERSION,
    _a);
//# sourceMappingURL=sdk-info.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/version.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/version.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// this is autogenerated file, see scripts/version-update.js
var VERSION = '1.30.1';
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/Resource.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/Resource.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Resource: () => (/* binding */ Resource)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js");
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};




/**
 * A Resource describes the entity for which a signals (metrics or trace) are
 * collected.
 */
var Resource = /** @class */ (function () {
    function Resource(
    /**
     * A dictionary of attributes with string keys and values that provide
     * information about the entity as numbers, strings or booleans
     * TODO: Consider to add check/validation on attributes.
     */
    attributes, asyncAttributesPromise) {
        var _this = this;
        var _a;
        this._attributes = attributes;
        this.asyncAttributesPending = asyncAttributesPromise != null;
        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {
            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);
            _this.asyncAttributesPending = false;
            return asyncAttributes;
        }, function (err) {
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug("a resource's async attributes promise rejected: %s", err);
            _this.asyncAttributesPending = false;
            return {};
        });
    }
    /**
     * Returns an empty Resource
     */
    Resource.empty = function () {
        return Resource.EMPTY;
    };
    /**
     * Returns a Resource that identifies the SDK in use.
     */
    Resource.default = function () {
        var _a;
        return new Resource((_a = {},
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_SERVICE_NAME] = (0,_platform__WEBPACK_IMPORTED_MODULE_2__.defaultServiceName)(),
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_NAME] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_NAME],
            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_VERSION] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SEMRESATTRS_TELEMETRY_SDK_VERSION],
            _a));
    };
    Object.defineProperty(Resource.prototype, "attributes", {
        get: function () {
            var _a;
            if (this.asyncAttributesPending) {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('Accessing resource attributes before async attributes settled');
            }
            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to
     * this Resource's attributes. This is useful in exporters to block until resource detection
     * has finished.
     */
    Resource.prototype.waitForAsyncAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._asyncAttributesPromise];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a new, merged {@link Resource} by merging the current Resource
     * with the other Resource. In case of a collision, other Resource takes
     * precedence.
     *
     * @param other the Resource that will be merged with this.
     * @returns the newly merged Resource.
     */
    Resource.prototype.merge = function (other) {
        var _this = this;
        var _a;
        if (!other)
            return this;
        // SpanAttributes from other resource overwrite attributes from this resource.
        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));
        if (!this._asyncAttributesPromise &&
            !other._asyncAttributesPromise) {
            return new Resource(mergedSyncAttributes);
        }
        var mergedAttributesPromise = Promise.all([
            this._asyncAttributesPromise,
            other._asyncAttributesPromise,
        ]).then(function (_a) {
            var _b;
            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];
            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);
        });
        return new Resource(mergedSyncAttributes, mergedAttributesPromise);
    };
    Resource.EMPTY = new Resource({});
    return Resource;
}());

//# sourceMappingURL=Resource.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/opentelemetry-browser-detector/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultServiceName: () => (/* binding */ defaultServiceName)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function defaultServiceName() {
    return 'unknown_service';
}
//# sourceMappingURL=default-service-name.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OTLPExporterBase: () => (/* binding */ OTLPExporterBase)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var OTLPExporterBase = /** @class */ (function () {
    function OTLPExporterBase(_delegate) {
        this._delegate = _delegate;
    }
    /**
     * Export items.
     * @param items
     * @param resultCallback
     */
    OTLPExporterBase.prototype.export = function (items, resultCallback) {
        this._delegate.export(items, resultCallback);
    };
    OTLPExporterBase.prototype.forceFlush = function () {
        return this._delegate.forceFlush();
    };
    OTLPExporterBase.prototype.shutdown = function () {
        return this._delegate.shutdown();
    };
    return OTLPExporterBase;
}());

//# sourceMappingURL=OTLPExporterBase.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/bounded-queue-export-promise-handler.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/bounded-queue-export-promise-handler.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createBoundedQueueExportPromiseHandler: () => (/* binding */ createBoundedQueueExportPromiseHandler)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var BoundedQueueExportPromiseHandler = /** @class */ (function () {
    /**
     * @param concurrencyLimit maximum promises allowed in a queue at the same time.
     */
    function BoundedQueueExportPromiseHandler(concurrencyLimit) {
        this._sendingPromises = [];
        this._concurrencyLimit = concurrencyLimit;
    }
    BoundedQueueExportPromiseHandler.prototype.pushPromise = function (promise) {
        var _this = this;
        if (this.hasReachedLimit()) {
            throw new Error('Concurrency Limit reached');
        }
        this._sendingPromises.push(promise);
        var popPromise = function () {
            var index = _this._sendingPromises.indexOf(promise);
            _this._sendingPromises.splice(index, 1);
        };
        promise.then(popPromise, popPromise);
    };
    BoundedQueueExportPromiseHandler.prototype.hasReachedLimit = function () {
        return this._sendingPromises.length >= this._concurrencyLimit;
    };
    BoundedQueueExportPromiseHandler.prototype.awaitAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(this._sendingPromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BoundedQueueExportPromiseHandler;
}());
/**
 * Promise queue for keeping track of export promises. Finished promises will be auto-dequeued.
 * Allows for awaiting all promises in the queue.
 */
function createBoundedQueueExportPromiseHandler(options) {
    return new BoundedQueueExportPromiseHandler(options.concurrencyLimit);
}
//# sourceMappingURL=bounded-queue-export-promise-handler.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/convert-legacy-browser-http-options.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/convert-legacy-browser-http-options.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertLegacyBrowserHttpOptions: () => (/* binding */ convertLegacyBrowserHttpOptions)
/* harmony export */ });
/* harmony import */ var _otlp_http_configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./otlp-http-configuration */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-configuration.js");
/* harmony import */ var _shared_configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared-configuration */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @deprecated this will be removed in 2.0
 *
 * @param config
 * @param signalResourcePath
 * @param requiredHeaders
 */
function convertLegacyBrowserHttpOptions(config, signalResourcePath, requiredHeaders) {
    return (0,_otlp_http_configuration__WEBPACK_IMPORTED_MODULE_0__.mergeOtlpHttpConfigurationWithDefaults)({
        url: config.url,
        timeoutMillis: config.timeoutMillis,
        headers: (0,_shared_configuration__WEBPACK_IMPORTED_MODULE_1__.wrapStaticHeadersInFunction)(config.headers),
        concurrencyLimit: config.concurrencyLimit,
    }, {}, // no fallback for browser case
    (0,_otlp_http_configuration__WEBPACK_IMPORTED_MODULE_0__.getHttpConfigurationDefaults)(requiredHeaders, signalResourcePath));
}
//# sourceMappingURL=convert-legacy-browser-http-options.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/create-legacy-browser-delegate.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/create-legacy-browser-delegate.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLegacyOtlpBrowserExportDelegate: () => (/* binding */ createLegacyOtlpBrowserExportDelegate)
/* harmony export */ });
/* harmony import */ var _otlp_browser_http_export_delegate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../otlp-browser-http-export-delegate */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-browser-http-export-delegate.js");
/* harmony import */ var _convert_legacy_browser_http_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert-legacy-browser-http-options */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/convert-legacy-browser-http-options.js");


/**
 * @deprecated
 * @param config
 * @param serializer
 * @param signalResourcePath
 * @param requiredHeaders
 */
function createLegacyOtlpBrowserExportDelegate(config, serializer, signalResourcePath, requiredHeaders) {
    var useXhr = !!config.headers || typeof navigator.sendBeacon !== 'function';
    var options = (0,_convert_legacy_browser_http_options__WEBPACK_IMPORTED_MODULE_0__.convertLegacyBrowserHttpOptions)(config, signalResourcePath, requiredHeaders);
    if (useXhr) {
        return (0,_otlp_browser_http_export_delegate__WEBPACK_IMPORTED_MODULE_1__.createOtlpXhrExportDelegate)(options, serializer);
    }
    else {
        return (0,_otlp_browser_http_export_delegate__WEBPACK_IMPORTED_MODULE_1__.createOtlpSendBeaconExportDelegate)(options, serializer);
    }
}
//# sourceMappingURL=create-legacy-browser-delegate.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-configuration.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-configuration.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getHttpConfigurationDefaults: () => (/* binding */ getHttpConfigurationDefaults),
/* harmony export */   mergeOtlpHttpConfigurationWithDefaults: () => (/* binding */ mergeOtlpHttpConfigurationWithDefaults)
/* harmony export */ });
/* harmony import */ var _shared_configuration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared-configuration */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};


function mergeHeaders(userProvidedHeaders, fallbackHeaders, defaultHeaders) {
    var requiredHeaders = __assign({}, defaultHeaders());
    var headers = {};
    return function () {
        // add fallback ones first
        if (fallbackHeaders != null) {
            Object.assign(headers, fallbackHeaders());
        }
        // override with user-provided ones
        if (userProvidedHeaders != null) {
            Object.assign(headers, userProvidedHeaders());
        }
        // override required ones.
        return Object.assign(headers, requiredHeaders);
    };
}
function validateUserProvidedUrl(url) {
    if (url == null) {
        return undefined;
    }
    try {
        new URL(url);
        return url;
    }
    catch (e) {
        throw new Error("Configuration: Could not parse user-provided export URL: '" + url + "'");
    }
}
/**
 * @param userProvidedConfiguration  Configuration options provided by the user in code.
 * @param fallbackConfiguration Fallback to use when the {@link userProvidedConfiguration} does not specify an option.
 * @param defaultConfiguration The defaults as defined by the exporter specification
 */
function mergeOtlpHttpConfigurationWithDefaults(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
    var _a, _b, _c, _d;
    return __assign(__assign({}, (0,_shared_configuration__WEBPACK_IMPORTED_MODULE_0__.mergeOtlpSharedConfigurationWithDefaults)(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration)), { headers: mergeHeaders((0,_util__WEBPACK_IMPORTED_MODULE_1__.validateAndNormalizeHeaders)(userProvidedConfiguration.headers), fallbackConfiguration.headers, defaultConfiguration.headers), url: (_b = (_a = validateUserProvidedUrl(userProvidedConfiguration.url)) !== null && _a !== void 0 ? _a : fallbackConfiguration.url) !== null && _b !== void 0 ? _b : defaultConfiguration.url, agentOptions: (_d = (_c = userProvidedConfiguration.agentOptions) !== null && _c !== void 0 ? _c : fallbackConfiguration.agentOptions) !== null && _d !== void 0 ? _d : defaultConfiguration.agentOptions });
}
function getHttpConfigurationDefaults(requiredHeaders, signalResourcePath) {
    return __assign(__assign({}, (0,_shared_configuration__WEBPACK_IMPORTED_MODULE_0__.getSharedConfigurationDefaults)()), { headers: function () { return requiredHeaders; }, url: 'http://localhost:4318/' + signalResourcePath, agentOptions: { keepAlive: true } });
}
//# sourceMappingURL=otlp-http-configuration.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSharedConfigurationDefaults: () => (/* binding */ getSharedConfigurationDefaults),
/* harmony export */   mergeOtlpSharedConfigurationWithDefaults: () => (/* binding */ mergeOtlpSharedConfigurationWithDefaults),
/* harmony export */   validateTimeoutMillis: () => (/* binding */ validateTimeoutMillis),
/* harmony export */   wrapStaticHeadersInFunction: () => (/* binding */ wrapStaticHeadersInFunction)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function validateTimeoutMillis(timeoutMillis) {
    if (!Number.isNaN(timeoutMillis) &&
        Number.isFinite(timeoutMillis) &&
        timeoutMillis > 0) {
        return timeoutMillis;
    }
    throw new Error("Configuration: timeoutMillis is invalid, expected number greater than 0 (actual: '" + timeoutMillis + "')");
}
function wrapStaticHeadersInFunction(headers) {
    if (headers == null) {
        return undefined;
    }
    return function () { return headers; };
}
/**
 * @param userProvidedConfiguration  Configuration options provided by the user in code.
 * @param fallbackConfiguration Fallback to use when the {@link userProvidedConfiguration} does not specify an option.
 * @param defaultConfiguration The defaults as defined by the exporter specification
 */
function mergeOtlpSharedConfigurationWithDefaults(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
    var _a, _b, _c, _d, _e, _f;
    return {
        timeoutMillis: validateTimeoutMillis((_b = (_a = userProvidedConfiguration.timeoutMillis) !== null && _a !== void 0 ? _a : fallbackConfiguration.timeoutMillis) !== null && _b !== void 0 ? _b : defaultConfiguration.timeoutMillis),
        concurrencyLimit: (_d = (_c = userProvidedConfiguration.concurrencyLimit) !== null && _c !== void 0 ? _c : fallbackConfiguration.concurrencyLimit) !== null && _d !== void 0 ? _d : defaultConfiguration.concurrencyLimit,
        compression: (_f = (_e = userProvidedConfiguration.compression) !== null && _e !== void 0 ? _e : fallbackConfiguration.compression) !== null && _f !== void 0 ? _f : defaultConfiguration.compression,
    };
}
function getSharedConfigurationDefaults() {
    return {
        timeoutMillis: 10000,
        concurrencyLimit: 30,
        compression: 'none',
    };
}
//# sourceMappingURL=shared-configuration.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/is-export-retryable.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/is-export-retryable.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isExportRetryable: () => (/* binding */ isExportRetryable),
/* harmony export */   parseRetryAfterToMills: () => (/* binding */ parseRetryAfterToMills)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function isExportRetryable(statusCode) {
    var retryCodes = [429, 502, 503, 504];
    return retryCodes.includes(statusCode);
}
function parseRetryAfterToMills(retryAfter) {
    if (retryAfter == null) {
        return undefined;
    }
    var seconds = Number.parseInt(retryAfter, 10);
    if (Number.isInteger(seconds)) {
        return seconds > 0 ? seconds * 1000 : -1;
    }
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives
    var delay = new Date(retryAfter).getTime() - Date.now();
    if (delay >= 0) {
        return delay;
    }
    return 0;
}
//# sourceMappingURL=is-export-retryable.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/logging-response-handler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/logging-response-handler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLoggingPartialSuccessResponseHandler: () => (/* binding */ createLoggingPartialSuccessResponseHandler)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function isPartialSuccessResponse(response) {
    return Object.prototype.hasOwnProperty.call(response, 'partialSuccess');
}
/**
 * Default response handler that logs a partial success to the console.
 */
function createLoggingPartialSuccessResponseHandler() {
    return {
        handleResponse: function (response) {
            // Partial success MUST never be an empty object according the specification
            // see https://opentelemetry.io/docs/specs/otlp/#partial-success
            if (response == null ||
                !isPartialSuccessResponse(response) ||
                response.partialSuccess == null ||
                Object.keys(response.partialSuccess).length === 0) {
                return;
            }
            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn('Received Partial Success response:', JSON.stringify(response.partialSuccess));
        },
    };
}
//# sourceMappingURL=logging-response-handler.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-browser-http-export-delegate.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-browser-http-export-delegate.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOtlpSendBeaconExportDelegate: () => (/* binding */ createOtlpSendBeaconExportDelegate),
/* harmony export */   createOtlpXhrExportDelegate: () => (/* binding */ createOtlpXhrExportDelegate)
/* harmony export */ });
/* harmony import */ var _retrying_transport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retrying-transport */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/retrying-transport.js");
/* harmony import */ var _transport_xhr_transport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transport/xhr-transport */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/xhr-transport.js");
/* harmony import */ var _transport_send_beacon_transport__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transport/send-beacon-transport */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/send-beacon-transport.js");
/* harmony import */ var _otlp_network_export_delegate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./otlp-network-export-delegate */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-network-export-delegate.js");




function createOtlpXhrExportDelegate(options, serializer) {
    return (0,_otlp_network_export_delegate__WEBPACK_IMPORTED_MODULE_0__.createOtlpNetworkExportDelegate)(options, serializer, (0,_retrying_transport__WEBPACK_IMPORTED_MODULE_1__.createRetryingTransport)({
        transport: (0,_transport_xhr_transport__WEBPACK_IMPORTED_MODULE_2__.createXhrTransport)(options),
    }));
}
function createOtlpSendBeaconExportDelegate(options, serializer) {
    return (0,_otlp_network_export_delegate__WEBPACK_IMPORTED_MODULE_0__.createOtlpNetworkExportDelegate)(options, serializer, (0,_retrying_transport__WEBPACK_IMPORTED_MODULE_1__.createRetryingTransport)({
        transport: (0,_transport_send_beacon_transport__WEBPACK_IMPORTED_MODULE_3__.createSendBeaconTransport)({
            url: options.url,
            blobType: options.headers()['Content-Type'],
        }),
    }));
}
//# sourceMappingURL=otlp-browser-http-export-delegate.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-export-delegate.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-export-delegate.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOtlpExportDelegate: () => (/* binding */ createOtlpExportDelegate)
/* harmony export */ });
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/ExportResult.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js");
/* harmony import */ var _logging_response_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logging-response-handler */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/logging-response-handler.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var OTLPExportDelegate = /** @class */ (function () {
    function OTLPExportDelegate(_transport, _serializer, _responseHandler, _promiseQueue, _timeout) {
        this._transport = _transport;
        this._serializer = _serializer;
        this._responseHandler = _responseHandler;
        this._promiseQueue = _promiseQueue;
        this._timeout = _timeout;
        this._diagLogger = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.createComponentLogger({
            namespace: 'OTLPExportDelegate',
        });
    }
    OTLPExportDelegate.prototype.export = function (internalRepresentation, resultCallback) {
        var _this = this;
        this._diagLogger.debug('items to be sent', internalRepresentation);
        // don't do any work if too many exports are in progress.
        if (this._promiseQueue.hasReachedLimit()) {
            resultCallback({
                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                error: new Error('Concurrent export limit reached'),
            });
            return;
        }
        var serializedRequest = this._serializer.serializeRequest(internalRepresentation);
        if (serializedRequest == null) {
            resultCallback({
                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                error: new Error('Nothing to send'),
            });
            return;
        }
        this._promiseQueue.pushPromise(this._transport.send(serializedRequest, this._timeout).then(function (response) {
            if (response.status === 'success') {
                if (response.data != null) {
                    try {
                        _this._responseHandler.handleResponse(_this._serializer.deserializeResponse(response.data));
                    }
                    catch (e) {
                        _this._diagLogger.warn('Export succeeded but could not deserialize response - is the response specification compliant?', e, response.data);
                    }
                }
                // No matter the response, we can consider the export still successful.
                resultCallback({
                    code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS,
                });
                return;
            }
            else if (response.status === 'failure' && response.error) {
                resultCallback({
                    code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                    error: response.error,
                });
                return;
            }
            else if (response.status === 'retryable') {
                resultCallback({
                    code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                    error: new _types__WEBPACK_IMPORTED_MODULE_2__.OTLPExporterError('Export failed with retryable status'),
                });
            }
            else {
                resultCallback({
                    code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                    error: new _types__WEBPACK_IMPORTED_MODULE_2__.OTLPExporterError('Export failed with unknown error'),
                });
            }
        }, function (reason) {
            return resultCallback({
                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,
                error: reason,
            });
        }));
    };
    OTLPExportDelegate.prototype.forceFlush = function () {
        return this._promiseQueue.awaitAll();
    };
    OTLPExportDelegate.prototype.shutdown = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._diagLogger.debug('shutdown started');
                        return [4 /*yield*/, this.forceFlush()];
                    case 1:
                        _a.sent();
                        this._transport.shutdown();
                        return [2 /*return*/];
                }
            });
        });
    };
    return OTLPExportDelegate;
}());
/**
 * Creates a generic delegate for OTLP exports which only contains parts of the OTLP export that are shared across all
 * signals.
 */
function createOtlpExportDelegate(components, settings) {
    return new OTLPExportDelegate(components.transport, components.serializer, (0,_logging_response_handler__WEBPACK_IMPORTED_MODULE_3__.createLoggingPartialSuccessResponseHandler)(), components.promiseHandler, settings.timeout);
}
//# sourceMappingURL=otlp-export-delegate.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-network-export-delegate.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-network-export-delegate.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createOtlpNetworkExportDelegate: () => (/* binding */ createOtlpNetworkExportDelegate)
/* harmony export */ });
/* harmony import */ var _bounded_queue_export_promise_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bounded-queue-export-promise-handler */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/bounded-queue-export-promise-handler.js");
/* harmony import */ var _otlp_export_delegate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./otlp-export-delegate */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-export-delegate.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createOtlpNetworkExportDelegate(options, serializer, transport) {
    return (0,_otlp_export_delegate__WEBPACK_IMPORTED_MODULE_0__.createOtlpExportDelegate)({
        transport: transport,
        serializer: serializer,
        promiseHandler: (0,_bounded_queue_export_promise_handler__WEBPACK_IMPORTED_MODULE_1__.createBoundedQueueExportPromiseHandler)(options),
    }, { timeout: options.timeoutMillis });
}
//# sourceMappingURL=otlp-network-export-delegate.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/retrying-transport.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/retrying-transport.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRetryingTransport: () => (/* binding */ createRetryingTransport)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var MAX_ATTEMPTS = 5;
var INITIAL_BACKOFF = 1000;
var MAX_BACKOFF = 5000;
var BACKOFF_MULTIPLIER = 1.5;
var JITTER = 0.2;
/**
 * Get a pseudo-random jitter that falls in the range of [-JITTER, +JITTER]
 */
function getJitter() {
    return Math.random() * (2 * JITTER) - JITTER;
}
var RetryingTransport = /** @class */ (function () {
    function RetryingTransport(_transport) {
        this._transport = _transport;
    }
    RetryingTransport.prototype.retry = function (data, timeoutMillis, inMillis) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                _this._transport.send(data, timeoutMillis).then(resolve, reject);
            }, inMillis);
        });
    };
    RetryingTransport.prototype.send = function (data, timeoutMillis) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var deadline, result, attempts, nextBackoff, backoff, retryInMillis, remainingTimeoutMillis;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        deadline = Date.now() + timeoutMillis;
                        return [4 /*yield*/, this._transport.send(data, timeoutMillis)];
                    case 1:
                        result = _b.sent();
                        attempts = MAX_ATTEMPTS;
                        nextBackoff = INITIAL_BACKOFF;
                        _b.label = 2;
                    case 2:
                        if (!(result.status === 'retryable' && attempts > 0)) return [3 /*break*/, 4];
                        attempts--;
                        backoff = Math.max(Math.min(nextBackoff, MAX_BACKOFF) + getJitter(), 0);
                        nextBackoff = nextBackoff * BACKOFF_MULTIPLIER;
                        retryInMillis = (_a = result.retryInMillis) !== null && _a !== void 0 ? _a : backoff;
                        remainingTimeoutMillis = deadline - Date.now();
                        if (retryInMillis > remainingTimeoutMillis) {
                            return [2 /*return*/, result];
                        }
                        return [4 /*yield*/, this.retry(data, remainingTimeoutMillis, retryInMillis)];
                    case 3:
                        result = _b.sent();
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    };
    RetryingTransport.prototype.shutdown = function () {
        return this._transport.shutdown();
    };
    return RetryingTransport;
}());
/**
 * Creates an Exporter Transport that retries on 'retryable' response.
 */
function createRetryingTransport(options) {
    return new RetryingTransport(options.transport);
}
//# sourceMappingURL=retrying-transport.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/send-beacon-transport.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/send-beacon-transport.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSendBeaconTransport: () => (/* binding */ createSendBeaconTransport)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SendBeaconTransport = /** @class */ (function () {
    function SendBeaconTransport(_params) {
        this._params = _params;
    }
    SendBeaconTransport.prototype.send = function (data) {
        var _this = this;
        return new Promise(function (resolve) {
            if (navigator.sendBeacon(_this._params.url, new Blob([data], { type: _this._params.blobType }))) {
                // no way to signal retry, treat everything as success
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('SendBeacon success');
                resolve({
                    status: 'success',
                });
            }
            else {
                resolve({
                    status: 'failure',
                    error: new Error('SendBeacon failed'),
                });
            }
        });
    };
    SendBeaconTransport.prototype.shutdown = function () {
        // Intentionally left empty, nothing to do.
    };
    return SendBeaconTransport;
}());
function createSendBeaconTransport(parameters) {
    return new SendBeaconTransport(parameters);
}
//# sourceMappingURL=send-beacon-transport.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/xhr-transport.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/xhr-transport.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createXhrTransport: () => (/* binding */ createXhrTransport)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/* harmony import */ var _is_export_retryable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../is-export-retryable */ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/is-export-retryable.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


var XhrTransport = /** @class */ (function () {
    function XhrTransport(_parameters) {
        this._parameters = _parameters;
    }
    XhrTransport.prototype.send = function (data, timeoutMillis) {
        var _this = this;
        return new Promise(function (resolve) {
            var xhr = new XMLHttpRequest();
            xhr.timeout = timeoutMillis;
            xhr.open('POST', _this._parameters.url);
            var headers = _this._parameters.headers();
            Object.entries(headers).forEach(function (_a) {
                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                xhr.setRequestHeader(k, v);
            });
            xhr.ontimeout = function (_) {
                resolve({
                    status: 'failure',
                    error: new Error('XHR request timed out'),
                });
            };
            xhr.onreadystatechange = function () {
                if (xhr.status >= 200 && xhr.status <= 299) {
                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('XHR success');
                    resolve({
                        status: 'success',
                    });
                }
                else if (xhr.status && (0,_is_export_retryable__WEBPACK_IMPORTED_MODULE_1__.isExportRetryable)(xhr.status)) {
                    resolve({
                        status: 'retryable',
                        retryInMillis: (0,_is_export_retryable__WEBPACK_IMPORTED_MODULE_1__.parseRetryAfterToMills)(xhr.getResponseHeader('Retry-After')),
                    });
                }
                else if (xhr.status !== 0) {
                    resolve({
                        status: 'failure',
                        error: new Error('XHR request failed with non-retryable status'),
                    });
                }
            };
            xhr.onabort = function () {
                resolve({
                    status: 'failure',
                    error: new Error('XHR request aborted'),
                });
            };
            xhr.onerror = function () {
                resolve({
                    status: 'failure',
                    error: new Error('XHR request errored'),
                });
            };
            xhr.send(data);
        });
    };
    XhrTransport.prototype.shutdown = function () {
        // Intentionally left empty, nothing to do.
    };
    return XhrTransport;
}());
/**
 * Creates an exporter transport that uses XHR to send the data
 * @param parameters applied to each request made by transport
 */
function createXhrTransport(parameters) {
    return new XhrTransport(parameters);
}
//# sourceMappingURL=xhr-transport.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OTLPExporterError: () => (/* binding */ OTLPExporterError)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Interface for handling error
 */
var OTLPExporterError = /** @class */ (function (_super) {
    __extends(OTLPExporterError, _super);
    function OTLPExporterError(message, code, data) {
        var _this = _super.call(this, message) || this;
        _this.name = 'OTLPExporterError';
        _this.data = data;
        _this.code = code;
        return _this;
    }
    return OTLPExporterError;
}(Error));

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validateAndNormalizeHeaders: () => (/* binding */ validateAndNormalizeHeaders)
/* harmony export */ });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/esm/diag-api.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

/**
 * Parses headers from config leaving only those that have defined values
 * @param partialHeaders
 */
function validateAndNormalizeHeaders(partialHeaders) {
    return function () {
        var _a;
        var headers = {};
        Object.entries((_a = partialHeaders === null || partialHeaders === void 0 ? void 0 : partialHeaders()) !== null && _a !== void 0 ? _a : {}).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (typeof value !== 'undefined') {
                headers[key] = String(value);
            }
            else {
                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn("Header \"" + key + "\" has invalid value (" + value + ") and will be ignored");
            }
        });
        return headers;
    };
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/ExportResult.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/ExportResult.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExportResultCode: () => (/* binding */ ExportResultCode)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ExportResultCode;
(function (ExportResultCode) {
    ExportResultCode[ExportResultCode["SUCCESS"] = 0] = "SUCCESS";
    ExportResultCode[ExportResultCode["FAILED"] = 1] = "FAILED";
})(ExportResultCode || (ExportResultCode = {}));
//# sourceMappingURL=ExportResult.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInstrumentationScope: () => (/* binding */ createInstrumentationScope),
/* harmony export */   createResource: () => (/* binding */ createResource),
/* harmony export */   toAnyValue: () => (/* binding */ toAnyValue),
/* harmony export */   toAttributes: () => (/* binding */ toAttributes),
/* harmony export */   toKeyValue: () => (/* binding */ toKeyValue)
/* harmony export */ });
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
function createResource(resource) {
    return {
        attributes: toAttributes(resource.attributes),
        droppedAttributesCount: 0,
    };
}
function createInstrumentationScope(scope) {
    return {
        name: scope.name,
        version: scope.version,
    };
}
function toAttributes(attributes) {
    return Object.keys(attributes).map(function (key) { return toKeyValue(key, attributes[key]); });
}
function toKeyValue(key, value) {
    return {
        key: key,
        value: toAnyValue(value),
    };
}
function toAnyValue(value) {
    var t = typeof value;
    if (t === 'string')
        return { stringValue: value };
    if (t === 'number') {
        if (!Number.isInteger(value))
            return { doubleValue: value };
        return { intValue: value };
    }
    if (t === 'boolean')
        return { boolValue: value };
    if (value instanceof Uint8Array)
        return { bytesValue: value };
    if (Array.isArray(value))
        return { arrayValue: { values: value.map(toAnyValue) } };
    if (t === 'object' && value != null)
        return {
            kvlistValue: {
                values: Object.entries(value).map(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return toKeyValue(k, v);
                }),
            },
        };
    return {};
}
//# sourceMappingURL=internal.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/common/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/common/utils.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   encodeAsLongBits: () => (/* binding */ encodeAsLongBits),
/* harmony export */   encodeAsString: () => (/* binding */ encodeAsString),
/* harmony export */   getOtlpEncoder: () => (/* binding */ getOtlpEncoder),
/* harmony export */   hrTimeToNanos: () => (/* binding */ hrTimeToNanos),
/* harmony export */   toLongBits: () => (/* binding */ toLongBits)
/* harmony export */ });
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js");
/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function hrTimeToNanos(hrTime) {
    var NANOSECONDS = BigInt(1000000000);
    return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);
}
function toLongBits(value) {
    var low = Number(BigInt.asUintN(32, value));
    var high = Number(BigInt.asUintN(32, value >> BigInt(32)));
    return { low: low, high: high };
}
function encodeAsLongBits(hrTime) {
    var nanos = hrTimeToNanos(hrTime);
    return toLongBits(nanos);
}
function encodeAsString(hrTime) {
    var nanos = hrTimeToNanos(hrTime);
    return nanos.toString();
}
var encodeTimestamp = typeof BigInt !== 'undefined' ? encodeAsString : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToNanoseconds;
function identity(value) {
    return value;
}
function optionalHexToBinary(str) {
    if (str === undefined)
        return undefined;
    return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hexToBinary)(str);
}
var DEFAULT_ENCODER = {
    encodeHrTime: encodeAsLongBits,
    encodeSpanContext: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hexToBinary,
    encodeOptionalSpanContext: optionalHexToBinary,
};
function getOtlpEncoder(options) {
    var _a, _b;
    if (options === undefined) {
        return DEFAULT_ENCODER;
    }
    var useLongBits = (_a = options.useLongBits) !== null && _a !== void 0 ? _a : true;
    var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;
    return {
        encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,
        encodeSpanContext: useHex ? identity : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hexToBinary,
        encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,
    };
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createExportTraceServiceRequest: () => (/* binding */ createExportTraceServiceRequest),
/* harmony export */   sdkSpanToOtlpSpan: () => (/* binding */ sdkSpanToOtlpSpan),
/* harmony export */   toOtlpLink: () => (/* binding */ toOtlpLink),
/* harmony export */   toOtlpSpanEvent: () => (/* binding */ toOtlpSpanEvent)
/* harmony export */ });
/* harmony import */ var _common_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/internal */ "./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils */ "./node_modules/@opentelemetry/otlp-transformer/build/esm/common/utils.js");
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


function sdkSpanToOtlpSpan(span, encoder) {
    var _a;
    var ctx = span.spanContext();
    var status = span.status;
    return {
        traceId: encoder.encodeSpanContext(ctx.traceId),
        spanId: encoder.encodeSpanContext(ctx.spanId),
        parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),
        traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),
        name: span.name,
        // Span kind is offset by 1 because the API does not define a value for unset
        kind: span.kind == null ? 0 : span.kind + 1,
        startTimeUnixNano: encoder.encodeHrTime(span.startTime),
        endTimeUnixNano: encoder.encodeHrTime(span.endTime),
        attributes: (0,_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAttributes)(span.attributes),
        droppedAttributesCount: span.droppedAttributesCount,
        events: span.events.map(function (event) { return toOtlpSpanEvent(event, encoder); }),
        droppedEventsCount: span.droppedEventsCount,
        status: {
            // API and proto enums share the same values
            code: status.code,
            message: status.message,
        },
        links: span.links.map(function (link) { return toOtlpLink(link, encoder); }),
        droppedLinksCount: span.droppedLinksCount,
    };
}
function toOtlpLink(link, encoder) {
    var _a;
    return {
        attributes: link.attributes ? (0,_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAttributes)(link.attributes) : [],
        spanId: encoder.encodeSpanContext(link.context.spanId),
        traceId: encoder.encodeSpanContext(link.context.traceId),
        traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),
        droppedAttributesCount: link.droppedAttributesCount || 0,
    };
}
function toOtlpSpanEvent(timedEvent, encoder) {
    return {
        attributes: timedEvent.attributes
            ? (0,_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAttributes)(timedEvent.attributes)
            : [],
        name: timedEvent.name,
        timeUnixNano: encoder.encodeHrTime(timedEvent.time),
        droppedAttributesCount: timedEvent.droppedAttributesCount || 0,
    };
}
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createExportTraceServiceRequest(spans, options) {
    var encoder = (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.getOtlpEncoder)(options);
    return {
        resourceSpans: spanRecordsToResourceSpans(spans, encoder),
    };
}
function createResourceMap(readableSpans) {
    var e_1, _a;
    var resourceMap = new Map();
    try {
        for (var readableSpans_1 = __values(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()) {
            var record = readableSpans_1_1.value;
            var ilmMap = resourceMap.get(record.resource);
            if (!ilmMap) {
                ilmMap = new Map();
                resourceMap.set(record.resource, ilmMap);
            }
            // TODO this is duplicated in basic tracer. Consolidate on a common helper in core
            var instrumentationLibraryKey = record.instrumentationLibrary.name + "@" + (record.instrumentationLibrary.version || '') + ":" + (record.instrumentationLibrary.schemaUrl || '');
            var records = ilmMap.get(instrumentationLibraryKey);
            if (!records) {
                records = [];
                ilmMap.set(instrumentationLibraryKey, records);
            }
            records.push(record);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (readableSpans_1_1 && !readableSpans_1_1.done && (_a = readableSpans_1.return)) _a.call(readableSpans_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return resourceMap;
}
function spanRecordsToResourceSpans(readableSpans, encoder) {
    var resourceMap = createResourceMap(readableSpans);
    var out = [];
    var entryIterator = resourceMap.entries();
    var entry = entryIterator.next();
    while (!entry.done) {
        var _a = __read(entry.value, 2), resource = _a[0], ilmMap = _a[1];
        var scopeResourceSpans = [];
        var ilmIterator = ilmMap.values();
        var ilmEntry = ilmIterator.next();
        while (!ilmEntry.done) {
            var scopeSpans = ilmEntry.value;
            if (scopeSpans.length > 0) {
                var spans = scopeSpans.map(function (readableSpan) {
                    return sdkSpanToOtlpSpan(readableSpan, encoder);
                });
                scopeResourceSpans.push({
                    scope: (0,_common_internal__WEBPACK_IMPORTED_MODULE_0__.createInstrumentationScope)(scopeSpans[0].instrumentationLibrary),
                    spans: spans,
                    schemaUrl: scopeSpans[0].instrumentationLibrary.schemaUrl,
                });
            }
            ilmEntry = ilmIterator.next();
        }
        // TODO SDK types don't provide resource schema URL at this time
        var transformedSpans = {
            resource: (0,_common_internal__WEBPACK_IMPORTED_MODULE_0__.createResource)(resource),
            scopeSpans: scopeResourceSpans,
            schemaUrl: undefined,
        };
        out.push(transformedSpans);
        entry = entryIterator.next();
    }
    return out;
}
//# sourceMappingURL=internal.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/trace.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/trace.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JsonTraceSerializer: () => (/* binding */ JsonTraceSerializer)
/* harmony export */ });
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal */ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js");

var JsonTraceSerializer = {
    serializeRequest: function (arg) {
        var request = (0,_internal__WEBPACK_IMPORTED_MODULE_0__.createExportTraceServiceRequest)(arg, {
            useHex: true,
            useLongBits: false,
        });
        var encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(request));
    },
    deserializeResponse: function (arg) {
        var decoder = new TextDecoder();
        return JSON.parse(decoder.decode(arg));
    },
};
//# sourceMappingURL=trace.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hexToBinary: () => (/* binding */ hexToBinary)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function intValue(charCode) {
    // 0-9
    if (charCode >= 48 && charCode <= 57) {
        return charCode - 48;
    }
    // a-f
    if (charCode >= 97 && charCode <= 102) {
        return charCode - 87;
    }
    // A-F
    return charCode - 55;
}
function hexToBinary(hexStr) {
    var buf = new Uint8Array(hexStr.length / 2);
    var offset = 0;
    for (var i = 0; i < hexStr.length; i += 2) {
        var hi = intValue(hexStr.charCodeAt(i));
        var lo = intValue(hexStr.charCodeAt(i + 1));
        buf[offset++] = (hi << 4) | lo;
    }
    return buf;
}
//# sourceMappingURL=hex-to-binary.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),
/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),
/* harmony export */   hrTime: () => (/* binding */ hrTime),
/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),
/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),
/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),
/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),
/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),
/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),
/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),
/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),
/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)
/* harmony export */ });
/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var NANOSECOND_DIGITS = 9;
var NANOSECOND_DIGITS_IN_MILLIS = 6;
var MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
/**
 * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).
 * @param epochMillis
 */
function millisToHrTime(epochMillis) {
    var epochSeconds = epochMillis / 1000;
    // Decimals only.
    var seconds = Math.trunc(epochSeconds);
    // Round sub-nanosecond accuracy to nanosecond.
    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);
    return [seconds, nanos];
}
function getTimeOrigin() {
    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;
    if (typeof timeOrigin !== 'number') {
        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
    }
    return timeOrigin;
}
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
function hrTime(performanceNow) {
    var timeOrigin = millisToHrTime(getTimeOrigin());
    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());
    return addHrTimes(timeOrigin, now);
}
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
function timeInputToHrTime(time) {
    // process.hrtime
    if (isTimeInputHrTime(time)) {
        return time;
    }
    else if (typeof time === 'number') {
        // Must be a performance.now() if it's smaller than process start time.
        if (time < getTimeOrigin()) {
            return hrTime(time);
        }
        else {
            // epoch milliseconds or performance.timeOrigin
            return millisToHrTime(time);
        }
    }
    else if (time instanceof Date) {
        return millisToHrTime(time.getTime());
    }
    else {
        throw TypeError('Invalid input type');
    }
}
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
function hrTimeDuration(startTime, endTime) {
    var seconds = endTime[0] - startTime[0];
    var nanos = endTime[1] - startTime[1];
    // overflow
    if (nanos < 0) {
        seconds -= 1;
        // negate
        nanos += SECOND_TO_NANOSECONDS;
    }
    return [seconds, nanos];
}
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param time
 */
function hrTimeToTimeStamp(time) {
    var precision = NANOSECOND_DIGITS;
    var tmp = "" + '0'.repeat(precision) + time[1] + "Z";
    var nanoString = tmp.substring(tmp.length - precision - 1);
    var date = new Date(time[0] * 1000).toISOString();
    return date.replace('000Z', nanoString);
}
/**
 * Convert hrTime to nanoseconds.
 * @param time
 */
function hrTimeToNanoseconds(time) {
    return time[0] * SECOND_TO_NANOSECONDS + time[1];
}
/**
 * Convert hrTime to milliseconds.
 * @param time
 */
function hrTimeToMilliseconds(time) {
    return time[0] * 1e3 + time[1] / 1e6;
}
/**
 * Convert hrTime to microseconds.
 * @param time
 */
function hrTimeToMicroseconds(time) {
    return time[0] * 1e6 + time[1] / 1e3;
}
/**
 * check if time is HrTime
 * @param value
 */
function isTimeInputHrTime(value) {
    return (Array.isArray(value) &&
        value.length === 2 &&
        typeof value[0] === 'number' &&
        typeof value[1] === 'number');
}
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
function isTimeInput(value) {
    return (isTimeInputHrTime(value) ||
        typeof value === 'number' ||
        value instanceof Date);
}
/**
 * Given 2 HrTime formatted times, return their sum as an HrTime.
 */
function addHrTimes(time1, time2) {
    var out = [time1[0] + time2[0], time1[1] + time2[1]];
    // Nanoseconds
    if (out[1] >= SECOND_TO_NANOSECONDS) {
        out[1] -= SECOND_TO_NANOSECONDS;
        out[0] += 1;
    }
    return out;
}
//# sourceMappingURL=time.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   otperformance: () => (/* binding */ otperformance)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var otperformance = performance;
//# sourceMappingURL=performance.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/experimental_attributes.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/experimental_attributes.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ANDROID_STATE_VALUE_BACKGROUND: () => (/* binding */ ANDROID_STATE_VALUE_BACKGROUND),
/* harmony export */   ANDROID_STATE_VALUE_CREATED: () => (/* binding */ ANDROID_STATE_VALUE_CREATED),
/* harmony export */   ANDROID_STATE_VALUE_FOREGROUND: () => (/* binding */ ANDROID_STATE_VALUE_FOREGROUND),
/* harmony export */   ATTR_ANDROID_OS_API_LEVEL: () => (/* binding */ ATTR_ANDROID_OS_API_LEVEL),
/* harmony export */   ATTR_ANDROID_STATE: () => (/* binding */ ATTR_ANDROID_STATE),
/* harmony export */   ATTR_ARTIFACT_ATTESTATION_FILENAME: () => (/* binding */ ATTR_ARTIFACT_ATTESTATION_FILENAME),
/* harmony export */   ATTR_ARTIFACT_ATTESTATION_HASH: () => (/* binding */ ATTR_ARTIFACT_ATTESTATION_HASH),
/* harmony export */   ATTR_ARTIFACT_ATTESTATION_ID: () => (/* binding */ ATTR_ARTIFACT_ATTESTATION_ID),
/* harmony export */   ATTR_ARTIFACT_FILENAME: () => (/* binding */ ATTR_ARTIFACT_FILENAME),
/* harmony export */   ATTR_ARTIFACT_HASH: () => (/* binding */ ATTR_ARTIFACT_HASH),
/* harmony export */   ATTR_ARTIFACT_PURL: () => (/* binding */ ATTR_ARTIFACT_PURL),
/* harmony export */   ATTR_ARTIFACT_VERSION: () => (/* binding */ ATTR_ARTIFACT_VERSION),
/* harmony export */   ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* binding */ ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET),
/* harmony export */   ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* binding */ ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),
/* harmony export */   ATTR_AWS_DYNAMODB_CONSISTENT_READ: () => (/* binding */ ATTR_AWS_DYNAMODB_CONSISTENT_READ),
/* harmony export */   ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* binding */ ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY),
/* harmony export */   ATTR_AWS_DYNAMODB_COUNT: () => (/* binding */ ATTR_AWS_DYNAMODB_COUNT),
/* harmony export */   ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* binding */ ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),
/* harmony export */   ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* binding */ ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),
/* harmony export */   ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* binding */ ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),
/* harmony export */   ATTR_AWS_DYNAMODB_INDEX_NAME: () => (/* binding */ ATTR_AWS_DYNAMODB_INDEX_NAME),
/* harmony export */   ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* binding */ ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),
/* harmony export */   ATTR_AWS_DYNAMODB_LIMIT: () => (/* binding */ ATTR_AWS_DYNAMODB_LIMIT),
/* harmony export */   ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* binding */ ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),
/* harmony export */   ATTR_AWS_DYNAMODB_PROJECTION: () => (/* binding */ ATTR_AWS_DYNAMODB_PROJECTION),
/* harmony export */   ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* binding */ ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),
/* harmony export */   ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* binding */ ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),
/* harmony export */   ATTR_AWS_DYNAMODB_SCANNED_COUNT: () => (/* binding */ ATTR_AWS_DYNAMODB_SCANNED_COUNT),
/* harmony export */   ATTR_AWS_DYNAMODB_SCAN_FORWARD: () => (/* binding */ ATTR_AWS_DYNAMODB_SCAN_FORWARD),
/* harmony export */   ATTR_AWS_DYNAMODB_SEGMENT: () => (/* binding */ ATTR_AWS_DYNAMODB_SEGMENT),
/* harmony export */   ATTR_AWS_DYNAMODB_SELECT: () => (/* binding */ ATTR_AWS_DYNAMODB_SELECT),
/* harmony export */   ATTR_AWS_DYNAMODB_TABLE_COUNT: () => (/* binding */ ATTR_AWS_DYNAMODB_TABLE_COUNT),
/* harmony export */   ATTR_AWS_DYNAMODB_TABLE_NAMES: () => (/* binding */ ATTR_AWS_DYNAMODB_TABLE_NAMES),
/* harmony export */   ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* binding */ ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS),
/* harmony export */   ATTR_AWS_ECS_CLUSTER_ARN: () => (/* binding */ ATTR_AWS_ECS_CLUSTER_ARN),
/* harmony export */   ATTR_AWS_ECS_CONTAINER_ARN: () => (/* binding */ ATTR_AWS_ECS_CONTAINER_ARN),
/* harmony export */   ATTR_AWS_ECS_LAUNCHTYPE: () => (/* binding */ ATTR_AWS_ECS_LAUNCHTYPE),
/* harmony export */   ATTR_AWS_ECS_TASK_ARN: () => (/* binding */ ATTR_AWS_ECS_TASK_ARN),
/* harmony export */   ATTR_AWS_ECS_TASK_FAMILY: () => (/* binding */ ATTR_AWS_ECS_TASK_FAMILY),
/* harmony export */   ATTR_AWS_ECS_TASK_ID: () => (/* binding */ ATTR_AWS_ECS_TASK_ID),
/* harmony export */   ATTR_AWS_ECS_TASK_REVISION: () => (/* binding */ ATTR_AWS_ECS_TASK_REVISION),
/* harmony export */   ATTR_AWS_EKS_CLUSTER_ARN: () => (/* binding */ ATTR_AWS_EKS_CLUSTER_ARN),
/* harmony export */   ATTR_AWS_EXTENDED_REQUEST_ID: () => (/* binding */ ATTR_AWS_EXTENDED_REQUEST_ID),
/* harmony export */   ATTR_AWS_LAMBDA_INVOKED_ARN: () => (/* binding */ ATTR_AWS_LAMBDA_INVOKED_ARN),
/* harmony export */   ATTR_AWS_LOG_GROUP_ARNS: () => (/* binding */ ATTR_AWS_LOG_GROUP_ARNS),
/* harmony export */   ATTR_AWS_LOG_GROUP_NAMES: () => (/* binding */ ATTR_AWS_LOG_GROUP_NAMES),
/* harmony export */   ATTR_AWS_LOG_STREAM_ARNS: () => (/* binding */ ATTR_AWS_LOG_STREAM_ARNS),
/* harmony export */   ATTR_AWS_LOG_STREAM_NAMES: () => (/* binding */ ATTR_AWS_LOG_STREAM_NAMES),
/* harmony export */   ATTR_AWS_REQUEST_ID: () => (/* binding */ ATTR_AWS_REQUEST_ID),
/* harmony export */   ATTR_AWS_S3_BUCKET: () => (/* binding */ ATTR_AWS_S3_BUCKET),
/* harmony export */   ATTR_AWS_S3_COPY_SOURCE: () => (/* binding */ ATTR_AWS_S3_COPY_SOURCE),
/* harmony export */   ATTR_AWS_S3_DELETE: () => (/* binding */ ATTR_AWS_S3_DELETE),
/* harmony export */   ATTR_AWS_S3_KEY: () => (/* binding */ ATTR_AWS_S3_KEY),
/* harmony export */   ATTR_AWS_S3_PART_NUMBER: () => (/* binding */ ATTR_AWS_S3_PART_NUMBER),
/* harmony export */   ATTR_AWS_S3_UPLOAD_ID: () => (/* binding */ ATTR_AWS_S3_UPLOAD_ID),
/* harmony export */   ATTR_AZURE_CLIENT_ID: () => (/* binding */ ATTR_AZURE_CLIENT_ID),
/* harmony export */   ATTR_AZURE_COSMOSDB_CONNECTION_MODE: () => (/* binding */ ATTR_AZURE_COSMOSDB_CONNECTION_MODE),
/* harmony export */   ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL: () => (/* binding */ ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL),
/* harmony export */   ATTR_AZURE_COSMOSDB_OPERATION_CONTACTED_REGIONS: () => (/* binding */ ATTR_AZURE_COSMOSDB_OPERATION_CONTACTED_REGIONS),
/* harmony export */   ATTR_AZURE_COSMOSDB_OPERATION_REQUEST_CHARGE: () => (/* binding */ ATTR_AZURE_COSMOSDB_OPERATION_REQUEST_CHARGE),
/* harmony export */   ATTR_AZURE_COSMOSDB_REQUEST_BODY_SIZE: () => (/* binding */ ATTR_AZURE_COSMOSDB_REQUEST_BODY_SIZE),
/* harmony export */   ATTR_AZURE_COSMOSDB_RESPONSE_SUB_STATUS_CODE: () => (/* binding */ ATTR_AZURE_COSMOSDB_RESPONSE_SUB_STATUS_CODE),
/* harmony export */   ATTR_AZ_NAMESPACE: () => (/* binding */ ATTR_AZ_NAMESPACE),
/* harmony export */   ATTR_AZ_SERVICE_REQUEST_ID: () => (/* binding */ ATTR_AZ_SERVICE_REQUEST_ID),
/* harmony export */   ATTR_BROWSER_BRANDS: () => (/* binding */ ATTR_BROWSER_BRANDS),
/* harmony export */   ATTR_BROWSER_LANGUAGE: () => (/* binding */ ATTR_BROWSER_LANGUAGE),
/* harmony export */   ATTR_BROWSER_MOBILE: () => (/* binding */ ATTR_BROWSER_MOBILE),
/* harmony export */   ATTR_BROWSER_PLATFORM: () => (/* binding */ ATTR_BROWSER_PLATFORM),
/* harmony export */   ATTR_CASSANDRA_CONSISTENCY_LEVEL: () => (/* binding */ ATTR_CASSANDRA_CONSISTENCY_LEVEL),
/* harmony export */   ATTR_CASSANDRA_COORDINATOR_DC: () => (/* binding */ ATTR_CASSANDRA_COORDINATOR_DC),
/* harmony export */   ATTR_CASSANDRA_COORDINATOR_ID: () => (/* binding */ ATTR_CASSANDRA_COORDINATOR_ID),
/* harmony export */   ATTR_CASSANDRA_PAGE_SIZE: () => (/* binding */ ATTR_CASSANDRA_PAGE_SIZE),
/* harmony export */   ATTR_CASSANDRA_QUERY_IDEMPOTENT: () => (/* binding */ ATTR_CASSANDRA_QUERY_IDEMPOTENT),
/* harmony export */   ATTR_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* binding */ ATTR_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),
/* harmony export */   ATTR_CICD_PIPELINE_NAME: () => (/* binding */ ATTR_CICD_PIPELINE_NAME),
/* harmony export */   ATTR_CICD_PIPELINE_RESULT: () => (/* binding */ ATTR_CICD_PIPELINE_RESULT),
/* harmony export */   ATTR_CICD_PIPELINE_RUN_ID: () => (/* binding */ ATTR_CICD_PIPELINE_RUN_ID),
/* harmony export */   ATTR_CICD_PIPELINE_RUN_STATE: () => (/* binding */ ATTR_CICD_PIPELINE_RUN_STATE),
/* harmony export */   ATTR_CICD_PIPELINE_TASK_NAME: () => (/* binding */ ATTR_CICD_PIPELINE_TASK_NAME),
/* harmony export */   ATTR_CICD_PIPELINE_TASK_RUN_ID: () => (/* binding */ ATTR_CICD_PIPELINE_TASK_RUN_ID),
/* harmony export */   ATTR_CICD_PIPELINE_TASK_RUN_URL_FULL: () => (/* binding */ ATTR_CICD_PIPELINE_TASK_RUN_URL_FULL),
/* harmony export */   ATTR_CICD_PIPELINE_TASK_TYPE: () => (/* binding */ ATTR_CICD_PIPELINE_TASK_TYPE),
/* harmony export */   ATTR_CICD_SYSTEM_COMPONENT: () => (/* binding */ ATTR_CICD_SYSTEM_COMPONENT),
/* harmony export */   ATTR_CICD_WORKER_STATE: () => (/* binding */ ATTR_CICD_WORKER_STATE),
/* harmony export */   ATTR_CLOUDEVENTS_EVENT_ID: () => (/* binding */ ATTR_CLOUDEVENTS_EVENT_ID),
/* harmony export */   ATTR_CLOUDEVENTS_EVENT_SOURCE: () => (/* binding */ ATTR_CLOUDEVENTS_EVENT_SOURCE),
/* harmony export */   ATTR_CLOUDEVENTS_EVENT_SPEC_VERSION: () => (/* binding */ ATTR_CLOUDEVENTS_EVENT_SPEC_VERSION),
/* harmony export */   ATTR_CLOUDEVENTS_EVENT_SUBJECT: () => (/* binding */ ATTR_CLOUDEVENTS_EVENT_SUBJECT),
/* harmony export */   ATTR_CLOUDEVENTS_EVENT_TYPE: () => (/* binding */ ATTR_CLOUDEVENTS_EVENT_TYPE),
/* harmony export */   ATTR_CLOUDFOUNDRY_APP_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_APP_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_APP_INSTANCE_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_APP_INSTANCE_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_APP_NAME: () => (/* binding */ ATTR_CLOUDFOUNDRY_APP_NAME),
/* harmony export */   ATTR_CLOUDFOUNDRY_ORG_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_ORG_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_ORG_NAME: () => (/* binding */ ATTR_CLOUDFOUNDRY_ORG_NAME),
/* harmony export */   ATTR_CLOUDFOUNDRY_PROCESS_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_PROCESS_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_PROCESS_TYPE: () => (/* binding */ ATTR_CLOUDFOUNDRY_PROCESS_TYPE),
/* harmony export */   ATTR_CLOUDFOUNDRY_SPACE_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_SPACE_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_SPACE_NAME: () => (/* binding */ ATTR_CLOUDFOUNDRY_SPACE_NAME),
/* harmony export */   ATTR_CLOUDFOUNDRY_SYSTEM_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_SYSTEM_ID),
/* harmony export */   ATTR_CLOUDFOUNDRY_SYSTEM_INSTANCE_ID: () => (/* binding */ ATTR_CLOUDFOUNDRY_SYSTEM_INSTANCE_ID),
/* harmony export */   ATTR_CLOUD_ACCOUNT_ID: () => (/* binding */ ATTR_CLOUD_ACCOUNT_ID),
/* harmony export */   ATTR_CLOUD_AVAILABILITY_ZONE: () => (/* binding */ ATTR_CLOUD_AVAILABILITY_ZONE),
/* harmony export */   ATTR_CLOUD_PLATFORM: () => (/* binding */ ATTR_CLOUD_PLATFORM),
/* harmony export */   ATTR_CLOUD_PROVIDER: () => (/* binding */ ATTR_CLOUD_PROVIDER),
/* harmony export */   ATTR_CLOUD_REGION: () => (/* binding */ ATTR_CLOUD_REGION),
/* harmony export */   ATTR_CLOUD_RESOURCE_ID: () => (/* binding */ ATTR_CLOUD_RESOURCE_ID),
/* harmony export */   ATTR_CODE_COLUMN: () => (/* binding */ ATTR_CODE_COLUMN),
/* harmony export */   ATTR_CODE_COLUMN_NUMBER: () => (/* binding */ ATTR_CODE_COLUMN_NUMBER),
/* harmony export */   ATTR_CODE_FILEPATH: () => (/* binding */ ATTR_CODE_FILEPATH),
/* harmony export */   ATTR_CODE_FILE_PATH: () => (/* binding */ ATTR_CODE_FILE_PATH),
/* harmony export */   ATTR_CODE_FUNCTION: () => (/* binding */ ATTR_CODE_FUNCTION),
/* harmony export */   ATTR_CODE_FUNCTION_NAME: () => (/* binding */ ATTR_CODE_FUNCTION_NAME),
/* harmony export */   ATTR_CODE_LINENO: () => (/* binding */ ATTR_CODE_LINENO),
/* harmony export */   ATTR_CODE_LINE_NUMBER: () => (/* binding */ ATTR_CODE_LINE_NUMBER),
/* harmony export */   ATTR_CODE_NAMESPACE: () => (/* binding */ ATTR_CODE_NAMESPACE),
/* harmony export */   ATTR_CODE_STACKTRACE: () => (/* binding */ ATTR_CODE_STACKTRACE),
/* harmony export */   ATTR_CONTAINER_COMMAND: () => (/* binding */ ATTR_CONTAINER_COMMAND),
/* harmony export */   ATTR_CONTAINER_COMMAND_ARGS: () => (/* binding */ ATTR_CONTAINER_COMMAND_ARGS),
/* harmony export */   ATTR_CONTAINER_COMMAND_LINE: () => (/* binding */ ATTR_CONTAINER_COMMAND_LINE),
/* harmony export */   ATTR_CONTAINER_CPU_STATE: () => (/* binding */ ATTR_CONTAINER_CPU_STATE),
/* harmony export */   ATTR_CONTAINER_CSI_PLUGIN_NAME: () => (/* binding */ ATTR_CONTAINER_CSI_PLUGIN_NAME),
/* harmony export */   ATTR_CONTAINER_CSI_VOLUME_ID: () => (/* binding */ ATTR_CONTAINER_CSI_VOLUME_ID),
/* harmony export */   ATTR_CONTAINER_ID: () => (/* binding */ ATTR_CONTAINER_ID),
/* harmony export */   ATTR_CONTAINER_IMAGE_ID: () => (/* binding */ ATTR_CONTAINER_IMAGE_ID),
/* harmony export */   ATTR_CONTAINER_IMAGE_NAME: () => (/* binding */ ATTR_CONTAINER_IMAGE_NAME),
/* harmony export */   ATTR_CONTAINER_IMAGE_REPO_DIGESTS: () => (/* binding */ ATTR_CONTAINER_IMAGE_REPO_DIGESTS),
/* harmony export */   ATTR_CONTAINER_IMAGE_TAGS: () => (/* binding */ ATTR_CONTAINER_IMAGE_TAGS),
/* harmony export */   ATTR_CONTAINER_LABEL: () => (/* binding */ ATTR_CONTAINER_LABEL),
/* harmony export */   ATTR_CONTAINER_LABELS: () => (/* binding */ ATTR_CONTAINER_LABELS),
/* harmony export */   ATTR_CONTAINER_NAME: () => (/* binding */ ATTR_CONTAINER_NAME),
/* harmony export */   ATTR_CONTAINER_RUNTIME: () => (/* binding */ ATTR_CONTAINER_RUNTIME),
/* harmony export */   ATTR_CPU_MODE: () => (/* binding */ ATTR_CPU_MODE),
/* harmony export */   ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* binding */ ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL),
/* harmony export */   ATTR_DB_CASSANDRA_COORDINATOR_DC: () => (/* binding */ ATTR_DB_CASSANDRA_COORDINATOR_DC),
/* harmony export */   ATTR_DB_CASSANDRA_COORDINATOR_ID: () => (/* binding */ ATTR_DB_CASSANDRA_COORDINATOR_ID),
/* harmony export */   ATTR_DB_CASSANDRA_IDEMPOTENCE: () => (/* binding */ ATTR_DB_CASSANDRA_IDEMPOTENCE),
/* harmony export */   ATTR_DB_CASSANDRA_PAGE_SIZE: () => (/* binding */ ATTR_DB_CASSANDRA_PAGE_SIZE),
/* harmony export */   ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* binding */ ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),
/* harmony export */   ATTR_DB_CASSANDRA_TABLE: () => (/* binding */ ATTR_DB_CASSANDRA_TABLE),
/* harmony export */   ATTR_DB_CLIENT_CONNECTIONS_POOL_NAME: () => (/* binding */ ATTR_DB_CLIENT_CONNECTIONS_POOL_NAME),
/* harmony export */   ATTR_DB_CLIENT_CONNECTIONS_STATE: () => (/* binding */ ATTR_DB_CLIENT_CONNECTIONS_STATE),
/* harmony export */   ATTR_DB_CLIENT_CONNECTION_POOL_NAME: () => (/* binding */ ATTR_DB_CLIENT_CONNECTION_POOL_NAME),
/* harmony export */   ATTR_DB_CLIENT_CONNECTION_STATE: () => (/* binding */ ATTR_DB_CLIENT_CONNECTION_STATE),
/* harmony export */   ATTR_DB_COLLECTION_NAME: () => (/* binding */ ATTR_DB_COLLECTION_NAME),
/* harmony export */   ATTR_DB_CONNECTION_STRING: () => (/* binding */ ATTR_DB_CONNECTION_STRING),
/* harmony export */   ATTR_DB_COSMOSDB_CLIENT_ID: () => (/* binding */ ATTR_DB_COSMOSDB_CLIENT_ID),
/* harmony export */   ATTR_DB_COSMOSDB_CONNECTION_MODE: () => (/* binding */ ATTR_DB_COSMOSDB_CONNECTION_MODE),
/* harmony export */   ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL: () => (/* binding */ ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL),
/* harmony export */   ATTR_DB_COSMOSDB_CONTAINER: () => (/* binding */ ATTR_DB_COSMOSDB_CONTAINER),
/* harmony export */   ATTR_DB_COSMOSDB_OPERATION_TYPE: () => (/* binding */ ATTR_DB_COSMOSDB_OPERATION_TYPE),
/* harmony export */   ATTR_DB_COSMOSDB_REGIONS_CONTACTED: () => (/* binding */ ATTR_DB_COSMOSDB_REGIONS_CONTACTED),
/* harmony export */   ATTR_DB_COSMOSDB_REQUEST_CHARGE: () => (/* binding */ ATTR_DB_COSMOSDB_REQUEST_CHARGE),
/* harmony export */   ATTR_DB_COSMOSDB_REQUEST_CONTENT_LENGTH: () => (/* binding */ ATTR_DB_COSMOSDB_REQUEST_CONTENT_LENGTH),
/* harmony export */   ATTR_DB_COSMOSDB_STATUS_CODE: () => (/* binding */ ATTR_DB_COSMOSDB_STATUS_CODE),
/* harmony export */   ATTR_DB_COSMOSDB_SUB_STATUS_CODE: () => (/* binding */ ATTR_DB_COSMOSDB_SUB_STATUS_CODE),
/* harmony export */   ATTR_DB_ELASTICSEARCH_CLUSTER_NAME: () => (/* binding */ ATTR_DB_ELASTICSEARCH_CLUSTER_NAME),
/* harmony export */   ATTR_DB_ELASTICSEARCH_NODE_NAME: () => (/* binding */ ATTR_DB_ELASTICSEARCH_NODE_NAME),
/* harmony export */   ATTR_DB_ELASTICSEARCH_PATH_PARTS: () => (/* binding */ ATTR_DB_ELASTICSEARCH_PATH_PARTS),
/* harmony export */   ATTR_DB_INSTANCE_ID: () => (/* binding */ ATTR_DB_INSTANCE_ID),
/* harmony export */   ATTR_DB_JDBC_DRIVER_CLASSNAME: () => (/* binding */ ATTR_DB_JDBC_DRIVER_CLASSNAME),
/* harmony export */   ATTR_DB_MONGODB_COLLECTION: () => (/* binding */ ATTR_DB_MONGODB_COLLECTION),
/* harmony export */   ATTR_DB_MSSQL_INSTANCE_NAME: () => (/* binding */ ATTR_DB_MSSQL_INSTANCE_NAME),
/* harmony export */   ATTR_DB_NAME: () => (/* binding */ ATTR_DB_NAME),
/* harmony export */   ATTR_DB_NAMESPACE: () => (/* binding */ ATTR_DB_NAMESPACE),
/* harmony export */   ATTR_DB_OPERATION: () => (/* binding */ ATTR_DB_OPERATION),
/* harmony export */   ATTR_DB_OPERATION_BATCH_SIZE: () => (/* binding */ ATTR_DB_OPERATION_BATCH_SIZE),
/* harmony export */   ATTR_DB_OPERATION_NAME: () => (/* binding */ ATTR_DB_OPERATION_NAME),
/* harmony export */   ATTR_DB_OPERATION_PARAMETER: () => (/* binding */ ATTR_DB_OPERATION_PARAMETER),
/* harmony export */   ATTR_DB_QUERY_PARAMETER: () => (/* binding */ ATTR_DB_QUERY_PARAMETER),
/* harmony export */   ATTR_DB_QUERY_SUMMARY: () => (/* binding */ ATTR_DB_QUERY_SUMMARY),
/* harmony export */   ATTR_DB_QUERY_TEXT: () => (/* binding */ ATTR_DB_QUERY_TEXT),
/* harmony export */   ATTR_DB_REDIS_DATABASE_INDEX: () => (/* binding */ ATTR_DB_REDIS_DATABASE_INDEX),
/* harmony export */   ATTR_DB_RESPONSE_RETURNED_ROWS: () => (/* binding */ ATTR_DB_RESPONSE_RETURNED_ROWS),
/* harmony export */   ATTR_DB_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_DB_RESPONSE_STATUS_CODE),
/* harmony export */   ATTR_DB_SQL_TABLE: () => (/* binding */ ATTR_DB_SQL_TABLE),
/* harmony export */   ATTR_DB_STATEMENT: () => (/* binding */ ATTR_DB_STATEMENT),
/* harmony export */   ATTR_DB_SYSTEM: () => (/* binding */ ATTR_DB_SYSTEM),
/* harmony export */   ATTR_DB_SYSTEM_NAME: () => (/* binding */ ATTR_DB_SYSTEM_NAME),
/* harmony export */   ATTR_DB_USER: () => (/* binding */ ATTR_DB_USER),
/* harmony export */   ATTR_DEPLOYMENT_ENVIRONMENT: () => (/* binding */ ATTR_DEPLOYMENT_ENVIRONMENT),
/* harmony export */   ATTR_DEPLOYMENT_ENVIRONMENT_NAME: () => (/* binding */ ATTR_DEPLOYMENT_ENVIRONMENT_NAME),
/* harmony export */   ATTR_DEPLOYMENT_ID: () => (/* binding */ ATTR_DEPLOYMENT_ID),
/* harmony export */   ATTR_DEPLOYMENT_NAME: () => (/* binding */ ATTR_DEPLOYMENT_NAME),
/* harmony export */   ATTR_DEPLOYMENT_STATUS: () => (/* binding */ ATTR_DEPLOYMENT_STATUS),
/* harmony export */   ATTR_DESTINATION_ADDRESS: () => (/* binding */ ATTR_DESTINATION_ADDRESS),
/* harmony export */   ATTR_DESTINATION_PORT: () => (/* binding */ ATTR_DESTINATION_PORT),
/* harmony export */   ATTR_DEVICE_ID: () => (/* binding */ ATTR_DEVICE_ID),
/* harmony export */   ATTR_DEVICE_MANUFACTURER: () => (/* binding */ ATTR_DEVICE_MANUFACTURER),
/* harmony export */   ATTR_DEVICE_MODEL_IDENTIFIER: () => (/* binding */ ATTR_DEVICE_MODEL_IDENTIFIER),
/* harmony export */   ATTR_DEVICE_MODEL_NAME: () => (/* binding */ ATTR_DEVICE_MODEL_NAME),
/* harmony export */   ATTR_DISK_IO_DIRECTION: () => (/* binding */ ATTR_DISK_IO_DIRECTION),
/* harmony export */   ATTR_DNS_QUESTION_NAME: () => (/* binding */ ATTR_DNS_QUESTION_NAME),
/* harmony export */   ATTR_ELASTICSEARCH_NODE_NAME: () => (/* binding */ ATTR_ELASTICSEARCH_NODE_NAME),
/* harmony export */   ATTR_ENDUSER_ID: () => (/* binding */ ATTR_ENDUSER_ID),
/* harmony export */   ATTR_ENDUSER_ROLE: () => (/* binding */ ATTR_ENDUSER_ROLE),
/* harmony export */   ATTR_ENDUSER_SCOPE: () => (/* binding */ ATTR_ENDUSER_SCOPE),
/* harmony export */   ATTR_EVENT_NAME: () => (/* binding */ ATTR_EVENT_NAME),
/* harmony export */   ATTR_FAAS_COLDSTART: () => (/* binding */ ATTR_FAAS_COLDSTART),
/* harmony export */   ATTR_FAAS_CRON: () => (/* binding */ ATTR_FAAS_CRON),
/* harmony export */   ATTR_FAAS_DOCUMENT_COLLECTION: () => (/* binding */ ATTR_FAAS_DOCUMENT_COLLECTION),
/* harmony export */   ATTR_FAAS_DOCUMENT_NAME: () => (/* binding */ ATTR_FAAS_DOCUMENT_NAME),
/* harmony export */   ATTR_FAAS_DOCUMENT_OPERATION: () => (/* binding */ ATTR_FAAS_DOCUMENT_OPERATION),
/* harmony export */   ATTR_FAAS_DOCUMENT_TIME: () => (/* binding */ ATTR_FAAS_DOCUMENT_TIME),
/* harmony export */   ATTR_FAAS_INSTANCE: () => (/* binding */ ATTR_FAAS_INSTANCE),
/* harmony export */   ATTR_FAAS_INVOCATION_ID: () => (/* binding */ ATTR_FAAS_INVOCATION_ID),
/* harmony export */   ATTR_FAAS_INVOKED_NAME: () => (/* binding */ ATTR_FAAS_INVOKED_NAME),
/* harmony export */   ATTR_FAAS_INVOKED_PROVIDER: () => (/* binding */ ATTR_FAAS_INVOKED_PROVIDER),
/* harmony export */   ATTR_FAAS_INVOKED_REGION: () => (/* binding */ ATTR_FAAS_INVOKED_REGION),
/* harmony export */   ATTR_FAAS_MAX_MEMORY: () => (/* binding */ ATTR_FAAS_MAX_MEMORY),
/* harmony export */   ATTR_FAAS_NAME: () => (/* binding */ ATTR_FAAS_NAME),
/* harmony export */   ATTR_FAAS_TIME: () => (/* binding */ ATTR_FAAS_TIME),
/* harmony export */   ATTR_FAAS_TRIGGER: () => (/* binding */ ATTR_FAAS_TRIGGER),
/* harmony export */   ATTR_FAAS_VERSION: () => (/* binding */ ATTR_FAAS_VERSION),
/* harmony export */   ATTR_FEATURE_FLAG_CONTEXT_ID: () => (/* binding */ ATTR_FEATURE_FLAG_CONTEXT_ID),
/* harmony export */   ATTR_FEATURE_FLAG_EVALUATION_ERROR_MESSAGE: () => (/* binding */ ATTR_FEATURE_FLAG_EVALUATION_ERROR_MESSAGE),
/* harmony export */   ATTR_FEATURE_FLAG_EVALUATION_REASON: () => (/* binding */ ATTR_FEATURE_FLAG_EVALUATION_REASON),
/* harmony export */   ATTR_FEATURE_FLAG_KEY: () => (/* binding */ ATTR_FEATURE_FLAG_KEY),
/* harmony export */   ATTR_FEATURE_FLAG_PROVIDER_NAME: () => (/* binding */ ATTR_FEATURE_FLAG_PROVIDER_NAME),
/* harmony export */   ATTR_FEATURE_FLAG_SET_ID: () => (/* binding */ ATTR_FEATURE_FLAG_SET_ID),
/* harmony export */   ATTR_FEATURE_FLAG_VARIANT: () => (/* binding */ ATTR_FEATURE_FLAG_VARIANT),
/* harmony export */   ATTR_FEATURE_FLAG_VERSION: () => (/* binding */ ATTR_FEATURE_FLAG_VERSION),
/* harmony export */   ATTR_FILE_ACCESSED: () => (/* binding */ ATTR_FILE_ACCESSED),
/* harmony export */   ATTR_FILE_ATTRIBUTES: () => (/* binding */ ATTR_FILE_ATTRIBUTES),
/* harmony export */   ATTR_FILE_CHANGED: () => (/* binding */ ATTR_FILE_CHANGED),
/* harmony export */   ATTR_FILE_CREATED: () => (/* binding */ ATTR_FILE_CREATED),
/* harmony export */   ATTR_FILE_DIRECTORY: () => (/* binding */ ATTR_FILE_DIRECTORY),
/* harmony export */   ATTR_FILE_EXTENSION: () => (/* binding */ ATTR_FILE_EXTENSION),
/* harmony export */   ATTR_FILE_FORK_NAME: () => (/* binding */ ATTR_FILE_FORK_NAME),
/* harmony export */   ATTR_FILE_GROUP_ID: () => (/* binding */ ATTR_FILE_GROUP_ID),
/* harmony export */   ATTR_FILE_GROUP_NAME: () => (/* binding */ ATTR_FILE_GROUP_NAME),
/* harmony export */   ATTR_FILE_INODE: () => (/* binding */ ATTR_FILE_INODE),
/* harmony export */   ATTR_FILE_MODE: () => (/* binding */ ATTR_FILE_MODE),
/* harmony export */   ATTR_FILE_MODIFIED: () => (/* binding */ ATTR_FILE_MODIFIED),
/* harmony export */   ATTR_FILE_NAME: () => (/* binding */ ATTR_FILE_NAME),
/* harmony export */   ATTR_FILE_OWNER_ID: () => (/* binding */ ATTR_FILE_OWNER_ID),
/* harmony export */   ATTR_FILE_OWNER_NAME: () => (/* binding */ ATTR_FILE_OWNER_NAME),
/* harmony export */   ATTR_FILE_PATH: () => (/* binding */ ATTR_FILE_PATH),
/* harmony export */   ATTR_FILE_SIZE: () => (/* binding */ ATTR_FILE_SIZE),
/* harmony export */   ATTR_FILE_SYMBOLIC_LINK_TARGET_PATH: () => (/* binding */ ATTR_FILE_SYMBOLIC_LINK_TARGET_PATH),
/* harmony export */   ATTR_GCP_CLIENT_SERVICE: () => (/* binding */ ATTR_GCP_CLIENT_SERVICE),
/* harmony export */   ATTR_GCP_CLOUD_RUN_JOB_EXECUTION: () => (/* binding */ ATTR_GCP_CLOUD_RUN_JOB_EXECUTION),
/* harmony export */   ATTR_GCP_CLOUD_RUN_JOB_TASK_INDEX: () => (/* binding */ ATTR_GCP_CLOUD_RUN_JOB_TASK_INDEX),
/* harmony export */   ATTR_GCP_GCE_INSTANCE_HOSTNAME: () => (/* binding */ ATTR_GCP_GCE_INSTANCE_HOSTNAME),
/* harmony export */   ATTR_GCP_GCE_INSTANCE_NAME: () => (/* binding */ ATTR_GCP_GCE_INSTANCE_NAME),
/* harmony export */   ATTR_GEN_AI_COMPLETION: () => (/* binding */ ATTR_GEN_AI_COMPLETION),
/* harmony export */   ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT: () => (/* binding */ ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT),
/* harmony export */   ATTR_GEN_AI_OPENAI_REQUEST_SEED: () => (/* binding */ ATTR_GEN_AI_OPENAI_REQUEST_SEED),
/* harmony export */   ATTR_GEN_AI_OPENAI_REQUEST_SERVICE_TIER: () => (/* binding */ ATTR_GEN_AI_OPENAI_REQUEST_SERVICE_TIER),
/* harmony export */   ATTR_GEN_AI_OPENAI_RESPONSE_SERVICE_TIER: () => (/* binding */ ATTR_GEN_AI_OPENAI_RESPONSE_SERVICE_TIER),
/* harmony export */   ATTR_GEN_AI_OPENAI_RESPONSE_SYSTEM_FINGERPRINT: () => (/* binding */ ATTR_GEN_AI_OPENAI_RESPONSE_SYSTEM_FINGERPRINT),
/* harmony export */   ATTR_GEN_AI_OPERATION_NAME: () => (/* binding */ ATTR_GEN_AI_OPERATION_NAME),
/* harmony export */   ATTR_GEN_AI_PROMPT: () => (/* binding */ ATTR_GEN_AI_PROMPT),
/* harmony export */   ATTR_GEN_AI_REQUEST_ENCODING_FORMATS: () => (/* binding */ ATTR_GEN_AI_REQUEST_ENCODING_FORMATS),
/* harmony export */   ATTR_GEN_AI_REQUEST_FREQUENCY_PENALTY: () => (/* binding */ ATTR_GEN_AI_REQUEST_FREQUENCY_PENALTY),
/* harmony export */   ATTR_GEN_AI_REQUEST_MAX_TOKENS: () => (/* binding */ ATTR_GEN_AI_REQUEST_MAX_TOKENS),
/* harmony export */   ATTR_GEN_AI_REQUEST_MODEL: () => (/* binding */ ATTR_GEN_AI_REQUEST_MODEL),
/* harmony export */   ATTR_GEN_AI_REQUEST_PRESENCE_PENALTY: () => (/* binding */ ATTR_GEN_AI_REQUEST_PRESENCE_PENALTY),
/* harmony export */   ATTR_GEN_AI_REQUEST_SEED: () => (/* binding */ ATTR_GEN_AI_REQUEST_SEED),
/* harmony export */   ATTR_GEN_AI_REQUEST_STOP_SEQUENCES: () => (/* binding */ ATTR_GEN_AI_REQUEST_STOP_SEQUENCES),
/* harmony export */   ATTR_GEN_AI_REQUEST_TEMPERATURE: () => (/* binding */ ATTR_GEN_AI_REQUEST_TEMPERATURE),
/* harmony export */   ATTR_GEN_AI_REQUEST_TOP_K: () => (/* binding */ ATTR_GEN_AI_REQUEST_TOP_K),
/* harmony export */   ATTR_GEN_AI_REQUEST_TOP_P: () => (/* binding */ ATTR_GEN_AI_REQUEST_TOP_P),
/* harmony export */   ATTR_GEN_AI_RESPONSE_FINISH_REASONS: () => (/* binding */ ATTR_GEN_AI_RESPONSE_FINISH_REASONS),
/* harmony export */   ATTR_GEN_AI_RESPONSE_ID: () => (/* binding */ ATTR_GEN_AI_RESPONSE_ID),
/* harmony export */   ATTR_GEN_AI_RESPONSE_MODEL: () => (/* binding */ ATTR_GEN_AI_RESPONSE_MODEL),
/* harmony export */   ATTR_GEN_AI_SYSTEM: () => (/* binding */ ATTR_GEN_AI_SYSTEM),
/* harmony export */   ATTR_GEN_AI_TOKEN_TYPE: () => (/* binding */ ATTR_GEN_AI_TOKEN_TYPE),
/* harmony export */   ATTR_GEN_AI_USAGE_COMPLETION_TOKENS: () => (/* binding */ ATTR_GEN_AI_USAGE_COMPLETION_TOKENS),
/* harmony export */   ATTR_GEN_AI_USAGE_INPUT_TOKENS: () => (/* binding */ ATTR_GEN_AI_USAGE_INPUT_TOKENS),
/* harmony export */   ATTR_GEN_AI_USAGE_OUTPUT_TOKENS: () => (/* binding */ ATTR_GEN_AI_USAGE_OUTPUT_TOKENS),
/* harmony export */   ATTR_GEN_AI_USAGE_PROMPT_TOKENS: () => (/* binding */ ATTR_GEN_AI_USAGE_PROMPT_TOKENS),
/* harmony export */   ATTR_GEO_CONTINENT_CODE: () => (/* binding */ ATTR_GEO_CONTINENT_CODE),
/* harmony export */   ATTR_GEO_COUNTRY_ISO_CODE: () => (/* binding */ ATTR_GEO_COUNTRY_ISO_CODE),
/* harmony export */   ATTR_GEO_LOCALITY_NAME: () => (/* binding */ ATTR_GEO_LOCALITY_NAME),
/* harmony export */   ATTR_GEO_LOCATION_LAT: () => (/* binding */ ATTR_GEO_LOCATION_LAT),
/* harmony export */   ATTR_GEO_LOCATION_LON: () => (/* binding */ ATTR_GEO_LOCATION_LON),
/* harmony export */   ATTR_GEO_POSTAL_CODE: () => (/* binding */ ATTR_GEO_POSTAL_CODE),
/* harmony export */   ATTR_GEO_REGION_ISO_CODE: () => (/* binding */ ATTR_GEO_REGION_ISO_CODE),
/* harmony export */   ATTR_GO_MEMORY_TYPE: () => (/* binding */ ATTR_GO_MEMORY_TYPE),
/* harmony export */   ATTR_GRAPHQL_DOCUMENT: () => (/* binding */ ATTR_GRAPHQL_DOCUMENT),
/* harmony export */   ATTR_GRAPHQL_OPERATION_NAME: () => (/* binding */ ATTR_GRAPHQL_OPERATION_NAME),
/* harmony export */   ATTR_GRAPHQL_OPERATION_TYPE: () => (/* binding */ ATTR_GRAPHQL_OPERATION_TYPE),
/* harmony export */   ATTR_HEROKU_APP_ID: () => (/* binding */ ATTR_HEROKU_APP_ID),
/* harmony export */   ATTR_HEROKU_RELEASE_COMMIT: () => (/* binding */ ATTR_HEROKU_RELEASE_COMMIT),
/* harmony export */   ATTR_HEROKU_RELEASE_CREATION_TIMESTAMP: () => (/* binding */ ATTR_HEROKU_RELEASE_CREATION_TIMESTAMP),
/* harmony export */   ATTR_HOST_ARCH: () => (/* binding */ ATTR_HOST_ARCH),
/* harmony export */   ATTR_HOST_CPU_CACHE_L2_SIZE: () => (/* binding */ ATTR_HOST_CPU_CACHE_L2_SIZE),
/* harmony export */   ATTR_HOST_CPU_FAMILY: () => (/* binding */ ATTR_HOST_CPU_FAMILY),
/* harmony export */   ATTR_HOST_CPU_MODEL_ID: () => (/* binding */ ATTR_HOST_CPU_MODEL_ID),
/* harmony export */   ATTR_HOST_CPU_MODEL_NAME: () => (/* binding */ ATTR_HOST_CPU_MODEL_NAME),
/* harmony export */   ATTR_HOST_CPU_STEPPING: () => (/* binding */ ATTR_HOST_CPU_STEPPING),
/* harmony export */   ATTR_HOST_CPU_VENDOR_ID: () => (/* binding */ ATTR_HOST_CPU_VENDOR_ID),
/* harmony export */   ATTR_HOST_ID: () => (/* binding */ ATTR_HOST_ID),
/* harmony export */   ATTR_HOST_IMAGE_ID: () => (/* binding */ ATTR_HOST_IMAGE_ID),
/* harmony export */   ATTR_HOST_IMAGE_NAME: () => (/* binding */ ATTR_HOST_IMAGE_NAME),
/* harmony export */   ATTR_HOST_IMAGE_VERSION: () => (/* binding */ ATTR_HOST_IMAGE_VERSION),
/* harmony export */   ATTR_HOST_IP: () => (/* binding */ ATTR_HOST_IP),
/* harmony export */   ATTR_HOST_MAC: () => (/* binding */ ATTR_HOST_MAC),
/* harmony export */   ATTR_HOST_NAME: () => (/* binding */ ATTR_HOST_NAME),
/* harmony export */   ATTR_HOST_TYPE: () => (/* binding */ ATTR_HOST_TYPE),
/* harmony export */   ATTR_HTTP_CLIENT_IP: () => (/* binding */ ATTR_HTTP_CLIENT_IP),
/* harmony export */   ATTR_HTTP_CONNECTION_STATE: () => (/* binding */ ATTR_HTTP_CONNECTION_STATE),
/* harmony export */   ATTR_HTTP_FLAVOR: () => (/* binding */ ATTR_HTTP_FLAVOR),
/* harmony export */   ATTR_HTTP_HOST: () => (/* binding */ ATTR_HTTP_HOST),
/* harmony export */   ATTR_HTTP_METHOD: () => (/* binding */ ATTR_HTTP_METHOD),
/* harmony export */   ATTR_HTTP_REQUEST_BODY_SIZE: () => (/* binding */ ATTR_HTTP_REQUEST_BODY_SIZE),
/* harmony export */   ATTR_HTTP_REQUEST_CONTENT_LENGTH: () => (/* binding */ ATTR_HTTP_REQUEST_CONTENT_LENGTH),
/* harmony export */   ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),
/* harmony export */   ATTR_HTTP_REQUEST_SIZE: () => (/* binding */ ATTR_HTTP_REQUEST_SIZE),
/* harmony export */   ATTR_HTTP_RESPONSE_BODY_SIZE: () => (/* binding */ ATTR_HTTP_RESPONSE_BODY_SIZE),
/* harmony export */   ATTR_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* binding */ ATTR_HTTP_RESPONSE_CONTENT_LENGTH),
/* harmony export */   ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),
/* harmony export */   ATTR_HTTP_RESPONSE_SIZE: () => (/* binding */ ATTR_HTTP_RESPONSE_SIZE),
/* harmony export */   ATTR_HTTP_SCHEME: () => (/* binding */ ATTR_HTTP_SCHEME),
/* harmony export */   ATTR_HTTP_SERVER_NAME: () => (/* binding */ ATTR_HTTP_SERVER_NAME),
/* harmony export */   ATTR_HTTP_STATUS_CODE: () => (/* binding */ ATTR_HTTP_STATUS_CODE),
/* harmony export */   ATTR_HTTP_TARGET: () => (/* binding */ ATTR_HTTP_TARGET),
/* harmony export */   ATTR_HTTP_URL: () => (/* binding */ ATTR_HTTP_URL),
/* harmony export */   ATTR_HTTP_USER_AGENT: () => (/* binding */ ATTR_HTTP_USER_AGENT),
/* harmony export */   ATTR_HW_ID: () => (/* binding */ ATTR_HW_ID),
/* harmony export */   ATTR_HW_NAME: () => (/* binding */ ATTR_HW_NAME),
/* harmony export */   ATTR_HW_PARENT: () => (/* binding */ ATTR_HW_PARENT),
/* harmony export */   ATTR_HW_STATE: () => (/* binding */ ATTR_HW_STATE),
/* harmony export */   ATTR_HW_TYPE: () => (/* binding */ ATTR_HW_TYPE),
/* harmony export */   ATTR_IOS_STATE: () => (/* binding */ ATTR_IOS_STATE),
/* harmony export */   ATTR_JVM_BUFFER_POOL_NAME: () => (/* binding */ ATTR_JVM_BUFFER_POOL_NAME),
/* harmony export */   ATTR_K8S_CLUSTER_NAME: () => (/* binding */ ATTR_K8S_CLUSTER_NAME),
/* harmony export */   ATTR_K8S_CLUSTER_UID: () => (/* binding */ ATTR_K8S_CLUSTER_UID),
/* harmony export */   ATTR_K8S_CONTAINER_NAME: () => (/* binding */ ATTR_K8S_CONTAINER_NAME),
/* harmony export */   ATTR_K8S_CONTAINER_RESTART_COUNT: () => (/* binding */ ATTR_K8S_CONTAINER_RESTART_COUNT),
/* harmony export */   ATTR_K8S_CONTAINER_STATUS_LAST_TERMINATED_REASON: () => (/* binding */ ATTR_K8S_CONTAINER_STATUS_LAST_TERMINATED_REASON),
/* harmony export */   ATTR_K8S_CRONJOB_NAME: () => (/* binding */ ATTR_K8S_CRONJOB_NAME),
/* harmony export */   ATTR_K8S_CRONJOB_UID: () => (/* binding */ ATTR_K8S_CRONJOB_UID),
/* harmony export */   ATTR_K8S_DAEMONSET_NAME: () => (/* binding */ ATTR_K8S_DAEMONSET_NAME),
/* harmony export */   ATTR_K8S_DAEMONSET_UID: () => (/* binding */ ATTR_K8S_DAEMONSET_UID),
/* harmony export */   ATTR_K8S_DEPLOYMENT_NAME: () => (/* binding */ ATTR_K8S_DEPLOYMENT_NAME),
/* harmony export */   ATTR_K8S_DEPLOYMENT_UID: () => (/* binding */ ATTR_K8S_DEPLOYMENT_UID),
/* harmony export */   ATTR_K8S_JOB_NAME: () => (/* binding */ ATTR_K8S_JOB_NAME),
/* harmony export */   ATTR_K8S_JOB_UID: () => (/* binding */ ATTR_K8S_JOB_UID),
/* harmony export */   ATTR_K8S_NAMESPACE_NAME: () => (/* binding */ ATTR_K8S_NAMESPACE_NAME),
/* harmony export */   ATTR_K8S_NAMESPACE_PHASE: () => (/* binding */ ATTR_K8S_NAMESPACE_PHASE),
/* harmony export */   ATTR_K8S_NODE_NAME: () => (/* binding */ ATTR_K8S_NODE_NAME),
/* harmony export */   ATTR_K8S_NODE_UID: () => (/* binding */ ATTR_K8S_NODE_UID),
/* harmony export */   ATTR_K8S_POD_ANNOTATION: () => (/* binding */ ATTR_K8S_POD_ANNOTATION),
/* harmony export */   ATTR_K8S_POD_LABEL: () => (/* binding */ ATTR_K8S_POD_LABEL),
/* harmony export */   ATTR_K8S_POD_LABELS: () => (/* binding */ ATTR_K8S_POD_LABELS),
/* harmony export */   ATTR_K8S_POD_NAME: () => (/* binding */ ATTR_K8S_POD_NAME),
/* harmony export */   ATTR_K8S_POD_UID: () => (/* binding */ ATTR_K8S_POD_UID),
/* harmony export */   ATTR_K8S_REPLICASET_NAME: () => (/* binding */ ATTR_K8S_REPLICASET_NAME),
/* harmony export */   ATTR_K8S_REPLICASET_UID: () => (/* binding */ ATTR_K8S_REPLICASET_UID),
/* harmony export */   ATTR_K8S_STATEFULSET_NAME: () => (/* binding */ ATTR_K8S_STATEFULSET_NAME),
/* harmony export */   ATTR_K8S_STATEFULSET_UID: () => (/* binding */ ATTR_K8S_STATEFULSET_UID),
/* harmony export */   ATTR_K8S_VOLUME_NAME: () => (/* binding */ ATTR_K8S_VOLUME_NAME),
/* harmony export */   ATTR_K8S_VOLUME_TYPE: () => (/* binding */ ATTR_K8S_VOLUME_TYPE),
/* harmony export */   ATTR_LINUX_MEMORY_SLAB_STATE: () => (/* binding */ ATTR_LINUX_MEMORY_SLAB_STATE),
/* harmony export */   ATTR_LOG_FILE_NAME: () => (/* binding */ ATTR_LOG_FILE_NAME),
/* harmony export */   ATTR_LOG_FILE_NAME_RESOLVED: () => (/* binding */ ATTR_LOG_FILE_NAME_RESOLVED),
/* harmony export */   ATTR_LOG_FILE_PATH: () => (/* binding */ ATTR_LOG_FILE_PATH),
/* harmony export */   ATTR_LOG_FILE_PATH_RESOLVED: () => (/* binding */ ATTR_LOG_FILE_PATH_RESOLVED),
/* harmony export */   ATTR_LOG_IOSTREAM: () => (/* binding */ ATTR_LOG_IOSTREAM),
/* harmony export */   ATTR_LOG_RECORD_ORIGINAL: () => (/* binding */ ATTR_LOG_RECORD_ORIGINAL),
/* harmony export */   ATTR_LOG_RECORD_UID: () => (/* binding */ ATTR_LOG_RECORD_UID),
/* harmony export */   ATTR_MESSAGE_COMPRESSED_SIZE: () => (/* binding */ ATTR_MESSAGE_COMPRESSED_SIZE),
/* harmony export */   ATTR_MESSAGE_ID: () => (/* binding */ ATTR_MESSAGE_ID),
/* harmony export */   ATTR_MESSAGE_TYPE: () => (/* binding */ ATTR_MESSAGE_TYPE),
/* harmony export */   ATTR_MESSAGE_UNCOMPRESSED_SIZE: () => (/* binding */ ATTR_MESSAGE_UNCOMPRESSED_SIZE),
/* harmony export */   ATTR_MESSAGING_BATCH_MESSAGE_COUNT: () => (/* binding */ ATTR_MESSAGING_BATCH_MESSAGE_COUNT),
/* harmony export */   ATTR_MESSAGING_CLIENT_ID: () => (/* binding */ ATTR_MESSAGING_CLIENT_ID),
/* harmony export */   ATTR_MESSAGING_CONSUMER_GROUP_NAME: () => (/* binding */ ATTR_MESSAGING_CONSUMER_GROUP_NAME),
/* harmony export */   ATTR_MESSAGING_DESTINATION_ANONYMOUS: () => (/* binding */ ATTR_MESSAGING_DESTINATION_ANONYMOUS),
/* harmony export */   ATTR_MESSAGING_DESTINATION_NAME: () => (/* binding */ ATTR_MESSAGING_DESTINATION_NAME),
/* harmony export */   ATTR_MESSAGING_DESTINATION_PARTITION_ID: () => (/* binding */ ATTR_MESSAGING_DESTINATION_PARTITION_ID),
/* harmony export */   ATTR_MESSAGING_DESTINATION_PUBLISH_ANONYMOUS: () => (/* binding */ ATTR_MESSAGING_DESTINATION_PUBLISH_ANONYMOUS),
/* harmony export */   ATTR_MESSAGING_DESTINATION_PUBLISH_NAME: () => (/* binding */ ATTR_MESSAGING_DESTINATION_PUBLISH_NAME),
/* harmony export */   ATTR_MESSAGING_DESTINATION_SUBSCRIPTION_NAME: () => (/* binding */ ATTR_MESSAGING_DESTINATION_SUBSCRIPTION_NAME),
/* harmony export */   ATTR_MESSAGING_DESTINATION_TEMPLATE: () => (/* binding */ ATTR_MESSAGING_DESTINATION_TEMPLATE),
/* harmony export */   ATTR_MESSAGING_DESTINATION_TEMPORARY: () => (/* binding */ ATTR_MESSAGING_DESTINATION_TEMPORARY),
/* harmony export */   ATTR_MESSAGING_EVENTHUBS_CONSUMER_GROUP: () => (/* binding */ ATTR_MESSAGING_EVENTHUBS_CONSUMER_GROUP),
/* harmony export */   ATTR_MESSAGING_EVENTHUBS_MESSAGE_ENQUEUED_TIME: () => (/* binding */ ATTR_MESSAGING_EVENTHUBS_MESSAGE_ENQUEUED_TIME),
/* harmony export */   ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_DEADLINE: () => (/* binding */ ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_DEADLINE),
/* harmony export */   ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_ID: () => (/* binding */ ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_ID),
/* harmony export */   ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_DELIVERY_ATTEMPT: () => (/* binding */ ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_DELIVERY_ATTEMPT),
/* harmony export */   ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ORDERING_KEY: () => (/* binding */ ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ORDERING_KEY),
/* harmony export */   ATTR_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* binding */ ATTR_MESSAGING_KAFKA_CONSUMER_GROUP),
/* harmony export */   ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION: () => (/* binding */ ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION),
/* harmony export */   ATTR_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* binding */ ATTR_MESSAGING_KAFKA_MESSAGE_KEY),
/* harmony export */   ATTR_MESSAGING_KAFKA_MESSAGE_OFFSET: () => (/* binding */ ATTR_MESSAGING_KAFKA_MESSAGE_OFFSET),
/* harmony export */   ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE: () => (/* binding */ ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE),
/* harmony export */   ATTR_MESSAGING_KAFKA_OFFSET: () => (/* binding */ ATTR_MESSAGING_KAFKA_OFFSET),
/* harmony export */   ATTR_MESSAGING_MESSAGE_BODY_SIZE: () => (/* binding */ ATTR_MESSAGING_MESSAGE_BODY_SIZE),
/* harmony export */   ATTR_MESSAGING_MESSAGE_CONVERSATION_ID: () => (/* binding */ ATTR_MESSAGING_MESSAGE_CONVERSATION_ID),
/* harmony export */   ATTR_MESSAGING_MESSAGE_ENVELOPE_SIZE: () => (/* binding */ ATTR_MESSAGING_MESSAGE_ENVELOPE_SIZE),
/* harmony export */   ATTR_MESSAGING_MESSAGE_ID: () => (/* binding */ ATTR_MESSAGING_MESSAGE_ID),
/* harmony export */   ATTR_MESSAGING_OPERATION: () => (/* binding */ ATTR_MESSAGING_OPERATION),
/* harmony export */   ATTR_MESSAGING_OPERATION_NAME: () => (/* binding */ ATTR_MESSAGING_OPERATION_NAME),
/* harmony export */   ATTR_MESSAGING_OPERATION_TYPE: () => (/* binding */ ATTR_MESSAGING_OPERATION_TYPE),
/* harmony export */   ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY: () => (/* binding */ ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY),
/* harmony export */   ATTR_MESSAGING_RABBITMQ_MESSAGE_DELIVERY_TAG: () => (/* binding */ ATTR_MESSAGING_RABBITMQ_MESSAGE_DELIVERY_TAG),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_CLIENT_GROUP: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_CLIENT_GROUP),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_CONSUMPTION_MODEL: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_CONSUMPTION_MODEL),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELAY_TIME_LEVEL: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELAY_TIME_LEVEL),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELIVERY_TIMESTAMP: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELIVERY_TIMESTAMP),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_GROUP: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_GROUP),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_KEYS: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_KEYS),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_TAG: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_TAG),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE),
/* harmony export */   ATTR_MESSAGING_ROCKETMQ_NAMESPACE: () => (/* binding */ ATTR_MESSAGING_ROCKETMQ_NAMESPACE),
/* harmony export */   ATTR_MESSAGING_SERVICEBUS_DESTINATION_SUBSCRIPTION_NAME: () => (/* binding */ ATTR_MESSAGING_SERVICEBUS_DESTINATION_SUBSCRIPTION_NAME),
/* harmony export */   ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS: () => (/* binding */ ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS),
/* harmony export */   ATTR_MESSAGING_SERVICEBUS_MESSAGE_DELIVERY_COUNT: () => (/* binding */ ATTR_MESSAGING_SERVICEBUS_MESSAGE_DELIVERY_COUNT),
/* harmony export */   ATTR_MESSAGING_SERVICEBUS_MESSAGE_ENQUEUED_TIME: () => (/* binding */ ATTR_MESSAGING_SERVICEBUS_MESSAGE_ENQUEUED_TIME),
/* harmony export */   ATTR_MESSAGING_SYSTEM: () => (/* binding */ ATTR_MESSAGING_SYSTEM),
/* harmony export */   ATTR_NETWORK_CARRIER_ICC: () => (/* binding */ ATTR_NETWORK_CARRIER_ICC),
/* harmony export */   ATTR_NETWORK_CARRIER_MCC: () => (/* binding */ ATTR_NETWORK_CARRIER_MCC),
/* harmony export */   ATTR_NETWORK_CARRIER_MNC: () => (/* binding */ ATTR_NETWORK_CARRIER_MNC),
/* harmony export */   ATTR_NETWORK_CARRIER_NAME: () => (/* binding */ ATTR_NETWORK_CARRIER_NAME),
/* harmony export */   ATTR_NETWORK_CONNECTION_STATE: () => (/* binding */ ATTR_NETWORK_CONNECTION_STATE),
/* harmony export */   ATTR_NETWORK_CONNECTION_SUBTYPE: () => (/* binding */ ATTR_NETWORK_CONNECTION_SUBTYPE),
/* harmony export */   ATTR_NETWORK_CONNECTION_TYPE: () => (/* binding */ ATTR_NETWORK_CONNECTION_TYPE),
/* harmony export */   ATTR_NETWORK_INTERFACE_NAME: () => (/* binding */ ATTR_NETWORK_INTERFACE_NAME),
/* harmony export */   ATTR_NETWORK_IO_DIRECTION: () => (/* binding */ ATTR_NETWORK_IO_DIRECTION),
/* harmony export */   ATTR_NET_HOST_IP: () => (/* binding */ ATTR_NET_HOST_IP),
/* harmony export */   ATTR_NET_HOST_NAME: () => (/* binding */ ATTR_NET_HOST_NAME),
/* harmony export */   ATTR_NET_HOST_PORT: () => (/* binding */ ATTR_NET_HOST_PORT),
/* harmony export */   ATTR_NET_PEER_IP: () => (/* binding */ ATTR_NET_PEER_IP),
/* harmony export */   ATTR_NET_PEER_NAME: () => (/* binding */ ATTR_NET_PEER_NAME),
/* harmony export */   ATTR_NET_PEER_PORT: () => (/* binding */ ATTR_NET_PEER_PORT),
/* harmony export */   ATTR_NET_PROTOCOL_NAME: () => (/* binding */ ATTR_NET_PROTOCOL_NAME),
/* harmony export */   ATTR_NET_PROTOCOL_VERSION: () => (/* binding */ ATTR_NET_PROTOCOL_VERSION),
/* harmony export */   ATTR_NET_SOCK_FAMILY: () => (/* binding */ ATTR_NET_SOCK_FAMILY),
/* harmony export */   ATTR_NET_SOCK_HOST_ADDR: () => (/* binding */ ATTR_NET_SOCK_HOST_ADDR),
/* harmony export */   ATTR_NET_SOCK_HOST_PORT: () => (/* binding */ ATTR_NET_SOCK_HOST_PORT),
/* harmony export */   ATTR_NET_SOCK_PEER_ADDR: () => (/* binding */ ATTR_NET_SOCK_PEER_ADDR),
/* harmony export */   ATTR_NET_SOCK_PEER_NAME: () => (/* binding */ ATTR_NET_SOCK_PEER_NAME),
/* harmony export */   ATTR_NET_SOCK_PEER_PORT: () => (/* binding */ ATTR_NET_SOCK_PEER_PORT),
/* harmony export */   ATTR_NET_TRANSPORT: () => (/* binding */ ATTR_NET_TRANSPORT),
/* harmony export */   ATTR_NODEJS_EVENTLOOP_STATE: () => (/* binding */ ATTR_NODEJS_EVENTLOOP_STATE),
/* harmony export */   ATTR_OCI_MANIFEST_DIGEST: () => (/* binding */ ATTR_OCI_MANIFEST_DIGEST),
/* harmony export */   ATTR_OPENTRACING_REF_TYPE: () => (/* binding */ ATTR_OPENTRACING_REF_TYPE),
/* harmony export */   ATTR_OS_BUILD_ID: () => (/* binding */ ATTR_OS_BUILD_ID),
/* harmony export */   ATTR_OS_DESCRIPTION: () => (/* binding */ ATTR_OS_DESCRIPTION),
/* harmony export */   ATTR_OS_NAME: () => (/* binding */ ATTR_OS_NAME),
/* harmony export */   ATTR_OS_TYPE: () => (/* binding */ ATTR_OS_TYPE),
/* harmony export */   ATTR_OS_VERSION: () => (/* binding */ ATTR_OS_VERSION),
/* harmony export */   ATTR_OTEL_LIBRARY_NAME: () => (/* binding */ ATTR_OTEL_LIBRARY_NAME),
/* harmony export */   ATTR_OTEL_LIBRARY_VERSION: () => (/* binding */ ATTR_OTEL_LIBRARY_VERSION),
/* harmony export */   ATTR_PEER_SERVICE: () => (/* binding */ ATTR_PEER_SERVICE),
/* harmony export */   ATTR_POOL_NAME: () => (/* binding */ ATTR_POOL_NAME),
/* harmony export */   ATTR_PROCESS_ARGS_COUNT: () => (/* binding */ ATTR_PROCESS_ARGS_COUNT),
/* harmony export */   ATTR_PROCESS_COMMAND: () => (/* binding */ ATTR_PROCESS_COMMAND),
/* harmony export */   ATTR_PROCESS_COMMAND_ARGS: () => (/* binding */ ATTR_PROCESS_COMMAND_ARGS),
/* harmony export */   ATTR_PROCESS_COMMAND_LINE: () => (/* binding */ ATTR_PROCESS_COMMAND_LINE),
/* harmony export */   ATTR_PROCESS_CONTEXT_SWITCH_TYPE: () => (/* binding */ ATTR_PROCESS_CONTEXT_SWITCH_TYPE),
/* harmony export */   ATTR_PROCESS_CPU_STATE: () => (/* binding */ ATTR_PROCESS_CPU_STATE),
/* harmony export */   ATTR_PROCESS_CREATION_TIME: () => (/* binding */ ATTR_PROCESS_CREATION_TIME),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_BUILD_ID_GNU: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_BUILD_ID_GNU),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_BUILD_ID_GO: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_BUILD_ID_GO),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_BUILD_ID_HTLHASH: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_BUILD_ID_HTLHASH),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_BUILD_ID_PROFILING: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_BUILD_ID_PROFILING),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_NAME: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_NAME),
/* harmony export */   ATTR_PROCESS_EXECUTABLE_PATH: () => (/* binding */ ATTR_PROCESS_EXECUTABLE_PATH),
/* harmony export */   ATTR_PROCESS_EXIT_CODE: () => (/* binding */ ATTR_PROCESS_EXIT_CODE),
/* harmony export */   ATTR_PROCESS_EXIT_TIME: () => (/* binding */ ATTR_PROCESS_EXIT_TIME),
/* harmony export */   ATTR_PROCESS_GROUP_LEADER_PID: () => (/* binding */ ATTR_PROCESS_GROUP_LEADER_PID),
/* harmony export */   ATTR_PROCESS_INTERACTIVE: () => (/* binding */ ATTR_PROCESS_INTERACTIVE),
/* harmony export */   ATTR_PROCESS_LINUX_CGROUP: () => (/* binding */ ATTR_PROCESS_LINUX_CGROUP),
/* harmony export */   ATTR_PROCESS_OWNER: () => (/* binding */ ATTR_PROCESS_OWNER),
/* harmony export */   ATTR_PROCESS_PAGING_FAULT_TYPE: () => (/* binding */ ATTR_PROCESS_PAGING_FAULT_TYPE),
/* harmony export */   ATTR_PROCESS_PARENT_PID: () => (/* binding */ ATTR_PROCESS_PARENT_PID),
/* harmony export */   ATTR_PROCESS_PID: () => (/* binding */ ATTR_PROCESS_PID),
/* harmony export */   ATTR_PROCESS_REAL_USER_ID: () => (/* binding */ ATTR_PROCESS_REAL_USER_ID),
/* harmony export */   ATTR_PROCESS_REAL_USER_NAME: () => (/* binding */ ATTR_PROCESS_REAL_USER_NAME),
/* harmony export */   ATTR_PROCESS_RUNTIME_DESCRIPTION: () => (/* binding */ ATTR_PROCESS_RUNTIME_DESCRIPTION),
/* harmony export */   ATTR_PROCESS_RUNTIME_NAME: () => (/* binding */ ATTR_PROCESS_RUNTIME_NAME),
/* harmony export */   ATTR_PROCESS_RUNTIME_VERSION: () => (/* binding */ ATTR_PROCESS_RUNTIME_VERSION),
/* harmony export */   ATTR_PROCESS_SAVED_USER_ID: () => (/* binding */ ATTR_PROCESS_SAVED_USER_ID),
/* harmony export */   ATTR_PROCESS_SAVED_USER_NAME: () => (/* binding */ ATTR_PROCESS_SAVED_USER_NAME),
/* harmony export */   ATTR_PROCESS_SESSION_LEADER_PID: () => (/* binding */ ATTR_PROCESS_SESSION_LEADER_PID),
/* harmony export */   ATTR_PROCESS_TITLE: () => (/* binding */ ATTR_PROCESS_TITLE),
/* harmony export */   ATTR_PROCESS_USER_ID: () => (/* binding */ ATTR_PROCESS_USER_ID),
/* harmony export */   ATTR_PROCESS_USER_NAME: () => (/* binding */ ATTR_PROCESS_USER_NAME),
/* harmony export */   ATTR_PROCESS_VPID: () => (/* binding */ ATTR_PROCESS_VPID),
/* harmony export */   ATTR_PROCESS_WORKING_DIRECTORY: () => (/* binding */ ATTR_PROCESS_WORKING_DIRECTORY),
/* harmony export */   ATTR_PROFILE_FRAME_TYPE: () => (/* binding */ ATTR_PROFILE_FRAME_TYPE),
/* harmony export */   ATTR_RPC_CONNECT_RPC_ERROR_CODE: () => (/* binding */ ATTR_RPC_CONNECT_RPC_ERROR_CODE),
/* harmony export */   ATTR_RPC_CONNECT_RPC_REQUEST_METADATA: () => (/* binding */ ATTR_RPC_CONNECT_RPC_REQUEST_METADATA),
/* harmony export */   ATTR_RPC_CONNECT_RPC_RESPONSE_METADATA: () => (/* binding */ ATTR_RPC_CONNECT_RPC_RESPONSE_METADATA),
/* harmony export */   ATTR_RPC_GRPC_REQUEST_METADATA: () => (/* binding */ ATTR_RPC_GRPC_REQUEST_METADATA),
/* harmony export */   ATTR_RPC_GRPC_RESPONSE_METADATA: () => (/* binding */ ATTR_RPC_GRPC_RESPONSE_METADATA),
/* harmony export */   ATTR_RPC_GRPC_STATUS_CODE: () => (/* binding */ ATTR_RPC_GRPC_STATUS_CODE),
/* harmony export */   ATTR_RPC_JSONRPC_ERROR_CODE: () => (/* binding */ ATTR_RPC_JSONRPC_ERROR_CODE),
/* harmony export */   ATTR_RPC_JSONRPC_ERROR_MESSAGE: () => (/* binding */ ATTR_RPC_JSONRPC_ERROR_MESSAGE),
/* harmony export */   ATTR_RPC_JSONRPC_REQUEST_ID: () => (/* binding */ ATTR_RPC_JSONRPC_REQUEST_ID),
/* harmony export */   ATTR_RPC_JSONRPC_VERSION: () => (/* binding */ ATTR_RPC_JSONRPC_VERSION),
/* harmony export */   ATTR_RPC_MESSAGE_COMPRESSED_SIZE: () => (/* binding */ ATTR_RPC_MESSAGE_COMPRESSED_SIZE),
/* harmony export */   ATTR_RPC_MESSAGE_ID: () => (/* binding */ ATTR_RPC_MESSAGE_ID),
/* harmony export */   ATTR_RPC_MESSAGE_TYPE: () => (/* binding */ ATTR_RPC_MESSAGE_TYPE),
/* harmony export */   ATTR_RPC_MESSAGE_UNCOMPRESSED_SIZE: () => (/* binding */ ATTR_RPC_MESSAGE_UNCOMPRESSED_SIZE),
/* harmony export */   ATTR_RPC_METHOD: () => (/* binding */ ATTR_RPC_METHOD),
/* harmony export */   ATTR_RPC_SERVICE: () => (/* binding */ ATTR_RPC_SERVICE),
/* harmony export */   ATTR_RPC_SYSTEM: () => (/* binding */ ATTR_RPC_SYSTEM),
/* harmony export */   ATTR_SECURITY_RULE_CATEGORY: () => (/* binding */ ATTR_SECURITY_RULE_CATEGORY),
/* harmony export */   ATTR_SECURITY_RULE_DESCRIPTION: () => (/* binding */ ATTR_SECURITY_RULE_DESCRIPTION),
/* harmony export */   ATTR_SECURITY_RULE_LICENSE: () => (/* binding */ ATTR_SECURITY_RULE_LICENSE),
/* harmony export */   ATTR_SECURITY_RULE_NAME: () => (/* binding */ ATTR_SECURITY_RULE_NAME),
/* harmony export */   ATTR_SECURITY_RULE_REFERENCE: () => (/* binding */ ATTR_SECURITY_RULE_REFERENCE),
/* harmony export */   ATTR_SECURITY_RULE_RULESET_NAME: () => (/* binding */ ATTR_SECURITY_RULE_RULESET_NAME),
/* harmony export */   ATTR_SECURITY_RULE_UUID: () => (/* binding */ ATTR_SECURITY_RULE_UUID),
/* harmony export */   ATTR_SECURITY_RULE_VERSION: () => (/* binding */ ATTR_SECURITY_RULE_VERSION),
/* harmony export */   ATTR_SERVICE_INSTANCE_ID: () => (/* binding */ ATTR_SERVICE_INSTANCE_ID),
/* harmony export */   ATTR_SERVICE_NAMESPACE: () => (/* binding */ ATTR_SERVICE_NAMESPACE),
/* harmony export */   ATTR_SESSION_ID: () => (/* binding */ ATTR_SESSION_ID),
/* harmony export */   ATTR_SESSION_PREVIOUS_ID: () => (/* binding */ ATTR_SESSION_PREVIOUS_ID),
/* harmony export */   ATTR_SOURCE_ADDRESS: () => (/* binding */ ATTR_SOURCE_ADDRESS),
/* harmony export */   ATTR_SOURCE_PORT: () => (/* binding */ ATTR_SOURCE_PORT),
/* harmony export */   ATTR_STATE: () => (/* binding */ ATTR_STATE),
/* harmony export */   ATTR_SYSTEM_CPU_LOGICAL_NUMBER: () => (/* binding */ ATTR_SYSTEM_CPU_LOGICAL_NUMBER),
/* harmony export */   ATTR_SYSTEM_CPU_STATE: () => (/* binding */ ATTR_SYSTEM_CPU_STATE),
/* harmony export */   ATTR_SYSTEM_DEVICE: () => (/* binding */ ATTR_SYSTEM_DEVICE),
/* harmony export */   ATTR_SYSTEM_FILESYSTEM_MODE: () => (/* binding */ ATTR_SYSTEM_FILESYSTEM_MODE),
/* harmony export */   ATTR_SYSTEM_FILESYSTEM_MOUNTPOINT: () => (/* binding */ ATTR_SYSTEM_FILESYSTEM_MOUNTPOINT),
/* harmony export */   ATTR_SYSTEM_FILESYSTEM_STATE: () => (/* binding */ ATTR_SYSTEM_FILESYSTEM_STATE),
/* harmony export */   ATTR_SYSTEM_FILESYSTEM_TYPE: () => (/* binding */ ATTR_SYSTEM_FILESYSTEM_TYPE),
/* harmony export */   ATTR_SYSTEM_MEMORY_STATE: () => (/* binding */ ATTR_SYSTEM_MEMORY_STATE),
/* harmony export */   ATTR_SYSTEM_NETWORK_STATE: () => (/* binding */ ATTR_SYSTEM_NETWORK_STATE),
/* harmony export */   ATTR_SYSTEM_PAGING_DIRECTION: () => (/* binding */ ATTR_SYSTEM_PAGING_DIRECTION),
/* harmony export */   ATTR_SYSTEM_PAGING_STATE: () => (/* binding */ ATTR_SYSTEM_PAGING_STATE),
/* harmony export */   ATTR_SYSTEM_PAGING_TYPE: () => (/* binding */ ATTR_SYSTEM_PAGING_TYPE),
/* harmony export */   ATTR_SYSTEM_PROCESSES_STATUS: () => (/* binding */ ATTR_SYSTEM_PROCESSES_STATUS),
/* harmony export */   ATTR_SYSTEM_PROCESS_STATUS: () => (/* binding */ ATTR_SYSTEM_PROCESS_STATUS),
/* harmony export */   ATTR_TELEMETRY_DISTRO_NAME: () => (/* binding */ ATTR_TELEMETRY_DISTRO_NAME),
/* harmony export */   ATTR_TELEMETRY_DISTRO_VERSION: () => (/* binding */ ATTR_TELEMETRY_DISTRO_VERSION),
/* harmony export */   ATTR_TEST_CASE_NAME: () => (/* binding */ ATTR_TEST_CASE_NAME),
/* harmony export */   ATTR_TEST_CASE_RESULT_STATUS: () => (/* binding */ ATTR_TEST_CASE_RESULT_STATUS),
/* harmony export */   ATTR_TEST_SUITE_NAME: () => (/* binding */ ATTR_TEST_SUITE_NAME),
/* harmony export */   ATTR_TEST_SUITE_RUN_STATUS: () => (/* binding */ ATTR_TEST_SUITE_RUN_STATUS),
/* harmony export */   ATTR_THREAD_ID: () => (/* binding */ ATTR_THREAD_ID),
/* harmony export */   ATTR_THREAD_NAME: () => (/* binding */ ATTR_THREAD_NAME),
/* harmony export */   ATTR_TLS_CIPHER: () => (/* binding */ ATTR_TLS_CIPHER),
/* harmony export */   ATTR_TLS_CLIENT_CERTIFICATE: () => (/* binding */ ATTR_TLS_CLIENT_CERTIFICATE),
/* harmony export */   ATTR_TLS_CLIENT_CERTIFICATE_CHAIN: () => (/* binding */ ATTR_TLS_CLIENT_CERTIFICATE_CHAIN),
/* harmony export */   ATTR_TLS_CLIENT_HASH_MD5: () => (/* binding */ ATTR_TLS_CLIENT_HASH_MD5),
/* harmony export */   ATTR_TLS_CLIENT_HASH_SHA1: () => (/* binding */ ATTR_TLS_CLIENT_HASH_SHA1),
/* harmony export */   ATTR_TLS_CLIENT_HASH_SHA256: () => (/* binding */ ATTR_TLS_CLIENT_HASH_SHA256),
/* harmony export */   ATTR_TLS_CLIENT_ISSUER: () => (/* binding */ ATTR_TLS_CLIENT_ISSUER),
/* harmony export */   ATTR_TLS_CLIENT_JA3: () => (/* binding */ ATTR_TLS_CLIENT_JA3),
/* harmony export */   ATTR_TLS_CLIENT_NOT_AFTER: () => (/* binding */ ATTR_TLS_CLIENT_NOT_AFTER),
/* harmony export */   ATTR_TLS_CLIENT_NOT_BEFORE: () => (/* binding */ ATTR_TLS_CLIENT_NOT_BEFORE),
/* harmony export */   ATTR_TLS_CLIENT_SERVER_NAME: () => (/* binding */ ATTR_TLS_CLIENT_SERVER_NAME),
/* harmony export */   ATTR_TLS_CLIENT_SUBJECT: () => (/* binding */ ATTR_TLS_CLIENT_SUBJECT),
/* harmony export */   ATTR_TLS_CLIENT_SUPPORTED_CIPHERS: () => (/* binding */ ATTR_TLS_CLIENT_SUPPORTED_CIPHERS),
/* harmony export */   ATTR_TLS_CURVE: () => (/* binding */ ATTR_TLS_CURVE),
/* harmony export */   ATTR_TLS_ESTABLISHED: () => (/* binding */ ATTR_TLS_ESTABLISHED),
/* harmony export */   ATTR_TLS_NEXT_PROTOCOL: () => (/* binding */ ATTR_TLS_NEXT_PROTOCOL),
/* harmony export */   ATTR_TLS_PROTOCOL_NAME: () => (/* binding */ ATTR_TLS_PROTOCOL_NAME),
/* harmony export */   ATTR_TLS_PROTOCOL_VERSION: () => (/* binding */ ATTR_TLS_PROTOCOL_VERSION),
/* harmony export */   ATTR_TLS_RESUMED: () => (/* binding */ ATTR_TLS_RESUMED),
/* harmony export */   ATTR_TLS_SERVER_CERTIFICATE: () => (/* binding */ ATTR_TLS_SERVER_CERTIFICATE),
/* harmony export */   ATTR_TLS_SERVER_CERTIFICATE_CHAIN: () => (/* binding */ ATTR_TLS_SERVER_CERTIFICATE_CHAIN),
/* harmony export */   ATTR_TLS_SERVER_HASH_MD5: () => (/* binding */ ATTR_TLS_SERVER_HASH_MD5),
/* harmony export */   ATTR_TLS_SERVER_HASH_SHA1: () => (/* binding */ ATTR_TLS_SERVER_HASH_SHA1),
/* harmony export */   ATTR_TLS_SERVER_HASH_SHA256: () => (/* binding */ ATTR_TLS_SERVER_HASH_SHA256),
/* harmony export */   ATTR_TLS_SERVER_ISSUER: () => (/* binding */ ATTR_TLS_SERVER_ISSUER),
/* harmony export */   ATTR_TLS_SERVER_JA3S: () => (/* binding */ ATTR_TLS_SERVER_JA3S),
/* harmony export */   ATTR_TLS_SERVER_NOT_AFTER: () => (/* binding */ ATTR_TLS_SERVER_NOT_AFTER),
/* harmony export */   ATTR_TLS_SERVER_NOT_BEFORE: () => (/* binding */ ATTR_TLS_SERVER_NOT_BEFORE),
/* harmony export */   ATTR_TLS_SERVER_SUBJECT: () => (/* binding */ ATTR_TLS_SERVER_SUBJECT),
/* harmony export */   ATTR_URL_DOMAIN: () => (/* binding */ ATTR_URL_DOMAIN),
/* harmony export */   ATTR_URL_EXTENSION: () => (/* binding */ ATTR_URL_EXTENSION),
/* harmony export */   ATTR_URL_ORIGINAL: () => (/* binding */ ATTR_URL_ORIGINAL),
/* harmony export */   ATTR_URL_PORT: () => (/* binding */ ATTR_URL_PORT),
/* harmony export */   ATTR_URL_REGISTERED_DOMAIN: () => (/* binding */ ATTR_URL_REGISTERED_DOMAIN),
/* harmony export */   ATTR_URL_SUBDOMAIN: () => (/* binding */ ATTR_URL_SUBDOMAIN),
/* harmony export */   ATTR_URL_TEMPLATE: () => (/* binding */ ATTR_URL_TEMPLATE),
/* harmony export */   ATTR_URL_TOP_LEVEL_DOMAIN: () => (/* binding */ ATTR_URL_TOP_LEVEL_DOMAIN),
/* harmony export */   ATTR_USER_AGENT_NAME: () => (/* binding */ ATTR_USER_AGENT_NAME),
/* harmony export */   ATTR_USER_AGENT_SYNTHETIC_TYPE: () => (/* binding */ ATTR_USER_AGENT_SYNTHETIC_TYPE),
/* harmony export */   ATTR_USER_AGENT_VERSION: () => (/* binding */ ATTR_USER_AGENT_VERSION),
/* harmony export */   ATTR_USER_EMAIL: () => (/* binding */ ATTR_USER_EMAIL),
/* harmony export */   ATTR_USER_FULL_NAME: () => (/* binding */ ATTR_USER_FULL_NAME),
/* harmony export */   ATTR_USER_HASH: () => (/* binding */ ATTR_USER_HASH),
/* harmony export */   ATTR_USER_ID: () => (/* binding */ ATTR_USER_ID),
/* harmony export */   ATTR_USER_NAME: () => (/* binding */ ATTR_USER_NAME),
/* harmony export */   ATTR_USER_ROLES: () => (/* binding */ ATTR_USER_ROLES),
/* harmony export */   ATTR_V8JS_GC_TYPE: () => (/* binding */ ATTR_V8JS_GC_TYPE),
/* harmony export */   ATTR_V8JS_HEAP_SPACE_NAME: () => (/* binding */ ATTR_V8JS_HEAP_SPACE_NAME),
/* harmony export */   ATTR_VCS_CHANGE_ID: () => (/* binding */ ATTR_VCS_CHANGE_ID),
/* harmony export */   ATTR_VCS_CHANGE_STATE: () => (/* binding */ ATTR_VCS_CHANGE_STATE),
/* harmony export */   ATTR_VCS_CHANGE_TITLE: () => (/* binding */ ATTR_VCS_CHANGE_TITLE),
/* harmony export */   ATTR_VCS_LINE_CHANGE_TYPE: () => (/* binding */ ATTR_VCS_LINE_CHANGE_TYPE),
/* harmony export */   ATTR_VCS_REF_BASE_NAME: () => (/* binding */ ATTR_VCS_REF_BASE_NAME),
/* harmony export */   ATTR_VCS_REF_BASE_REVISION: () => (/* binding */ ATTR_VCS_REF_BASE_REVISION),
/* harmony export */   ATTR_VCS_REF_BASE_TYPE: () => (/* binding */ ATTR_VCS_REF_BASE_TYPE),
/* harmony export */   ATTR_VCS_REF_HEAD_NAME: () => (/* binding */ ATTR_VCS_REF_HEAD_NAME),
/* harmony export */   ATTR_VCS_REF_HEAD_REVISION: () => (/* binding */ ATTR_VCS_REF_HEAD_REVISION),
/* harmony export */   ATTR_VCS_REF_HEAD_TYPE: () => (/* binding */ ATTR_VCS_REF_HEAD_TYPE),
/* harmony export */   ATTR_VCS_REF_TYPE: () => (/* binding */ ATTR_VCS_REF_TYPE),
/* harmony export */   ATTR_VCS_REPOSITORY_CHANGE_ID: () => (/* binding */ ATTR_VCS_REPOSITORY_CHANGE_ID),
/* harmony export */   ATTR_VCS_REPOSITORY_CHANGE_TITLE: () => (/* binding */ ATTR_VCS_REPOSITORY_CHANGE_TITLE),
/* harmony export */   ATTR_VCS_REPOSITORY_NAME: () => (/* binding */ ATTR_VCS_REPOSITORY_NAME),
/* harmony export */   ATTR_VCS_REPOSITORY_REF_NAME: () => (/* binding */ ATTR_VCS_REPOSITORY_REF_NAME),
/* harmony export */   ATTR_VCS_REPOSITORY_REF_REVISION: () => (/* binding */ ATTR_VCS_REPOSITORY_REF_REVISION),
/* harmony export */   ATTR_VCS_REPOSITORY_REF_TYPE: () => (/* binding */ ATTR_VCS_REPOSITORY_REF_TYPE),
/* harmony export */   ATTR_VCS_REPOSITORY_URL_FULL: () => (/* binding */ ATTR_VCS_REPOSITORY_URL_FULL),
/* harmony export */   ATTR_VCS_REVISION_DELTA_DIRECTION: () => (/* binding */ ATTR_VCS_REVISION_DELTA_DIRECTION),
/* harmony export */   ATTR_WEBENGINE_DESCRIPTION: () => (/* binding */ ATTR_WEBENGINE_DESCRIPTION),
/* harmony export */   ATTR_WEBENGINE_NAME: () => (/* binding */ ATTR_WEBENGINE_NAME),
/* harmony export */   ATTR_WEBENGINE_VERSION: () => (/* binding */ ATTR_WEBENGINE_VERSION),
/* harmony export */   AWS_ECS_LAUNCHTYPE_VALUE_EC2: () => (/* binding */ AWS_ECS_LAUNCHTYPE_VALUE_EC2),
/* harmony export */   AWS_ECS_LAUNCHTYPE_VALUE_FARGATE: () => (/* binding */ AWS_ECS_LAUNCHTYPE_VALUE_FARGATE),
/* harmony export */   AZURE_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT: () => (/* binding */ AZURE_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT),
/* harmony export */   AZURE_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY: () => (/* binding */ AZURE_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY),
/* harmony export */   AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS: () => (/* binding */ AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS),
/* harmony export */   AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX: () => (/* binding */ AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX),
/* harmony export */   AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL: () => (/* binding */ AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL),
/* harmony export */   AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION: () => (/* binding */ AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION),
/* harmony export */   AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG: () => (/* binding */ AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE),
/* harmony export */   CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO: () => (/* binding */ CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_CANCELLATION: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_CANCELLATION),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_ERROR: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_ERROR),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_FAILURE: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_FAILURE),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_SKIP: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_SKIP),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_SUCCESS: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_SUCCESS),
/* harmony export */   CICD_PIPELINE_RESULT_VALUE_TIMEOUT: () => (/* binding */ CICD_PIPELINE_RESULT_VALUE_TIMEOUT),
/* harmony export */   CICD_PIPELINE_RUN_STATE_VALUE_EXECUTING: () => (/* binding */ CICD_PIPELINE_RUN_STATE_VALUE_EXECUTING),
/* harmony export */   CICD_PIPELINE_RUN_STATE_VALUE_FINALIZING: () => (/* binding */ CICD_PIPELINE_RUN_STATE_VALUE_FINALIZING),
/* harmony export */   CICD_PIPELINE_RUN_STATE_VALUE_PENDING: () => (/* binding */ CICD_PIPELINE_RUN_STATE_VALUE_PENDING),
/* harmony export */   CICD_PIPELINE_TASK_TYPE_VALUE_BUILD: () => (/* binding */ CICD_PIPELINE_TASK_TYPE_VALUE_BUILD),
/* harmony export */   CICD_PIPELINE_TASK_TYPE_VALUE_DEPLOY: () => (/* binding */ CICD_PIPELINE_TASK_TYPE_VALUE_DEPLOY),
/* harmony export */   CICD_PIPELINE_TASK_TYPE_VALUE_TEST: () => (/* binding */ CICD_PIPELINE_TASK_TYPE_VALUE_TEST),
/* harmony export */   CICD_WORKER_STATE_VALUE_AVAILABLE: () => (/* binding */ CICD_WORKER_STATE_VALUE_AVAILABLE),
/* harmony export */   CICD_WORKER_STATE_VALUE_BUSY: () => (/* binding */ CICD_WORKER_STATE_VALUE_BUSY),
/* harmony export */   CICD_WORKER_STATE_VALUE_OFFLINE: () => (/* binding */ CICD_WORKER_STATE_VALUE_OFFLINE),
/* harmony export */   CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS: () => (/* binding */ CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS),
/* harmony export */   CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC: () => (/* binding */ CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC),
/* harmony export */   CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_OPENSHIFT: () => (/* binding */ CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_OPENSHIFT),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_APP_RUNNER: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_APP_RUNNER),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_EC2: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_EC2),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_ECS: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_ECS),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_EKS: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_EKS),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_LAMBDA: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_LAMBDA),
/* harmony export */   CLOUD_PLATFORM_VALUE_AWS_OPENSHIFT: () => (/* binding */ CLOUD_PLATFORM_VALUE_AWS_OPENSHIFT),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_AKS: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_AKS),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_APPS: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_APPS),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_OPENSHIFT: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_OPENSHIFT),
/* harmony export */   CLOUD_PLATFORM_VALUE_AZURE_VM: () => (/* binding */ CLOUD_PLATFORM_VALUE_AZURE_VM),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_BARE_METAL_SOLUTION: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_BARE_METAL_SOLUTION),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE),
/* harmony export */   CLOUD_PLATFORM_VALUE_GCP_OPENSHIFT: () => (/* binding */ CLOUD_PLATFORM_VALUE_GCP_OPENSHIFT),
/* harmony export */   CLOUD_PLATFORM_VALUE_IBM_CLOUD_OPENSHIFT: () => (/* binding */ CLOUD_PLATFORM_VALUE_IBM_CLOUD_OPENSHIFT),
/* harmony export */   CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_COMPUTE: () => (/* binding */ CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_COMPUTE),
/* harmony export */   CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_OKE: () => (/* binding */ CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_OKE),
/* harmony export */   CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_CVM: () => (/* binding */ CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_CVM),
/* harmony export */   CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_EKS: () => (/* binding */ CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_EKS),
/* harmony export */   CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_SCF: () => (/* binding */ CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_SCF),
/* harmony export */   CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD: () => (/* binding */ CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD),
/* harmony export */   CLOUD_PROVIDER_VALUE_AWS: () => (/* binding */ CLOUD_PROVIDER_VALUE_AWS),
/* harmony export */   CLOUD_PROVIDER_VALUE_AZURE: () => (/* binding */ CLOUD_PROVIDER_VALUE_AZURE),
/* harmony export */   CLOUD_PROVIDER_VALUE_GCP: () => (/* binding */ CLOUD_PROVIDER_VALUE_GCP),
/* harmony export */   CLOUD_PROVIDER_VALUE_HEROKU: () => (/* binding */ CLOUD_PROVIDER_VALUE_HEROKU),
/* harmony export */   CLOUD_PROVIDER_VALUE_IBM_CLOUD: () => (/* binding */ CLOUD_PROVIDER_VALUE_IBM_CLOUD),
/* harmony export */   CLOUD_PROVIDER_VALUE_ORACLE_CLOUD: () => (/* binding */ CLOUD_PROVIDER_VALUE_ORACLE_CLOUD),
/* harmony export */   CLOUD_PROVIDER_VALUE_TENCENT_CLOUD: () => (/* binding */ CLOUD_PROVIDER_VALUE_TENCENT_CLOUD),
/* harmony export */   CONTAINER_CPU_STATE_VALUE_KERNEL: () => (/* binding */ CONTAINER_CPU_STATE_VALUE_KERNEL),
/* harmony export */   CONTAINER_CPU_STATE_VALUE_SYSTEM: () => (/* binding */ CONTAINER_CPU_STATE_VALUE_SYSTEM),
/* harmony export */   CONTAINER_CPU_STATE_VALUE_USER: () => (/* binding */ CONTAINER_CPU_STATE_VALUE_USER),
/* harmony export */   CPU_MODE_VALUE_IDLE: () => (/* binding */ CPU_MODE_VALUE_IDLE),
/* harmony export */   CPU_MODE_VALUE_INTERRUPT: () => (/* binding */ CPU_MODE_VALUE_INTERRUPT),
/* harmony export */   CPU_MODE_VALUE_IOWAIT: () => (/* binding */ CPU_MODE_VALUE_IOWAIT),
/* harmony export */   CPU_MODE_VALUE_KERNEL: () => (/* binding */ CPU_MODE_VALUE_KERNEL),
/* harmony export */   CPU_MODE_VALUE_NICE: () => (/* binding */ CPU_MODE_VALUE_NICE),
/* harmony export */   CPU_MODE_VALUE_STEAL: () => (/* binding */ CPU_MODE_VALUE_STEAL),
/* harmony export */   CPU_MODE_VALUE_SYSTEM: () => (/* binding */ CPU_MODE_VALUE_SYSTEM),
/* harmony export */   CPU_MODE_VALUE_USER: () => (/* binding */ CPU_MODE_VALUE_USER),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE),
/* harmony export */   DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO: () => (/* binding */ DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO),
/* harmony export */   DB_CLIENT_CONNECTIONS_STATE_VALUE_IDLE: () => (/* binding */ DB_CLIENT_CONNECTIONS_STATE_VALUE_IDLE),
/* harmony export */   DB_CLIENT_CONNECTIONS_STATE_VALUE_USED: () => (/* binding */ DB_CLIENT_CONNECTIONS_STATE_VALUE_USED),
/* harmony export */   DB_CLIENT_CONNECTION_STATE_VALUE_IDLE: () => (/* binding */ DB_CLIENT_CONNECTION_STATE_VALUE_IDLE),
/* harmony export */   DB_CLIENT_CONNECTION_STATE_VALUE_USED: () => (/* binding */ DB_CLIENT_CONNECTION_STATE_VALUE_USED),
/* harmony export */   DB_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT: () => (/* binding */ DB_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT),
/* harmony export */   DB_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY: () => (/* binding */ DB_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY),
/* harmony export */   DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS: () => (/* binding */ DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS),
/* harmony export */   DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX: () => (/* binding */ DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX),
/* harmony export */   DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL: () => (/* binding */ DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL),
/* harmony export */   DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION: () => (/* binding */ DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION),
/* harmony export */   DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG: () => (/* binding */ DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_BATCH: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_BATCH),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_CREATE: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_CREATE),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_DELETE: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_DELETE),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE_JAVASCRIPT: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE_JAVASCRIPT),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD_FEED: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD_FEED),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_INVALID: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_INVALID),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_PATCH: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_PATCH),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY_PLAN: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY_PLAN),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_READ: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_READ),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_READ_FEED: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_READ_FEED),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_REPLACE: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_REPLACE),
/* harmony export */   DB_COSMOSDB_OPERATION_TYPE_VALUE_UPSERT: () => (/* binding */ DB_COSMOSDB_OPERATION_TYPE_VALUE_UPSERT),
/* harmony export */   DB_SYSTEM_NAME_VALUE_ACTIAN_INGRES: () => (/* binding */ DB_SYSTEM_NAME_VALUE_ACTIAN_INGRES),
/* harmony export */   DB_SYSTEM_NAME_VALUE_AWS_DYNAMODB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_AWS_DYNAMODB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_AWS_REDSHIFT: () => (/* binding */ DB_SYSTEM_NAME_VALUE_AWS_REDSHIFT),
/* harmony export */   DB_SYSTEM_NAME_VALUE_AZURE_COSMOSDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_AZURE_COSMOSDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_CASSANDRA: () => (/* binding */ DB_SYSTEM_NAME_VALUE_CASSANDRA),
/* harmony export */   DB_SYSTEM_NAME_VALUE_CLICKHOUSE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_CLICKHOUSE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_COCKROACHDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_COCKROACHDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_COUCHBASE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_COUCHBASE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_COUCHDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_COUCHDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_DERBY: () => (/* binding */ DB_SYSTEM_NAME_VALUE_DERBY),
/* harmony export */   DB_SYSTEM_NAME_VALUE_ELASTICSEARCH: () => (/* binding */ DB_SYSTEM_NAME_VALUE_ELASTICSEARCH),
/* harmony export */   DB_SYSTEM_NAME_VALUE_FIREBIRDSQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_FIREBIRDSQL),
/* harmony export */   DB_SYSTEM_NAME_VALUE_GCP_SPANNER: () => (/* binding */ DB_SYSTEM_NAME_VALUE_GCP_SPANNER),
/* harmony export */   DB_SYSTEM_NAME_VALUE_GEODE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_GEODE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_H2DATABASE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_H2DATABASE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_HBASE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_HBASE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_HIVE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_HIVE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_HSQLDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_HSQLDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_IBM_DB2: () => (/* binding */ DB_SYSTEM_NAME_VALUE_IBM_DB2),
/* harmony export */   DB_SYSTEM_NAME_VALUE_IBM_INFORMIX: () => (/* binding */ DB_SYSTEM_NAME_VALUE_IBM_INFORMIX),
/* harmony export */   DB_SYSTEM_NAME_VALUE_IBM_NETEZZA: () => (/* binding */ DB_SYSTEM_NAME_VALUE_IBM_NETEZZA),
/* harmony export */   DB_SYSTEM_NAME_VALUE_INFLUXDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_INFLUXDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_INSTANTDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_INSTANTDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_INTERSYSTEMS_CACHE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_INTERSYSTEMS_CACHE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_MARIADB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MARIADB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_MEMCACHED: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MEMCACHED),
/* harmony export */   DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER),
/* harmony export */   DB_SYSTEM_NAME_VALUE_MONGODB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MONGODB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_MYSQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_MYSQL),
/* harmony export */   DB_SYSTEM_NAME_VALUE_NEO4J: () => (/* binding */ DB_SYSTEM_NAME_VALUE_NEO4J),
/* harmony export */   DB_SYSTEM_NAME_VALUE_OPENSEARCH: () => (/* binding */ DB_SYSTEM_NAME_VALUE_OPENSEARCH),
/* harmony export */   DB_SYSTEM_NAME_VALUE_ORACLE_DB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_ORACLE_DB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_OTHER_SQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_OTHER_SQL),
/* harmony export */   DB_SYSTEM_NAME_VALUE_POSTGRESQL: () => (/* binding */ DB_SYSTEM_NAME_VALUE_POSTGRESQL),
/* harmony export */   DB_SYSTEM_NAME_VALUE_REDIS: () => (/* binding */ DB_SYSTEM_NAME_VALUE_REDIS),
/* harmony export */   DB_SYSTEM_NAME_VALUE_SAP_HANA: () => (/* binding */ DB_SYSTEM_NAME_VALUE_SAP_HANA),
/* harmony export */   DB_SYSTEM_NAME_VALUE_SAP_MAXDB: () => (/* binding */ DB_SYSTEM_NAME_VALUE_SAP_MAXDB),
/* harmony export */   DB_SYSTEM_NAME_VALUE_SOFTWAREAG_ADABAS: () => (/* binding */ DB_SYSTEM_NAME_VALUE_SOFTWAREAG_ADABAS),
/* harmony export */   DB_SYSTEM_NAME_VALUE_SQLITE: () => (/* binding */ DB_SYSTEM_NAME_VALUE_SQLITE),
/* harmony export */   DB_SYSTEM_NAME_VALUE_TERADATA: () => (/* binding */ DB_SYSTEM_NAME_VALUE_TERADATA),
/* harmony export */   DB_SYSTEM_NAME_VALUE_TRINO: () => (/* binding */ DB_SYSTEM_NAME_VALUE_TRINO),
/* harmony export */   DB_SYSTEM_VALUE_ADABAS: () => (/* binding */ DB_SYSTEM_VALUE_ADABAS),
/* harmony export */   DB_SYSTEM_VALUE_CACHE: () => (/* binding */ DB_SYSTEM_VALUE_CACHE),
/* harmony export */   DB_SYSTEM_VALUE_CASSANDRA: () => (/* binding */ DB_SYSTEM_VALUE_CASSANDRA),
/* harmony export */   DB_SYSTEM_VALUE_CLICKHOUSE: () => (/* binding */ DB_SYSTEM_VALUE_CLICKHOUSE),
/* harmony export */   DB_SYSTEM_VALUE_CLOUDSCAPE: () => (/* binding */ DB_SYSTEM_VALUE_CLOUDSCAPE),
/* harmony export */   DB_SYSTEM_VALUE_COCKROACHDB: () => (/* binding */ DB_SYSTEM_VALUE_COCKROACHDB),
/* harmony export */   DB_SYSTEM_VALUE_COLDFUSION: () => (/* binding */ DB_SYSTEM_VALUE_COLDFUSION),
/* harmony export */   DB_SYSTEM_VALUE_COSMOSDB: () => (/* binding */ DB_SYSTEM_VALUE_COSMOSDB),
/* harmony export */   DB_SYSTEM_VALUE_COUCHBASE: () => (/* binding */ DB_SYSTEM_VALUE_COUCHBASE),
/* harmony export */   DB_SYSTEM_VALUE_COUCHDB: () => (/* binding */ DB_SYSTEM_VALUE_COUCHDB),
/* harmony export */   DB_SYSTEM_VALUE_DB2: () => (/* binding */ DB_SYSTEM_VALUE_DB2),
/* harmony export */   DB_SYSTEM_VALUE_DERBY: () => (/* binding */ DB_SYSTEM_VALUE_DERBY),
/* harmony export */   DB_SYSTEM_VALUE_DYNAMODB: () => (/* binding */ DB_SYSTEM_VALUE_DYNAMODB),
/* harmony export */   DB_SYSTEM_VALUE_EDB: () => (/* binding */ DB_SYSTEM_VALUE_EDB),
/* harmony export */   DB_SYSTEM_VALUE_ELASTICSEARCH: () => (/* binding */ DB_SYSTEM_VALUE_ELASTICSEARCH),
/* harmony export */   DB_SYSTEM_VALUE_FILEMAKER: () => (/* binding */ DB_SYSTEM_VALUE_FILEMAKER),
/* harmony export */   DB_SYSTEM_VALUE_FIREBIRD: () => (/* binding */ DB_SYSTEM_VALUE_FIREBIRD),
/* harmony export */   DB_SYSTEM_VALUE_FIRSTSQL: () => (/* binding */ DB_SYSTEM_VALUE_FIRSTSQL),
/* harmony export */   DB_SYSTEM_VALUE_GEODE: () => (/* binding */ DB_SYSTEM_VALUE_GEODE),
/* harmony export */   DB_SYSTEM_VALUE_H2: () => (/* binding */ DB_SYSTEM_VALUE_H2),
/* harmony export */   DB_SYSTEM_VALUE_HANADB: () => (/* binding */ DB_SYSTEM_VALUE_HANADB),
/* harmony export */   DB_SYSTEM_VALUE_HBASE: () => (/* binding */ DB_SYSTEM_VALUE_HBASE),
/* harmony export */   DB_SYSTEM_VALUE_HIVE: () => (/* binding */ DB_SYSTEM_VALUE_HIVE),
/* harmony export */   DB_SYSTEM_VALUE_HSQLDB: () => (/* binding */ DB_SYSTEM_VALUE_HSQLDB),
/* harmony export */   DB_SYSTEM_VALUE_INFLUXDB: () => (/* binding */ DB_SYSTEM_VALUE_INFLUXDB),
/* harmony export */   DB_SYSTEM_VALUE_INFORMIX: () => (/* binding */ DB_SYSTEM_VALUE_INFORMIX),
/* harmony export */   DB_SYSTEM_VALUE_INGRES: () => (/* binding */ DB_SYSTEM_VALUE_INGRES),
/* harmony export */   DB_SYSTEM_VALUE_INSTANTDB: () => (/* binding */ DB_SYSTEM_VALUE_INSTANTDB),
/* harmony export */   DB_SYSTEM_VALUE_INTERBASE: () => (/* binding */ DB_SYSTEM_VALUE_INTERBASE),
/* harmony export */   DB_SYSTEM_VALUE_INTERSYSTEMS_CACHE: () => (/* binding */ DB_SYSTEM_VALUE_INTERSYSTEMS_CACHE),
/* harmony export */   DB_SYSTEM_VALUE_MARIADB: () => (/* binding */ DB_SYSTEM_VALUE_MARIADB),
/* harmony export */   DB_SYSTEM_VALUE_MAXDB: () => (/* binding */ DB_SYSTEM_VALUE_MAXDB),
/* harmony export */   DB_SYSTEM_VALUE_MEMCACHED: () => (/* binding */ DB_SYSTEM_VALUE_MEMCACHED),
/* harmony export */   DB_SYSTEM_VALUE_MONGODB: () => (/* binding */ DB_SYSTEM_VALUE_MONGODB),
/* harmony export */   DB_SYSTEM_VALUE_MSSQL: () => (/* binding */ DB_SYSTEM_VALUE_MSSQL),
/* harmony export */   DB_SYSTEM_VALUE_MSSQLCOMPACT: () => (/* binding */ DB_SYSTEM_VALUE_MSSQLCOMPACT),
/* harmony export */   DB_SYSTEM_VALUE_MYSQL: () => (/* binding */ DB_SYSTEM_VALUE_MYSQL),
/* harmony export */   DB_SYSTEM_VALUE_NEO4J: () => (/* binding */ DB_SYSTEM_VALUE_NEO4J),
/* harmony export */   DB_SYSTEM_VALUE_NETEZZA: () => (/* binding */ DB_SYSTEM_VALUE_NETEZZA),
/* harmony export */   DB_SYSTEM_VALUE_OPENSEARCH: () => (/* binding */ DB_SYSTEM_VALUE_OPENSEARCH),
/* harmony export */   DB_SYSTEM_VALUE_ORACLE: () => (/* binding */ DB_SYSTEM_VALUE_ORACLE),
/* harmony export */   DB_SYSTEM_VALUE_OTHER_SQL: () => (/* binding */ DB_SYSTEM_VALUE_OTHER_SQL),
/* harmony export */   DB_SYSTEM_VALUE_PERVASIVE: () => (/* binding */ DB_SYSTEM_VALUE_PERVASIVE),
/* harmony export */   DB_SYSTEM_VALUE_POINTBASE: () => (/* binding */ DB_SYSTEM_VALUE_POINTBASE),
/* harmony export */   DB_SYSTEM_VALUE_POSTGRESQL: () => (/* binding */ DB_SYSTEM_VALUE_POSTGRESQL),
/* harmony export */   DB_SYSTEM_VALUE_PROGRESS: () => (/* binding */ DB_SYSTEM_VALUE_PROGRESS),
/* harmony export */   DB_SYSTEM_VALUE_REDIS: () => (/* binding */ DB_SYSTEM_VALUE_REDIS),
/* harmony export */   DB_SYSTEM_VALUE_REDSHIFT: () => (/* binding */ DB_SYSTEM_VALUE_REDSHIFT),
/* harmony export */   DB_SYSTEM_VALUE_SPANNER: () => (/* binding */ DB_SYSTEM_VALUE_SPANNER),
/* harmony export */   DB_SYSTEM_VALUE_SQLITE: () => (/* binding */ DB_SYSTEM_VALUE_SQLITE),
/* harmony export */   DB_SYSTEM_VALUE_SYBASE: () => (/* binding */ DB_SYSTEM_VALUE_SYBASE),
/* harmony export */   DB_SYSTEM_VALUE_TERADATA: () => (/* binding */ DB_SYSTEM_VALUE_TERADATA),
/* harmony export */   DB_SYSTEM_VALUE_TRINO: () => (/* binding */ DB_SYSTEM_VALUE_TRINO),
/* harmony export */   DB_SYSTEM_VALUE_VERTICA: () => (/* binding */ DB_SYSTEM_VALUE_VERTICA),
/* harmony export */   DEPLOYMENT_STATUS_VALUE_FAILED: () => (/* binding */ DEPLOYMENT_STATUS_VALUE_FAILED),
/* harmony export */   DEPLOYMENT_STATUS_VALUE_SUCCEEDED: () => (/* binding */ DEPLOYMENT_STATUS_VALUE_SUCCEEDED),
/* harmony export */   DISK_IO_DIRECTION_VALUE_READ: () => (/* binding */ DISK_IO_DIRECTION_VALUE_READ),
/* harmony export */   DISK_IO_DIRECTION_VALUE_WRITE: () => (/* binding */ DISK_IO_DIRECTION_VALUE_WRITE),
/* harmony export */   FAAS_DOCUMENT_OPERATION_VALUE_DELETE: () => (/* binding */ FAAS_DOCUMENT_OPERATION_VALUE_DELETE),
/* harmony export */   FAAS_DOCUMENT_OPERATION_VALUE_EDIT: () => (/* binding */ FAAS_DOCUMENT_OPERATION_VALUE_EDIT),
/* harmony export */   FAAS_DOCUMENT_OPERATION_VALUE_INSERT: () => (/* binding */ FAAS_DOCUMENT_OPERATION_VALUE_INSERT),
/* harmony export */   FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD: () => (/* binding */ FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD),
/* harmony export */   FAAS_INVOKED_PROVIDER_VALUE_AWS: () => (/* binding */ FAAS_INVOKED_PROVIDER_VALUE_AWS),
/* harmony export */   FAAS_INVOKED_PROVIDER_VALUE_AZURE: () => (/* binding */ FAAS_INVOKED_PROVIDER_VALUE_AZURE),
/* harmony export */   FAAS_INVOKED_PROVIDER_VALUE_GCP: () => (/* binding */ FAAS_INVOKED_PROVIDER_VALUE_GCP),
/* harmony export */   FAAS_INVOKED_PROVIDER_VALUE_TENCENT_CLOUD: () => (/* binding */ FAAS_INVOKED_PROVIDER_VALUE_TENCENT_CLOUD),
/* harmony export */   FAAS_TRIGGER_VALUE_DATASOURCE: () => (/* binding */ FAAS_TRIGGER_VALUE_DATASOURCE),
/* harmony export */   FAAS_TRIGGER_VALUE_HTTP: () => (/* binding */ FAAS_TRIGGER_VALUE_HTTP),
/* harmony export */   FAAS_TRIGGER_VALUE_OTHER: () => (/* binding */ FAAS_TRIGGER_VALUE_OTHER),
/* harmony export */   FAAS_TRIGGER_VALUE_PUBSUB: () => (/* binding */ FAAS_TRIGGER_VALUE_PUBSUB),
/* harmony export */   FAAS_TRIGGER_VALUE_TIMER: () => (/* binding */ FAAS_TRIGGER_VALUE_TIMER),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_CACHED: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_CACHED),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_DEFAULT: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_DEFAULT),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_DISABLED: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_DISABLED),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_ERROR: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_ERROR),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_SPLIT: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_SPLIT),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_STALE: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_STALE),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_STATIC: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_STATIC),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_TARGETING_MATCH: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_TARGETING_MATCH),
/* harmony export */   FEATURE_FLAG_EVALUATION_REASON_VALUE_UNKNOWN: () => (/* binding */ FEATURE_FLAG_EVALUATION_REASON_VALUE_UNKNOWN),
/* harmony export */   GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_OBJECT: () => (/* binding */ GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_OBJECT),
/* harmony export */   GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_SCHEMA: () => (/* binding */ GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_SCHEMA),
/* harmony export */   GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_TEXT: () => (/* binding */ GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_TEXT),
/* harmony export */   GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_AUTO: () => (/* binding */ GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_AUTO),
/* harmony export */   GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_DEFAULT: () => (/* binding */ GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_DEFAULT),
/* harmony export */   GEN_AI_OPERATION_NAME_VALUE_CHAT: () => (/* binding */ GEN_AI_OPERATION_NAME_VALUE_CHAT),
/* harmony export */   GEN_AI_OPERATION_NAME_VALUE_EMBEDDINGS: () => (/* binding */ GEN_AI_OPERATION_NAME_VALUE_EMBEDDINGS),
/* harmony export */   GEN_AI_OPERATION_NAME_VALUE_TEXT_COMPLETION: () => (/* binding */ GEN_AI_OPERATION_NAME_VALUE_TEXT_COMPLETION),
/* harmony export */   GEN_AI_SYSTEM_VALUE_ANTHROPIC: () => (/* binding */ GEN_AI_SYSTEM_VALUE_ANTHROPIC),
/* harmony export */   GEN_AI_SYSTEM_VALUE_AWS_BEDROCK: () => (/* binding */ GEN_AI_SYSTEM_VALUE_AWS_BEDROCK),
/* harmony export */   GEN_AI_SYSTEM_VALUE_AZ_AI_INFERENCE: () => (/* binding */ GEN_AI_SYSTEM_VALUE_AZ_AI_INFERENCE),
/* harmony export */   GEN_AI_SYSTEM_VALUE_AZ_AI_OPENAI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_AZ_AI_OPENAI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_COHERE: () => (/* binding */ GEN_AI_SYSTEM_VALUE_COHERE),
/* harmony export */   GEN_AI_SYSTEM_VALUE_DEEPSEEK: () => (/* binding */ GEN_AI_SYSTEM_VALUE_DEEPSEEK),
/* harmony export */   GEN_AI_SYSTEM_VALUE_GEMINI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_GEMINI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_GROQ: () => (/* binding */ GEN_AI_SYSTEM_VALUE_GROQ),
/* harmony export */   GEN_AI_SYSTEM_VALUE_IBM_WATSONX_AI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_IBM_WATSONX_AI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_MISTRAL_AI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_MISTRAL_AI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_OPENAI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_OPENAI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_PERPLEXITY: () => (/* binding */ GEN_AI_SYSTEM_VALUE_PERPLEXITY),
/* harmony export */   GEN_AI_SYSTEM_VALUE_VERTEX_AI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_VERTEX_AI),
/* harmony export */   GEN_AI_SYSTEM_VALUE_XAI: () => (/* binding */ GEN_AI_SYSTEM_VALUE_XAI),
/* harmony export */   GEN_AI_TOKEN_TYPE_VALUE_COMPLETION: () => (/* binding */ GEN_AI_TOKEN_TYPE_VALUE_COMPLETION),
/* harmony export */   GEN_AI_TOKEN_TYPE_VALUE_INPUT: () => (/* binding */ GEN_AI_TOKEN_TYPE_VALUE_INPUT),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_AF: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_AF),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_AN: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_AN),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_AS: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_AS),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_EU: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_EU),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_NA: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_NA),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_OC: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_OC),
/* harmony export */   GEO_CONTINENT_CODE_VALUE_SA: () => (/* binding */ GEO_CONTINENT_CODE_VALUE_SA),
/* harmony export */   GO_MEMORY_TYPE_VALUE_OTHER: () => (/* binding */ GO_MEMORY_TYPE_VALUE_OTHER),
/* harmony export */   GO_MEMORY_TYPE_VALUE_STACK: () => (/* binding */ GO_MEMORY_TYPE_VALUE_STACK),
/* harmony export */   GRAPHQL_OPERATION_TYPE_VALUE_MUTATION: () => (/* binding */ GRAPHQL_OPERATION_TYPE_VALUE_MUTATION),
/* harmony export */   GRAPHQL_OPERATION_TYPE_VALUE_QUERY: () => (/* binding */ GRAPHQL_OPERATION_TYPE_VALUE_QUERY),
/* harmony export */   GRAPHQL_OPERATION_TYPE_VALUE_SUBSCRIPTION: () => (/* binding */ GRAPHQL_OPERATION_TYPE_VALUE_SUBSCRIPTION),
/* harmony export */   HOST_ARCH_VALUE_AMD64: () => (/* binding */ HOST_ARCH_VALUE_AMD64),
/* harmony export */   HOST_ARCH_VALUE_ARM32: () => (/* binding */ HOST_ARCH_VALUE_ARM32),
/* harmony export */   HOST_ARCH_VALUE_ARM64: () => (/* binding */ HOST_ARCH_VALUE_ARM64),
/* harmony export */   HOST_ARCH_VALUE_IA64: () => (/* binding */ HOST_ARCH_VALUE_IA64),
/* harmony export */   HOST_ARCH_VALUE_PPC32: () => (/* binding */ HOST_ARCH_VALUE_PPC32),
/* harmony export */   HOST_ARCH_VALUE_PPC64: () => (/* binding */ HOST_ARCH_VALUE_PPC64),
/* harmony export */   HOST_ARCH_VALUE_S390X: () => (/* binding */ HOST_ARCH_VALUE_S390X),
/* harmony export */   HOST_ARCH_VALUE_X86: () => (/* binding */ HOST_ARCH_VALUE_X86),
/* harmony export */   HTTP_CONNECTION_STATE_VALUE_ACTIVE: () => (/* binding */ HTTP_CONNECTION_STATE_VALUE_ACTIVE),
/* harmony export */   HTTP_CONNECTION_STATE_VALUE_IDLE: () => (/* binding */ HTTP_CONNECTION_STATE_VALUE_IDLE),
/* harmony export */   HTTP_FLAVOR_VALUE_HTTP_1_0: () => (/* binding */ HTTP_FLAVOR_VALUE_HTTP_1_0),
/* harmony export */   HTTP_FLAVOR_VALUE_HTTP_1_1: () => (/* binding */ HTTP_FLAVOR_VALUE_HTTP_1_1),
/* harmony export */   HTTP_FLAVOR_VALUE_HTTP_2_0: () => (/* binding */ HTTP_FLAVOR_VALUE_HTTP_2_0),
/* harmony export */   HTTP_FLAVOR_VALUE_HTTP_3_0: () => (/* binding */ HTTP_FLAVOR_VALUE_HTTP_3_0),
/* harmony export */   HTTP_FLAVOR_VALUE_QUIC: () => (/* binding */ HTTP_FLAVOR_VALUE_QUIC),
/* harmony export */   HTTP_FLAVOR_VALUE_SPDY: () => (/* binding */ HTTP_FLAVOR_VALUE_SPDY),
/* harmony export */   HW_STATE_VALUE_DEGRADED: () => (/* binding */ HW_STATE_VALUE_DEGRADED),
/* harmony export */   HW_STATE_VALUE_FAILED: () => (/* binding */ HW_STATE_VALUE_FAILED),
/* harmony export */   HW_STATE_VALUE_OK: () => (/* binding */ HW_STATE_VALUE_OK),
/* harmony export */   HW_TYPE_VALUE_BATTERY: () => (/* binding */ HW_TYPE_VALUE_BATTERY),
/* harmony export */   HW_TYPE_VALUE_CPU: () => (/* binding */ HW_TYPE_VALUE_CPU),
/* harmony export */   HW_TYPE_VALUE_DISK_CONTROLLER: () => (/* binding */ HW_TYPE_VALUE_DISK_CONTROLLER),
/* harmony export */   HW_TYPE_VALUE_ENCLOSURE: () => (/* binding */ HW_TYPE_VALUE_ENCLOSURE),
/* harmony export */   HW_TYPE_VALUE_FAN: () => (/* binding */ HW_TYPE_VALUE_FAN),
/* harmony export */   HW_TYPE_VALUE_GPU: () => (/* binding */ HW_TYPE_VALUE_GPU),
/* harmony export */   HW_TYPE_VALUE_LOGICAL_DISK: () => (/* binding */ HW_TYPE_VALUE_LOGICAL_DISK),
/* harmony export */   HW_TYPE_VALUE_MEMORY: () => (/* binding */ HW_TYPE_VALUE_MEMORY),
/* harmony export */   HW_TYPE_VALUE_NETWORK: () => (/* binding */ HW_TYPE_VALUE_NETWORK),
/* harmony export */   HW_TYPE_VALUE_PHYSICAL_DISK: () => (/* binding */ HW_TYPE_VALUE_PHYSICAL_DISK),
/* harmony export */   HW_TYPE_VALUE_POWER_SUPPLY: () => (/* binding */ HW_TYPE_VALUE_POWER_SUPPLY),
/* harmony export */   HW_TYPE_VALUE_TAPE_DRIVE: () => (/* binding */ HW_TYPE_VALUE_TAPE_DRIVE),
/* harmony export */   HW_TYPE_VALUE_TEMPERATURE: () => (/* binding */ HW_TYPE_VALUE_TEMPERATURE),
/* harmony export */   HW_TYPE_VALUE_VOLTAGE: () => (/* binding */ HW_TYPE_VALUE_VOLTAGE),
/* harmony export */   IOS_STATE_VALUE_ACTIVE: () => (/* binding */ IOS_STATE_VALUE_ACTIVE),
/* harmony export */   IOS_STATE_VALUE_BACKGROUND: () => (/* binding */ IOS_STATE_VALUE_BACKGROUND),
/* harmony export */   IOS_STATE_VALUE_FOREGROUND: () => (/* binding */ IOS_STATE_VALUE_FOREGROUND),
/* harmony export */   IOS_STATE_VALUE_INACTIVE: () => (/* binding */ IOS_STATE_VALUE_INACTIVE),
/* harmony export */   IOS_STATE_VALUE_TERMINATE: () => (/* binding */ IOS_STATE_VALUE_TERMINATE),
/* harmony export */   K8S_NAMESPACE_PHASE_VALUE_ACTIVE: () => (/* binding */ K8S_NAMESPACE_PHASE_VALUE_ACTIVE),
/* harmony export */   K8S_NAMESPACE_PHASE_VALUE_TERMINATING: () => (/* binding */ K8S_NAMESPACE_PHASE_VALUE_TERMINATING),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_CONFIG_MAP: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_CONFIG_MAP),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_DOWNWARD_API: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_DOWNWARD_API),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_EMPTY_DIR: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_EMPTY_DIR),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_LOCAL: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_LOCAL),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_PERSISTENT_VOLUME_CLAIM: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_PERSISTENT_VOLUME_CLAIM),
/* harmony export */   K8S_VOLUME_TYPE_VALUE_SECRET: () => (/* binding */ K8S_VOLUME_TYPE_VALUE_SECRET),
/* harmony export */   LINUX_MEMORY_SLAB_STATE_VALUE_RECLAIMABLE: () => (/* binding */ LINUX_MEMORY_SLAB_STATE_VALUE_RECLAIMABLE),
/* harmony export */   LINUX_MEMORY_SLAB_STATE_VALUE_UNRECLAIMABLE: () => (/* binding */ LINUX_MEMORY_SLAB_STATE_VALUE_UNRECLAIMABLE),
/* harmony export */   LOG_IOSTREAM_VALUE_STDERR: () => (/* binding */ LOG_IOSTREAM_VALUE_STDERR),
/* harmony export */   LOG_IOSTREAM_VALUE_STDOUT: () => (/* binding */ LOG_IOSTREAM_VALUE_STDOUT),
/* harmony export */   MESSAGE_TYPE_VALUE_RECEIVED: () => (/* binding */ MESSAGE_TYPE_VALUE_RECEIVED),
/* harmony export */   MESSAGE_TYPE_VALUE_SENT: () => (/* binding */ MESSAGE_TYPE_VALUE_SENT),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_CREATE: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_CREATE),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_DELIVER: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_DELIVER),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_PROCESS: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_PROCESS),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_PUBLISH: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_PUBLISH),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_RECEIVE: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_RECEIVE),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_SEND: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_SEND),
/* harmony export */   MESSAGING_OPERATION_TYPE_VALUE_SETTLE: () => (/* binding */ MESSAGING_OPERATION_TYPE_VALUE_SETTLE),
/* harmony export */   MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_BROADCASTING: () => (/* binding */ MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_BROADCASTING),
/* harmony export */   MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_CLUSTERING: () => (/* binding */ MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_CLUSTERING),
/* harmony export */   MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_DELAY: () => (/* binding */ MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_DELAY),
/* harmony export */   MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_FIFO: () => (/* binding */ MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_FIFO),
/* harmony export */   MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_NORMAL: () => (/* binding */ MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_NORMAL),
/* harmony export */   MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_TRANSACTION: () => (/* binding */ MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_TRANSACTION),
/* harmony export */   MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_ABANDON: () => (/* binding */ MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_ABANDON),
/* harmony export */   MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_COMPLETE: () => (/* binding */ MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_COMPLETE),
/* harmony export */   MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEAD_LETTER: () => (/* binding */ MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEAD_LETTER),
/* harmony export */   MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEFER: () => (/* binding */ MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEFER),
/* harmony export */   MESSAGING_SYSTEM_VALUE_ACTIVEMQ: () => (/* binding */ MESSAGING_SYSTEM_VALUE_ACTIVEMQ),
/* harmony export */   MESSAGING_SYSTEM_VALUE_AWS_SQS: () => (/* binding */ MESSAGING_SYSTEM_VALUE_AWS_SQS),
/* harmony export */   MESSAGING_SYSTEM_VALUE_EVENTGRID: () => (/* binding */ MESSAGING_SYSTEM_VALUE_EVENTGRID),
/* harmony export */   MESSAGING_SYSTEM_VALUE_EVENTHUBS: () => (/* binding */ MESSAGING_SYSTEM_VALUE_EVENTHUBS),
/* harmony export */   MESSAGING_SYSTEM_VALUE_GCP_PUBSUB: () => (/* binding */ MESSAGING_SYSTEM_VALUE_GCP_PUBSUB),
/* harmony export */   MESSAGING_SYSTEM_VALUE_JMS: () => (/* binding */ MESSAGING_SYSTEM_VALUE_JMS),
/* harmony export */   MESSAGING_SYSTEM_VALUE_KAFKA: () => (/* binding */ MESSAGING_SYSTEM_VALUE_KAFKA),
/* harmony export */   MESSAGING_SYSTEM_VALUE_PULSAR: () => (/* binding */ MESSAGING_SYSTEM_VALUE_PULSAR),
/* harmony export */   MESSAGING_SYSTEM_VALUE_RABBITMQ: () => (/* binding */ MESSAGING_SYSTEM_VALUE_RABBITMQ),
/* harmony export */   MESSAGING_SYSTEM_VALUE_ROCKETMQ: () => (/* binding */ MESSAGING_SYSTEM_VALUE_ROCKETMQ),
/* harmony export */   MESSAGING_SYSTEM_VALUE_SERVICEBUS: () => (/* binding */ MESSAGING_SYSTEM_VALUE_SERVICEBUS),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_CLOSED: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_CLOSED),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_CLOSE_WAIT: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_CLOSE_WAIT),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_CLOSING: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_CLOSING),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_ESTABLISHED: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_ESTABLISHED),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_1: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_1),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_2: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_2),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_LAST_ACK: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_LAST_ACK),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_LISTEN: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_LISTEN),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_SYN_RECEIVED: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_SYN_RECEIVED),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_SYN_SENT: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_SYN_SENT),
/* harmony export */   NETWORK_CONNECTION_STATE_VALUE_TIME_WAIT: () => (/* binding */ NETWORK_CONNECTION_STATE_VALUE_TIME_WAIT),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_GSM: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_GSM),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_LTE: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_LTE),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_NR: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_NR),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA),
/* harmony export */   NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS: () => (/* binding */ NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS),
/* harmony export */   NETWORK_CONNECTION_TYPE_VALUE_CELL: () => (/* binding */ NETWORK_CONNECTION_TYPE_VALUE_CELL),
/* harmony export */   NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE: () => (/* binding */ NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE),
/* harmony export */   NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN: () => (/* binding */ NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN),
/* harmony export */   NETWORK_CONNECTION_TYPE_VALUE_WIFI: () => (/* binding */ NETWORK_CONNECTION_TYPE_VALUE_WIFI),
/* harmony export */   NETWORK_CONNECTION_TYPE_VALUE_WIRED: () => (/* binding */ NETWORK_CONNECTION_TYPE_VALUE_WIRED),
/* harmony export */   NETWORK_IO_DIRECTION_VALUE_RECEIVE: () => (/* binding */ NETWORK_IO_DIRECTION_VALUE_RECEIVE),
/* harmony export */   NETWORK_IO_DIRECTION_VALUE_TRANSMIT: () => (/* binding */ NETWORK_IO_DIRECTION_VALUE_TRANSMIT),
/* harmony export */   NET_SOCK_FAMILY_VALUE_INET: () => (/* binding */ NET_SOCK_FAMILY_VALUE_INET),
/* harmony export */   NET_SOCK_FAMILY_VALUE_INET6: () => (/* binding */ NET_SOCK_FAMILY_VALUE_INET6),
/* harmony export */   NET_SOCK_FAMILY_VALUE_UNIX: () => (/* binding */ NET_SOCK_FAMILY_VALUE_UNIX),
/* harmony export */   NET_TRANSPORT_VALUE_INPROC: () => (/* binding */ NET_TRANSPORT_VALUE_INPROC),
/* harmony export */   NET_TRANSPORT_VALUE_IP_TCP: () => (/* binding */ NET_TRANSPORT_VALUE_IP_TCP),
/* harmony export */   NET_TRANSPORT_VALUE_IP_UDP: () => (/* binding */ NET_TRANSPORT_VALUE_IP_UDP),
/* harmony export */   NET_TRANSPORT_VALUE_OTHER: () => (/* binding */ NET_TRANSPORT_VALUE_OTHER),
/* harmony export */   NET_TRANSPORT_VALUE_PIPE: () => (/* binding */ NET_TRANSPORT_VALUE_PIPE),
/* harmony export */   NODEJS_EVENTLOOP_STATE_VALUE_ACTIVE: () => (/* binding */ NODEJS_EVENTLOOP_STATE_VALUE_ACTIVE),
/* harmony export */   NODEJS_EVENTLOOP_STATE_VALUE_IDLE: () => (/* binding */ NODEJS_EVENTLOOP_STATE_VALUE_IDLE),
/* harmony export */   OPENTRACING_REF_TYPE_VALUE_CHILD_OF: () => (/* binding */ OPENTRACING_REF_TYPE_VALUE_CHILD_OF),
/* harmony export */   OPENTRACING_REF_TYPE_VALUE_FOLLOWS_FROM: () => (/* binding */ OPENTRACING_REF_TYPE_VALUE_FOLLOWS_FROM),
/* harmony export */   OS_TYPE_VALUE_AIX: () => (/* binding */ OS_TYPE_VALUE_AIX),
/* harmony export */   OS_TYPE_VALUE_DARWIN: () => (/* binding */ OS_TYPE_VALUE_DARWIN),
/* harmony export */   OS_TYPE_VALUE_DRAGONFLYBSD: () => (/* binding */ OS_TYPE_VALUE_DRAGONFLYBSD),
/* harmony export */   OS_TYPE_VALUE_FREEBSD: () => (/* binding */ OS_TYPE_VALUE_FREEBSD),
/* harmony export */   OS_TYPE_VALUE_HPUX: () => (/* binding */ OS_TYPE_VALUE_HPUX),
/* harmony export */   OS_TYPE_VALUE_LINUX: () => (/* binding */ OS_TYPE_VALUE_LINUX),
/* harmony export */   OS_TYPE_VALUE_NETBSD: () => (/* binding */ OS_TYPE_VALUE_NETBSD),
/* harmony export */   OS_TYPE_VALUE_OPENBSD: () => (/* binding */ OS_TYPE_VALUE_OPENBSD),
/* harmony export */   OS_TYPE_VALUE_SOLARIS: () => (/* binding */ OS_TYPE_VALUE_SOLARIS),
/* harmony export */   OS_TYPE_VALUE_WINDOWS: () => (/* binding */ OS_TYPE_VALUE_WINDOWS),
/* harmony export */   OS_TYPE_VALUE_Z_OS: () => (/* binding */ OS_TYPE_VALUE_Z_OS),
/* harmony export */   PROCESS_CONTEXT_SWITCH_TYPE_VALUE_INVOLUNTARY: () => (/* binding */ PROCESS_CONTEXT_SWITCH_TYPE_VALUE_INVOLUNTARY),
/* harmony export */   PROCESS_CONTEXT_SWITCH_TYPE_VALUE_VOLUNTARY: () => (/* binding */ PROCESS_CONTEXT_SWITCH_TYPE_VALUE_VOLUNTARY),
/* harmony export */   PROCESS_CPU_STATE_VALUE_SYSTEM: () => (/* binding */ PROCESS_CPU_STATE_VALUE_SYSTEM),
/* harmony export */   PROCESS_CPU_STATE_VALUE_USER: () => (/* binding */ PROCESS_CPU_STATE_VALUE_USER),
/* harmony export */   PROCESS_CPU_STATE_VALUE_WAIT: () => (/* binding */ PROCESS_CPU_STATE_VALUE_WAIT),
/* harmony export */   PROCESS_PAGING_FAULT_TYPE_VALUE_MAJOR: () => (/* binding */ PROCESS_PAGING_FAULT_TYPE_VALUE_MAJOR),
/* harmony export */   PROCESS_PAGING_FAULT_TYPE_VALUE_MINOR: () => (/* binding */ PROCESS_PAGING_FAULT_TYPE_VALUE_MINOR),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_BEAM: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_BEAM),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_CPYTHON: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_CPYTHON),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_DOTNET: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_DOTNET),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_JVM: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_JVM),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_KERNEL: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_KERNEL),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_NATIVE: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_NATIVE),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_PERL: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_PERL),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_PHP: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_PHP),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_RUBY: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_RUBY),
/* harmony export */   PROFILE_FRAME_TYPE_VALUE_V8JS: () => (/* binding */ PROFILE_FRAME_TYPE_VALUE_V8JS),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_ABORTED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_ABORTED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_ALREADY_EXISTS: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_ALREADY_EXISTS),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_CANCELLED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_CANCELLED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_DATA_LOSS: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_DATA_LOSS),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_DEADLINE_EXCEEDED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_DEADLINE_EXCEEDED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_FAILED_PRECONDITION: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_FAILED_PRECONDITION),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_INTERNAL: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_INTERNAL),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_INVALID_ARGUMENT: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_INVALID_ARGUMENT),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_NOT_FOUND: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_NOT_FOUND),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_OUT_OF_RANGE: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_OUT_OF_RANGE),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_PERMISSION_DENIED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_PERMISSION_DENIED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_RESOURCE_EXHAUSTED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_RESOURCE_EXHAUSTED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAUTHENTICATED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAUTHENTICATED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAVAILABLE: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAVAILABLE),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNIMPLEMENTED: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNIMPLEMENTED),
/* harmony export */   RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNKNOWN: () => (/* binding */ RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNKNOWN),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_ABORTED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_ABORTED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_CANCELLED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_CANCELLED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_INTERNAL: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_INTERNAL),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_OK: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_OK),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED),
/* harmony export */   RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN: () => (/* binding */ RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN),
/* harmony export */   RPC_MESSAGE_TYPE_VALUE_RECEIVED: () => (/* binding */ RPC_MESSAGE_TYPE_VALUE_RECEIVED),
/* harmony export */   RPC_MESSAGE_TYPE_VALUE_SENT: () => (/* binding */ RPC_MESSAGE_TYPE_VALUE_SENT),
/* harmony export */   RPC_SYSTEM_VALUE_APACHE_DUBBO: () => (/* binding */ RPC_SYSTEM_VALUE_APACHE_DUBBO),
/* harmony export */   RPC_SYSTEM_VALUE_CONNECT_RPC: () => (/* binding */ RPC_SYSTEM_VALUE_CONNECT_RPC),
/* harmony export */   RPC_SYSTEM_VALUE_DOTNET_WCF: () => (/* binding */ RPC_SYSTEM_VALUE_DOTNET_WCF),
/* harmony export */   RPC_SYSTEM_VALUE_GRPC: () => (/* binding */ RPC_SYSTEM_VALUE_GRPC),
/* harmony export */   RPC_SYSTEM_VALUE_JAVA_RMI: () => (/* binding */ RPC_SYSTEM_VALUE_JAVA_RMI),
/* harmony export */   STATE_VALUE_IDLE: () => (/* binding */ STATE_VALUE_IDLE),
/* harmony export */   STATE_VALUE_USED: () => (/* binding */ STATE_VALUE_USED),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_IDLE: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_IDLE),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_INTERRUPT: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_INTERRUPT),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_IOWAIT: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_IOWAIT),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_NICE: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_NICE),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_STEAL: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_STEAL),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_SYSTEM: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_SYSTEM),
/* harmony export */   SYSTEM_CPU_STATE_VALUE_USER: () => (/* binding */ SYSTEM_CPU_STATE_VALUE_USER),
/* harmony export */   SYSTEM_FILESYSTEM_STATE_VALUE_FREE: () => (/* binding */ SYSTEM_FILESYSTEM_STATE_VALUE_FREE),
/* harmony export */   SYSTEM_FILESYSTEM_STATE_VALUE_RESERVED: () => (/* binding */ SYSTEM_FILESYSTEM_STATE_VALUE_RESERVED),
/* harmony export */   SYSTEM_FILESYSTEM_STATE_VALUE_USED: () => (/* binding */ SYSTEM_FILESYSTEM_STATE_VALUE_USED),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_EXFAT: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_EXFAT),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_EXT4: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_EXT4),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_FAT32: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_FAT32),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_HFSPLUS: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_HFSPLUS),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_NTFS: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_NTFS),
/* harmony export */   SYSTEM_FILESYSTEM_TYPE_VALUE_REFS: () => (/* binding */ SYSTEM_FILESYSTEM_TYPE_VALUE_REFS),
/* harmony export */   SYSTEM_MEMORY_STATE_VALUE_BUFFERS: () => (/* binding */ SYSTEM_MEMORY_STATE_VALUE_BUFFERS),
/* harmony export */   SYSTEM_MEMORY_STATE_VALUE_CACHED: () => (/* binding */ SYSTEM_MEMORY_STATE_VALUE_CACHED),
/* harmony export */   SYSTEM_MEMORY_STATE_VALUE_FREE: () => (/* binding */ SYSTEM_MEMORY_STATE_VALUE_FREE),
/* harmony export */   SYSTEM_MEMORY_STATE_VALUE_SHARED: () => (/* binding */ SYSTEM_MEMORY_STATE_VALUE_SHARED),
/* harmony export */   SYSTEM_MEMORY_STATE_VALUE_USED: () => (/* binding */ SYSTEM_MEMORY_STATE_VALUE_USED),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_CLOSE: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_CLOSE),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_CLOSE_WAIT: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_CLOSE_WAIT),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_CLOSING: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_CLOSING),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_DELETE: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_DELETE),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_ESTABLISHED: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_ESTABLISHED),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_1: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_1),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_2: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_2),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_LAST_ACK: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_LAST_ACK),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_LISTEN: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_LISTEN),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_SYN_RECV: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_SYN_RECV),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_SYN_SENT: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_SYN_SENT),
/* harmony export */   SYSTEM_NETWORK_STATE_VALUE_TIME_WAIT: () => (/* binding */ SYSTEM_NETWORK_STATE_VALUE_TIME_WAIT),
/* harmony export */   SYSTEM_PAGING_DIRECTION_VALUE_IN: () => (/* binding */ SYSTEM_PAGING_DIRECTION_VALUE_IN),
/* harmony export */   SYSTEM_PAGING_DIRECTION_VALUE_OUT: () => (/* binding */ SYSTEM_PAGING_DIRECTION_VALUE_OUT),
/* harmony export */   SYSTEM_PAGING_STATE_VALUE_FREE: () => (/* binding */ SYSTEM_PAGING_STATE_VALUE_FREE),
/* harmony export */   SYSTEM_PAGING_STATE_VALUE_USED: () => (/* binding */ SYSTEM_PAGING_STATE_VALUE_USED),
/* harmony export */   SYSTEM_PAGING_TYPE_VALUE_MAJOR: () => (/* binding */ SYSTEM_PAGING_TYPE_VALUE_MAJOR),
/* harmony export */   SYSTEM_PAGING_TYPE_VALUE_MINOR: () => (/* binding */ SYSTEM_PAGING_TYPE_VALUE_MINOR),
/* harmony export */   SYSTEM_PROCESSES_STATUS_VALUE_DEFUNCT: () => (/* binding */ SYSTEM_PROCESSES_STATUS_VALUE_DEFUNCT),
/* harmony export */   SYSTEM_PROCESSES_STATUS_VALUE_RUNNING: () => (/* binding */ SYSTEM_PROCESSES_STATUS_VALUE_RUNNING),
/* harmony export */   SYSTEM_PROCESSES_STATUS_VALUE_SLEEPING: () => (/* binding */ SYSTEM_PROCESSES_STATUS_VALUE_SLEEPING),
/* harmony export */   SYSTEM_PROCESSES_STATUS_VALUE_STOPPED: () => (/* binding */ SYSTEM_PROCESSES_STATUS_VALUE_STOPPED),
/* harmony export */   SYSTEM_PROCESS_STATUS_VALUE_DEFUNCT: () => (/* binding */ SYSTEM_PROCESS_STATUS_VALUE_DEFUNCT),
/* harmony export */   SYSTEM_PROCESS_STATUS_VALUE_RUNNING: () => (/* binding */ SYSTEM_PROCESS_STATUS_VALUE_RUNNING),
/* harmony export */   SYSTEM_PROCESS_STATUS_VALUE_SLEEPING: () => (/* binding */ SYSTEM_PROCESS_STATUS_VALUE_SLEEPING),
/* harmony export */   SYSTEM_PROCESS_STATUS_VALUE_STOPPED: () => (/* binding */ SYSTEM_PROCESS_STATUS_VALUE_STOPPED),
/* harmony export */   TEST_CASE_RESULT_STATUS_VALUE_FAIL: () => (/* binding */ TEST_CASE_RESULT_STATUS_VALUE_FAIL),
/* harmony export */   TEST_CASE_RESULT_STATUS_VALUE_PASS: () => (/* binding */ TEST_CASE_RESULT_STATUS_VALUE_PASS),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_ABORTED: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_ABORTED),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_FAILURE: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_FAILURE),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_IN_PROGRESS: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_IN_PROGRESS),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_SKIPPED: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_SKIPPED),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_SUCCESS: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_SUCCESS),
/* harmony export */   TEST_SUITE_RUN_STATUS_VALUE_TIMED_OUT: () => (/* binding */ TEST_SUITE_RUN_STATUS_VALUE_TIMED_OUT),
/* harmony export */   TLS_PROTOCOL_NAME_VALUE_SSL: () => (/* binding */ TLS_PROTOCOL_NAME_VALUE_SSL),
/* harmony export */   TLS_PROTOCOL_NAME_VALUE_TLS: () => (/* binding */ TLS_PROTOCOL_NAME_VALUE_TLS),
/* harmony export */   USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT: () => (/* binding */ USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT),
/* harmony export */   USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST: () => (/* binding */ USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST),
/* harmony export */   V8JS_GC_TYPE_VALUE_INCREMENTAL: () => (/* binding */ V8JS_GC_TYPE_VALUE_INCREMENTAL),
/* harmony export */   V8JS_GC_TYPE_VALUE_MAJOR: () => (/* binding */ V8JS_GC_TYPE_VALUE_MAJOR),
/* harmony export */   V8JS_GC_TYPE_VALUE_MINOR: () => (/* binding */ V8JS_GC_TYPE_VALUE_MINOR),
/* harmony export */   V8JS_GC_TYPE_VALUE_WEAKCB: () => (/* binding */ V8JS_GC_TYPE_VALUE_WEAKCB),
/* harmony export */   V8JS_HEAP_SPACE_NAME_VALUE_CODE_SPACE: () => (/* binding */ V8JS_HEAP_SPACE_NAME_VALUE_CODE_SPACE),
/* harmony export */   V8JS_HEAP_SPACE_NAME_VALUE_LARGE_OBJECT_SPACE: () => (/* binding */ V8JS_HEAP_SPACE_NAME_VALUE_LARGE_OBJECT_SPACE),
/* harmony export */   V8JS_HEAP_SPACE_NAME_VALUE_MAP_SPACE: () => (/* binding */ V8JS_HEAP_SPACE_NAME_VALUE_MAP_SPACE),
/* harmony export */   V8JS_HEAP_SPACE_NAME_VALUE_NEW_SPACE: () => (/* binding */ V8JS_HEAP_SPACE_NAME_VALUE_NEW_SPACE),
/* harmony export */   V8JS_HEAP_SPACE_NAME_VALUE_OLD_SPACE: () => (/* binding */ V8JS_HEAP_SPACE_NAME_VALUE_OLD_SPACE),
/* harmony export */   VCS_CHANGE_STATE_VALUE_CLOSED: () => (/* binding */ VCS_CHANGE_STATE_VALUE_CLOSED),
/* harmony export */   VCS_CHANGE_STATE_VALUE_MERGED: () => (/* binding */ VCS_CHANGE_STATE_VALUE_MERGED),
/* harmony export */   VCS_CHANGE_STATE_VALUE_OPEN: () => (/* binding */ VCS_CHANGE_STATE_VALUE_OPEN),
/* harmony export */   VCS_CHANGE_STATE_VALUE_WIP: () => (/* binding */ VCS_CHANGE_STATE_VALUE_WIP),
/* harmony export */   VCS_LINE_CHANGE_TYPE_VALUE_ADDED: () => (/* binding */ VCS_LINE_CHANGE_TYPE_VALUE_ADDED),
/* harmony export */   VCS_LINE_CHANGE_TYPE_VALUE_REMOVED: () => (/* binding */ VCS_LINE_CHANGE_TYPE_VALUE_REMOVED),
/* harmony export */   VCS_REF_BASE_TYPE_VALUE_BRANCH: () => (/* binding */ VCS_REF_BASE_TYPE_VALUE_BRANCH),
/* harmony export */   VCS_REF_BASE_TYPE_VALUE_TAG: () => (/* binding */ VCS_REF_BASE_TYPE_VALUE_TAG),
/* harmony export */   VCS_REF_HEAD_TYPE_VALUE_BRANCH: () => (/* binding */ VCS_REF_HEAD_TYPE_VALUE_BRANCH),
/* harmony export */   VCS_REF_HEAD_TYPE_VALUE_TAG: () => (/* binding */ VCS_REF_HEAD_TYPE_VALUE_TAG),
/* harmony export */   VCS_REF_TYPE_VALUE_BRANCH: () => (/* binding */ VCS_REF_TYPE_VALUE_BRANCH),
/* harmony export */   VCS_REF_TYPE_VALUE_TAG: () => (/* binding */ VCS_REF_TYPE_VALUE_TAG),
/* harmony export */   VCS_REPOSITORY_REF_TYPE_VALUE_BRANCH: () => (/* binding */ VCS_REPOSITORY_REF_TYPE_VALUE_BRANCH),
/* harmony export */   VCS_REPOSITORY_REF_TYPE_VALUE_TAG: () => (/* binding */ VCS_REPOSITORY_REF_TYPE_VALUE_TAG),
/* harmony export */   VCS_REVISION_DELTA_DIRECTION_VALUE_AHEAD: () => (/* binding */ VCS_REVISION_DELTA_DIRECTION_VALUE_AHEAD),
/* harmony export */   VCS_REVISION_DELTA_DIRECTION_VALUE_BEHIND: () => (/* binding */ VCS_REVISION_DELTA_DIRECTION_VALUE_BEHIND)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2
//----------------------------------------------------------------------------------------------------------
/**
 * Uniquely identifies the framework API revision offered by a version (`os.version`) of the android operating system. More information can be found [here](https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels).
 *
 * @example 33
 * @example 32
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ANDROID_OS_API_LEVEL = 'android.os.api_level';
/**
 * Deprecated use the `device.app.lifecycle` event definition including `android.state` as a payload field instead.
 *
 * @note The Android lifecycle states are defined in [Activity lifecycle callbacks](https://developer.android.com/guide/components/activities/activity-lifecycle#lc), and from which the `OS identifiers` are derived.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `device.app.lifecycle`.
 */
var ATTR_ANDROID_STATE = 'android.state';
/**
  * Enum value "background" for attribute {@link ATTR_ANDROID_STATE}.
  */
var ANDROID_STATE_VALUE_BACKGROUND = "background";
/**
  * Enum value "created" for attribute {@link ATTR_ANDROID_STATE}.
  */
var ANDROID_STATE_VALUE_CREATED = "created";
/**
  * Enum value "foreground" for attribute {@link ATTR_ANDROID_STATE}.
  */
var ANDROID_STATE_VALUE_FOREGROUND = "foreground";
/**
 * The provenance filename of the built attestation which directly relates to the build artifact filename. This filename **SHOULD** accompany the artifact at publish time. See the [SLSA Relationship](https://slsa.dev/spec/v1.0/distributing-provenance#relationship-between-artifacts-and-attestations) specification for more information.
 *
 * @example golang-binary-amd64-v0.1.0.attestation
 * @example docker-image-amd64-v0.1.0.intoto.json1
 * @example release-1.tar.gz.attestation
 * @example file-name-package.tar.gz.intoto.json1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_ATTESTATION_FILENAME = 'artifact.attestation.filename';
/**
 * The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the built attestation. Some envelopes in the [software attestation space](https://github.com/in-toto/attestation/tree/main/spec) also refer to this as the **digest**.
 *
 * @example 1b31dfcd5b7f9267bf2ff47651df1cfb9147b9e4df1f335accf65b4cda498408
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_ATTESTATION_HASH = 'artifact.attestation.hash';
/**
 * The id of the build [software attestation](https://slsa.dev/attestation-model).
 *
 * @example 123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_ATTESTATION_ID = 'artifact.attestation.id';
/**
 * The human readable file name of the artifact, typically generated during build and release processes. Often includes the package name and version in the file name.
 *
 * @example golang-binary-amd64-v0.1.0
 * @example docker-image-amd64-v0.1.0
 * @example release-1.tar.gz
 * @example file-name-package.tar.gz
 *
 * @note This file name can also act as the [Package Name](https://slsa.dev/spec/v1.0/terminology#package-model)
 * in cases where the package ecosystem maps accordingly.
 * Additionally, the artifact [can be published](https://slsa.dev/spec/v1.0/terminology#software-supply-chain)
 * for others, but that is not a guarantee.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_FILENAME = 'artifact.filename';
/**
 * The full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), often found in checksum.txt on a release of the artifact and used to verify package integrity.
 *
 * @example 9ff4c52759e2c4ac70b7d517bc7fcdc1cda631ca0045271ddd1b192544f8a3e9
 *
 * @note The specific algorithm used to create the cryptographic hash value is
 * not defined. In situations where an artifact has multiple
 * cryptographic hashes, it is up to the implementer to choose which
 * hash value to set here; this should be the most secure hash algorithm
 * that is suitable for the situation and consistent with the
 * corresponding attestation. The implementer can then provide the other
 * hash values through an additional set of attribute extensions as they
 * deem necessary.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_HASH = 'artifact.hash';
/**
 * The [Package URL](https://github.com/package-url/purl-spec) of the [package artifact](https://slsa.dev/spec/v1.0/terminology#package-model) provides a standard way to identify and locate the packaged artifact.
 *
 * @example pkg:github/package-url/purl-spec@1209109710924
 * @example pkg:npm/foo@12.12.3
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_PURL = 'artifact.purl';
/**
 * The version of the artifact.
 *
 * @example v0.1.0
 * @example 1.2.1
 * @example 122691-build
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ARTIFACT_VERSION = 'artifact.version';
/**
 * The JSON-serialized value of each item in the `AttributeDefinitions` request field.
 *
 * @example ["{ "AttributeName": "string", "AttributeType": "string" }"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';
/**
 * The value of the `AttributesToGet` request parameter.
 *
 * @example ["lives", "id"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';
/**
 * The value of the `ConsistentRead` request parameter.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';
/**
 * The JSON-serialized value of each item in the `ConsumedCapacity` response field.
 *
 * @example ["{ "CapacityUnits": number, "GlobalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "LocalSecondaryIndexes": { "string" : { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number } }, "ReadCapacityUnits": number, "Table": { "CapacityUnits": number, "ReadCapacityUnits": number, "WriteCapacityUnits": number }, "TableName": "string", "WriteCapacityUnits": number }"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';
/**
 * The value of the `Count` response parameter.
 *
 * @example 10
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';
/**
 * The value of the `ExclusiveStartTableName` request parameter.
 *
 * @example Users
 * @example CatsTable
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';
/**
 * The JSON-serialized value of each item in the `GlobalSecondaryIndexUpdates` request field.
 *
 * @example ["{ "Create": { "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';
/**
 * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field
 *
 * @example ["{ "IndexName": "string", "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" }, "ProvisionedThroughput": { "ReadCapacityUnits": number, "WriteCapacityUnits": number } }"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';
/**
 * The value of the `IndexName` request parameter.
 *
 * @example name_to_group
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';
/**
 * The JSON-serialized value of the `ItemCollectionMetrics` response field.
 *
 * @example { "string" : [ { "ItemCollectionKey": { "string" : { "B": blob, "BOOL": boolean, "BS": [ blob ], "L": [ "AttributeValue" ], "M": { "string" : "AttributeValue" }, "N": "string", "NS": [ "string" ], "NULL": boolean, "S": "string", "SS": [ "string" ] } }, "SizeEstimateRangeGB": [ number ] } ] }
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';
/**
 * The value of the `Limit` request parameter.
 *
 * @example 10
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';
/**
 * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.
 *
 * @example ["{ "IndexArn": "string", "IndexName": "string", "IndexSizeBytes": number, "ItemCount": number, "KeySchema": [ { "AttributeName": "string", "KeyType": "string" } ], "Projection": { "NonKeyAttributes": [ "string" ], "ProjectionType": "string" } }"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';
/**
 * The value of the `ProjectionExpression` request parameter.
 *
 * @example Title
 * @example Title, Price, Color
 * @example Title, Description, RelatedItems, ProductReviews
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';
/**
 * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
 *
 * @example 1.0
 * @example 2.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';
/**
 * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
 *
 * @example 1.0
 * @example 2.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';
/**
 * The value of the `ScanIndexForward` request parameter.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';
/**
 * The value of the `ScannedCount` response parameter.
 *
 * @example 50
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';
/**
 * The value of the `Segment` request parameter.
 *
 * @example 10
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';
/**
 * The value of the `Select` request parameter.
 *
 * @example ALL_ATTRIBUTES
 * @example COUNT
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';
/**
 * The number of items in the `TableNames` response parameter.
 *
 * @example 20
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';
/**
 * The keys in the `RequestItems` object field.
 *
 * @example ["Users", "Cats"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';
/**
 * The value of the `TotalSegments` request parameter.
 *
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';
/**
 * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
 *
 * @example arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';
/**
 * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).
 *
 * @example arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';
/**
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';
/**
  * Enum value "ec2" for attribute {@link ATTR_AWS_ECS_LAUNCHTYPE}.
  */
var AWS_ECS_LAUNCHTYPE_VALUE_EC2 = "ec2";
/**
  * Enum value "fargate" for attribute {@link ATTR_AWS_ECS_LAUNCHTYPE}.
  */
var AWS_ECS_LAUNCHTYPE_VALUE_FARGATE = "fargate";
/**
 * The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).
 *
 * @example arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b
 * @example arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';
/**
 * The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.
 *
 * @example opentelemetry-family
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';
/**
 * The ID of a running ECS task. The ID **MUST** be extracted from `task.arn`.
 *
 * @example 10838bed-421f-43ef-870a-f43feacbbb5b
 * @example 23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_TASK_ID = 'aws.ecs.task.id';
/**
 * The revision for the task definition used to create the ECS task.
 *
 * @example 8
 * @example 26
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';
/**
 * The ARN of an EKS cluster.
 *
 * @example arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';
/**
 * The AWS extended request ID as returned in the response header `x-amz-id-2`.
 *
 * @example wzHcyEWfmOGDIE5QOhTAqFDoDWP3y8IUvpNINCwL9N4TEHbUw0/gZJ+VZTmCNCWR7fezEN3eCiQ=
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_EXTENDED_REQUEST_ID = 'aws.extended_request_id';
/**
 * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).
 *
 * @example arn:aws:lambda:us-east-1:123456:function:myfunction:myalias
 *
 * @note This may be different from `cloud.resource_id` if an alias is involved.
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';
/**
 * The Amazon Resource Name(s) (ARN) of the AWS log group(s).
 *
 * @example ["arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*"]
 *
 * @note See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';
/**
 * The name(s) of the AWS log group(s) an application is writing to.
 *
 * @example ["/aws/lambda/my-function", "opentelemetry-service"]
 *
 * @note Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';
/**
 * The ARN(s) of the AWS log stream(s).
 *
 * @example ["arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"]
 *
 * @note See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';
/**
 * The name(s) of the AWS log stream(s) an application is writing to.
 *
 * @example ["logs/main/10838bed-421f-43ef-870a-f43feacbbb5b"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';
/**
 * The AWS request ID as returned in the response headers `x-amzn-requestid`, `x-amzn-request-id` or `x-amz-request-id`.
 *
 * @example 79b9da39-b7ae-508a-a6bc-864b2829c622
 * @example C9ER4AJX75574TDJ
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_REQUEST_ID = 'aws.request_id';
/**
 * The S3 bucket name the request refers to. Corresponds to the `--bucket` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
 *
 * @example some-bucket-name
 *
 * @note The `bucket` attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.
 * This applies to almost all S3 operations except `list-buckets`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_BUCKET = 'aws.s3.bucket';
/**
 * The source object (in the form `bucket`/`key`) for the copy operation.
 *
 * @example someFile.yml
 *
 * @note The `copy_source` attribute applies to S3 copy operations and corresponds to the `--copy-source` parameter
 * of the [copy-object operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html).
 * This applies in particular to the following operations:
 *
 *   - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
 *   - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_COPY_SOURCE = 'aws.s3.copy_source';
/**
 * The delete request container that specifies the objects to be deleted.
 *
 * @example Objects=[{Key=string,VersionId=string},{Key=string,VersionId=string}],Quiet=boolean
 *
 * @note The `delete` attribute is only applicable to the [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html) operation.
 * The `delete` attribute corresponds to the `--delete` parameter of the
 * [delete-objects operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_DELETE = 'aws.s3.delete';
/**
 * The S3 object key the request refers to. Corresponds to the `--key` parameter of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) operations.
 *
 * @example someFile.yml
 *
 * @note The `key` attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.
 * This applies in particular to the following operations:
 *
 *   - [copy-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html)
 *   - [delete-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html)
 *   - [get-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html)
 *   - [head-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html)
 *   - [put-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html)
 *   - [restore-object](https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html)
 *   - [select-object-content](https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html)
 *   - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
 *   - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
 *   - [create-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html)
 *   - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
 *   - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
 *   - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_KEY = 'aws.s3.key';
/**
 * The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.
 *
 * @example 3456
 *
 * @note The `part_number` attribute is only applicable to the [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
 * and [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html) operations.
 * The `part_number` attribute corresponds to the `--part-number` parameter of the
 * [upload-part operation within the S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_PART_NUMBER = 'aws.s3.part_number';
/**
 * Upload ID that identifies the multipart upload.
 *
 * @example dfRtDYWFbkRONycy.Yxwh66Yjlx.cph0gtNBtJ
 *
 * @note The `upload_id` attribute applies to S3 multipart-upload operations and corresponds to the `--upload-id` parameter
 * of the [S3 API](https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html) multipart operations.
 * This applies in particular to the following operations:
 *
 *   - [abort-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html)
 *   - [complete-multipart-upload](https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html)
 *   - [list-parts](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html)
 *   - [upload-part](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html)
 *   - [upload-part-copy](https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AWS_S3_UPLOAD_ID = 'aws.s3.upload_id';
/**
 * [Azure Resource Provider Namespace](https://learn.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers) as recognized by the client.
 *
 * @example Microsoft.Storage
 * @example Microsoft.KeyVault
 * @example Microsoft.ServiceBus
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZ_NAMESPACE = 'az.namespace';
/**
 * The unique identifier of the service request. It's generated by the Azure service and returned with the response.
 *
 * @example 00000000-0000-0000-0000-000000000000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZ_SERVICE_REQUEST_ID = 'az.service_request_id';
/**
 * The unique identifier of the client instance.
 *
 * @example 3ba4827d-4422-483f-b59f-85b74211c11d
 * @example storage-client-1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_CLIENT_ID = 'azure.client.id';
/**
 * Cosmos client connection mode.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_CONNECTION_MODE = 'azure.cosmosdb.connection.mode';
/**
  * Enum value "direct" for attribute {@link ATTR_AZURE_COSMOSDB_CONNECTION_MODE}.
  */
var AZURE_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT = "direct";
/**
  * Enum value "gateway" for attribute {@link ATTR_AZURE_COSMOSDB_CONNECTION_MODE}.
  */
var AZURE_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY = "gateway";
/**
 * Account or request [consistency level](https://learn.microsoft.com/azure/cosmos-db/consistency-levels).
 *
 * @example Eventual
 * @example ConsistentPrefix
 * @example BoundedStaleness
 * @example Strong
 * @example Session
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL = 'azure.cosmosdb.consistency.level';
/**
  * Enum value "BoundedStaleness" for attribute {@link ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS = "BoundedStaleness";
/**
  * Enum value "ConsistentPrefix" for attribute {@link ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX = "ConsistentPrefix";
/**
  * Enum value "Eventual" for attribute {@link ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL = "Eventual";
/**
  * Enum value "Session" for attribute {@link ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION = "Session";
/**
  * Enum value "Strong" for attribute {@link ATTR_AZURE_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var AZURE_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG = "Strong";
/**
 * List of regions contacted during operation in the order that they were contacted. If there is more than one region listed, it indicates that the operation was performed on multiple regions i.e. cross-regional call.
 *
 * @example ["North Central US", "Australia East", "Australia Southeast"]
 *
 * @note Region name matches the format of `displayName` in [Azure Location API](https://learn.microsoft.com/rest/api/subscription/subscriptions/list-locations?view=rest-subscription-2021-10-01&tabs=HTTP#location)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_OPERATION_CONTACTED_REGIONS = 'azure.cosmosdb.operation.contacted_regions';
/**
 * The number of request units consumed by the operation.
 *
 * @example 46.18
 * @example 1.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_OPERATION_REQUEST_CHARGE = 'azure.cosmosdb.operation.request_charge';
/**
 * Request payload size in bytes.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_REQUEST_BODY_SIZE = 'azure.cosmosdb.request.body.size';
/**
 * Cosmos DB sub status code.
 *
 * @example 1000
 * @example 1002
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_AZURE_COSMOSDB_RESPONSE_SUB_STATUS_CODE = 'azure.cosmosdb.response.sub_status_code';
/**
 * Array of brand name and version separated by a space
 *
 * @example [" Not A;Brand 99", "Chromium 99", "Chrome 99"]
 *
 * @note This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.brands`).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_BROWSER_BRANDS = 'browser.brands';
/**
 * Preferred language of the user using the browser
 *
 * @example en
 * @example en-US
 * @example fr
 * @example fr-FR
 *
 * @note This value is intended to be taken from the Navigator API `navigator.language`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_BROWSER_LANGUAGE = 'browser.language';
/**
 * A boolean that is true if the browser is running on a mobile device
 *
 * @note This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.mobile`). If unavailable, this attribute **SHOULD** be left unset.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_BROWSER_MOBILE = 'browser.mobile';
/**
 * The platform on which the browser is running
 *
 * @example Windows
 * @example macOS
 * @example Android
 *
 * @note This value is intended to be taken from the [UA client hints API](https://wicg.github.io/ua-client-hints/#interface) (`navigator.userAgentData.platform`). If unavailable, the legacy `navigator.platform` API **SHOULD NOT** be used instead and this attribute **SHOULD** be left unset in order for the values to be consistent.
 * The list of possible values is defined in the [W3C User-Agent Client Hints specification](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform). Note that some (but not all) of these values can overlap with values in the [`os.type` and `os.name` attributes](./os.md). However, for consistency, the values in the `browser.platform` attribute should capture the exact value that the user agent provides.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_BROWSER_PLATFORM = 'browser.platform';
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_CONSISTENCY_LEVEL = 'cassandra.consistency.level';
/**
  * Enum value "all" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL = "all";
/**
  * Enum value "any" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY = "any";
/**
  * Enum value "each_quorum" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM = "each_quorum";
/**
  * Enum value "local_one" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE = "local_one";
/**
  * Enum value "local_quorum" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM = "local_quorum";
/**
  * Enum value "local_serial" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL = "local_serial";
/**
  * Enum value "one" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE = "one";
/**
  * Enum value "quorum" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM = "quorum";
/**
  * Enum value "serial" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL = "serial";
/**
  * Enum value "three" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE = "three";
/**
  * Enum value "two" for attribute {@link ATTR_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO = "two";
/**
 * The data center of the coordinating node for a query.
 *
 * @example "us-west-2"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_COORDINATOR_DC = 'cassandra.coordinator.dc';
/**
 * The ID of the coordinating node for a query.
 *
 * @example "be13faa2-8574-4d71-926d-27f16cf8a7af"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_COORDINATOR_ID = 'cassandra.coordinator.id';
/**
 * The fetch size used for paging, i.e. how many rows will be returned at once.
 *
 * @example 5000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_PAGE_SIZE = 'cassandra.page.size';
/**
 * Whether or not the query is idempotent.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_QUERY_IDEMPOTENT = 'cassandra.query.idempotent';
/**
 * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.
 *
 * @example 0
 * @example 2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'cassandra.speculative_execution.count';
/**
 * The human readable name of the pipeline within a CI/CD system.
 *
 * @example Build and Test
 * @example Lint
 * @example Deploy Go Project
 * @example deploy_to_environment
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_NAME = 'cicd.pipeline.name';
/**
 * The result of a pipeline run.
 *
 * @example success
 * @example failure
 * @example timeout
 * @example skipped
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_RESULT = 'cicd.pipeline.result';
/**
  * Enum value "cancellation" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_CANCELLATION = "cancellation";
/**
  * Enum value "error" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_ERROR = "error";
/**
  * Enum value "failure" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_FAILURE = "failure";
/**
  * Enum value "skip" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_SKIP = "skip";
/**
  * Enum value "success" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_SUCCESS = "success";
/**
  * Enum value "timeout" for attribute {@link ATTR_CICD_PIPELINE_RESULT}.
  */
var CICD_PIPELINE_RESULT_VALUE_TIMEOUT = "timeout";
/**
 * The unique identifier of a pipeline run within a CI/CD system.
 *
 * @example 120912
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_RUN_ID = 'cicd.pipeline.run.id';
/**
 * The pipeline run goes through these states during its lifecycle.
 *
 * @example pending
 * @example executing
 * @example finalizing
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_RUN_STATE = 'cicd.pipeline.run.state';
/**
  * Enum value "executing" for attribute {@link ATTR_CICD_PIPELINE_RUN_STATE}.
  */
var CICD_PIPELINE_RUN_STATE_VALUE_EXECUTING = "executing";
/**
  * Enum value "finalizing" for attribute {@link ATTR_CICD_PIPELINE_RUN_STATE}.
  */
var CICD_PIPELINE_RUN_STATE_VALUE_FINALIZING = "finalizing";
/**
  * Enum value "pending" for attribute {@link ATTR_CICD_PIPELINE_RUN_STATE}.
  */
var CICD_PIPELINE_RUN_STATE_VALUE_PENDING = "pending";
/**
 * The human readable name of a task within a pipeline. Task here most closely aligns with a [computing process](https://wikipedia.org/wiki/Pipeline_(computing)) in a pipeline. Other terms for tasks include commands, steps, and procedures.
 *
 * @example Run GoLang Linter
 * @example Go Build
 * @example go-test
 * @example deploy_binary
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_TASK_NAME = 'cicd.pipeline.task.name';
/**
 * The unique identifier of a task run within a pipeline.
 *
 * @example 12097
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_TASK_RUN_ID = 'cicd.pipeline.task.run.id';
/**
 * The [URL](https://wikipedia.org/wiki/URL) of the pipeline run providing the complete address in order to locate and identify the pipeline run.
 *
 * @example https://github.com/open-telemetry/semantic-conventions/actions/runs/9753949763/job/26920038674?pr=1075
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_TASK_RUN_URL_FULL = 'cicd.pipeline.task.run.url.full';
/**
 * The type of the task within a pipeline.
 *
 * @example build
 * @example test
 * @example deploy
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_PIPELINE_TASK_TYPE = 'cicd.pipeline.task.type';
/**
  * Enum value "build" for attribute {@link ATTR_CICD_PIPELINE_TASK_TYPE}.
  */
var CICD_PIPELINE_TASK_TYPE_VALUE_BUILD = "build";
/**
  * Enum value "deploy" for attribute {@link ATTR_CICD_PIPELINE_TASK_TYPE}.
  */
var CICD_PIPELINE_TASK_TYPE_VALUE_DEPLOY = "deploy";
/**
  * Enum value "test" for attribute {@link ATTR_CICD_PIPELINE_TASK_TYPE}.
  */
var CICD_PIPELINE_TASK_TYPE_VALUE_TEST = "test";
/**
 * The name of a component of the CICD system.
 *
 * @example controller
 * @example scheduler
 * @example agent
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_SYSTEM_COMPONENT = 'cicd.system.component';
/**
 * The state of a CICD worker / agent.
 *
 * @example idle
 * @example busy
 * @example down
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CICD_WORKER_STATE = 'cicd.worker.state';
/**
  * Enum value "available" for attribute {@link ATTR_CICD_WORKER_STATE}.
  */
var CICD_WORKER_STATE_VALUE_AVAILABLE = "available";
/**
  * Enum value "busy" for attribute {@link ATTR_CICD_WORKER_STATE}.
  */
var CICD_WORKER_STATE_VALUE_BUSY = "busy";
/**
  * Enum value "offline" for attribute {@link ATTR_CICD_WORKER_STATE}.
  */
var CICD_WORKER_STATE_VALUE_OFFLINE = "offline";
/**
 * The cloud account ID the resource is assigned to.
 *
 * @example 111111111111
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_ACCOUNT_ID = 'cloud.account.id';
/**
 * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
 *
 * @example us-east-1c
 *
 * @note Availability zones are called "zones" on Alibaba Cloud and Google Cloud.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';
/**
 * The cloud platform in use.
 *
 * @note The prefix of the service **SHOULD** match the one specified in `cloud.provider`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_PLATFORM = 'cloud.platform';
/**
  * Enum value "alibaba_cloud_ecs" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS = "alibaba_cloud_ecs";
/**
  * Enum value "alibaba_cloud_fc" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC = "alibaba_cloud_fc";
/**
  * Enum value "alibaba_cloud_openshift" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_OPENSHIFT = "alibaba_cloud_openshift";
/**
  * Enum value "aws_app_runner" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_APP_RUNNER = "aws_app_runner";
/**
  * Enum value "aws_ec2" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_EC2 = "aws_ec2";
/**
  * Enum value "aws_ecs" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_ECS = "aws_ecs";
/**
  * Enum value "aws_eks" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_EKS = "aws_eks";
/**
  * Enum value "aws_elastic_beanstalk" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK = "aws_elastic_beanstalk";
/**
  * Enum value "aws_lambda" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_LAMBDA = "aws_lambda";
/**
  * Enum value "aws_openshift" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AWS_OPENSHIFT = "aws_openshift";
/**
  * Enum value "azure_aks" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_AKS = "azure_aks";
/**
  * Enum value "azure_app_service" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE = "azure_app_service";
/**
  * Enum value "azure_container_apps" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_APPS = "azure_container_apps";
/**
  * Enum value "azure_container_instances" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES = "azure_container_instances";
/**
  * Enum value "azure_functions" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS = "azure_functions";
/**
  * Enum value "azure_openshift" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_OPENSHIFT = "azure_openshift";
/**
  * Enum value "azure_vm" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_AZURE_VM = "azure_vm";
/**
  * Enum value "gcp_app_engine" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE = "gcp_app_engine";
/**
  * Enum value "gcp_bare_metal_solution" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_BARE_METAL_SOLUTION = "gcp_bare_metal_solution";
/**
  * Enum value "gcp_cloud_functions" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS = "gcp_cloud_functions";
/**
  * Enum value "gcp_cloud_run" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN = "gcp_cloud_run";
/**
  * Enum value "gcp_compute_engine" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE = "gcp_compute_engine";
/**
  * Enum value "gcp_kubernetes_engine" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE = "gcp_kubernetes_engine";
/**
  * Enum value "gcp_openshift" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_GCP_OPENSHIFT = "gcp_openshift";
/**
  * Enum value "ibm_cloud_openshift" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_IBM_CLOUD_OPENSHIFT = "ibm_cloud_openshift";
/**
  * Enum value "oracle_cloud_compute" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_COMPUTE = "oracle_cloud_compute";
/**
  * Enum value "oracle_cloud_oke" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_ORACLE_CLOUD_OKE = "oracle_cloud_oke";
/**
  * Enum value "tencent_cloud_cvm" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_CVM = "tencent_cloud_cvm";
/**
  * Enum value "tencent_cloud_eks" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_EKS = "tencent_cloud_eks";
/**
  * Enum value "tencent_cloud_scf" for attribute {@link ATTR_CLOUD_PLATFORM}.
  */
var CLOUD_PLATFORM_VALUE_TENCENT_CLOUD_SCF = "tencent_cloud_scf";
/**
 * Name of the cloud provider.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_PROVIDER = 'cloud.provider';
/**
  * Enum value "alibaba_cloud" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD = "alibaba_cloud";
/**
  * Enum value "aws" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_AWS = "aws";
/**
  * Enum value "azure" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_AZURE = "azure";
/**
  * Enum value "gcp" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_GCP = "gcp";
/**
  * Enum value "heroku" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_HEROKU = "heroku";
/**
  * Enum value "ibm_cloud" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_IBM_CLOUD = "ibm_cloud";
/**
  * Enum value "oracle_cloud" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_ORACLE_CLOUD = "oracle_cloud";
/**
  * Enum value "tencent_cloud" for attribute {@link ATTR_CLOUD_PROVIDER}.
  */
var CLOUD_PROVIDER_VALUE_TENCENT_CLOUD = "tencent_cloud";
/**
 * The geographical region the resource is running.
 *
 * @example us-central1
 * @example us-east-1
 *
 * @note Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_REGION = 'cloud.region';
/**
 * Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)
 *
 * @example arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function
 * @example //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID
 * @example /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>
 *
 * @note On some cloud providers, it may not be possible to determine the full ID at startup,
 * so it may be necessary to set `cloud.resource_id` as a span attribute instead.
 *
 * The exact value to use for `cloud.resource_id` depends on the cloud provider.
 * The following well-known definitions **MUST** be used if you set this attribute and they apply:
 *
 *   - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
 *     Take care not to use the "invoked ARN" directly but replace any
 *     [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)
 *     with the resolved function version, as the same runtime instance may be invocable with
 *     multiple different aliases.
 *   - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
 *   - **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,
 *     *not* the function app, having the form
 *     `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.
 *     This means that a span attribute **MUST** be used, as an Azure function app can host multiple functions that would usually share
 *     a TracerProvider.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUD_RESOURCE_ID = 'cloud.resource_id';
/**
 * The [event_id](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id) uniquely identifies the event.
 *
 * @example 123e4567-e89b-12d3-a456-426614174000
 * @example 0001
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDEVENTS_EVENT_ID = 'cloudevents.event_id';
/**
 * The [source](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) identifies the context in which an event happened.
 *
 * @example https://github.com/cloudevents
 * @example /cloudevents/spec/pull/123
 * @example my-service
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDEVENTS_EVENT_SOURCE = 'cloudevents.event_source';
/**
 * The [version of the CloudEvents specification](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion) which the event uses.
 *
 * @example "1.0"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDEVENTS_EVENT_SPEC_VERSION = 'cloudevents.event_spec_version';
/**
 * The [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) of the event in the context of the event producer (identified by source).
 *
 * @example "mynewfile.jpg"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDEVENTS_EVENT_SUBJECT = 'cloudevents.event_subject';
/**
 * The [event_type](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) contains a value describing the type of event related to the originating occurrence.
 *
 * @example com.github.pull_request.opened
 * @example com.example.object.deleted.v2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDEVENTS_EVENT_TYPE = 'cloudevents.event_type';
/**
 * The guid of the application.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.application_id`. This is the same value as
 * reported by `cf app <app-name> --guid`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_APP_ID = 'cloudfoundry.app.id';
/**
 * The index of the application instance. 0 when just one instance is active.
 *
 * @example 0
 * @example 1
 *
 * @note CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
 * It is used for logs and metrics emitted by CloudFoundry. It is
 * supposed to contain the application instance index for applications
 * deployed on the runtime.
 *
 * Application instrumentation should use the value from environment
 * variable `CF_INSTANCE_INDEX`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_APP_INSTANCE_ID = 'cloudfoundry.app.instance.id';
/**
 * The name of the application.
 *
 * @example my-app-name
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.application_name`. This is the same value
 * as reported by `cf apps`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_APP_NAME = 'cloudfoundry.app.name';
/**
 * The guid of the CloudFoundry org the application is running in.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.org_id`. This is the same value as
 * reported by `cf org <org-name> --guid`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_ORG_ID = 'cloudfoundry.org.id';
/**
 * The name of the CloudFoundry organization the app is running in.
 *
 * @example my-org-name
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.org_name`. This is the same value as
 * reported by `cf orgs`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_ORG_NAME = 'cloudfoundry.org.name';
/**
 * The UID identifying the process.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.process_id`. It is supposed to be equal to
 * `VCAP_APPLICATION.app_id` for applications deployed to the runtime.
 * For system components, this could be the actual PID.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_PROCESS_ID = 'cloudfoundry.process.id';
/**
 * The type of process.
 *
 * @example web
 *
 * @note CloudFoundry applications can consist of multiple jobs. Usually the
 * main process will be of type `web`. There can be additional background
 * tasks or side-cars with different process types.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_PROCESS_TYPE = 'cloudfoundry.process.type';
/**
 * The guid of the CloudFoundry space the application is running in.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.space_id`. This is the same value as
 * reported by `cf space <space-name> --guid`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_SPACE_ID = 'cloudfoundry.space.id';
/**
 * The name of the CloudFoundry space the application is running in.
 *
 * @example my-space-name
 *
 * @note Application instrumentation should use the value from environment
 * variable `VCAP_APPLICATION.space_name`. This is the same value as
 * reported by `cf spaces`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_SPACE_NAME = 'cloudfoundry.space.name';
/**
 * A guid or another name describing the event source.
 *
 * @example cf/gorouter
 *
 * @note CloudFoundry defines the `source_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
 * It is used for logs and metrics emitted by CloudFoundry. It is
 * supposed to contain the component name, e.g. "gorouter", for
 * CloudFoundry components.
 *
 * When system components are instrumented, values from the
 * [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
 * should be used. The `system.id` should be set to
 * `spec.deployment/spec.name`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_SYSTEM_ID = 'cloudfoundry.system.id';
/**
 * A guid describing the concrete instance of the event source.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note CloudFoundry defines the `instance_id` in the [Loggregator v2 envelope](https://github.com/cloudfoundry/loggregator-api#v2-envelope).
 * It is used for logs and metrics emitted by CloudFoundry. It is
 * supposed to contain the vm id for CloudFoundry components.
 *
 * When system components are instrumented, values from the
 * [Bosh spec](https://bosh.io/docs/jobs/#properties-spec)
 * should be used. The `system.instance.id` should be set to `spec.id`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CLOUDFOUNDRY_SYSTEM_INSTANCE_ID = 'cloudfoundry.system.instance.id';
/**
 * Deprecated, use `code.column.number`
 *
 * @example 16
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `code.column.number`
 */
var ATTR_CODE_COLUMN = 'code.column';
/**
 * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`.
 *
 * @example 16
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_COLUMN_NUMBER = 'code.column.number';
/**
 * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).
 *
 * @example "/usr/local/MyApplication/content_root/app/index.php"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_FILE_PATH = 'code.file.path';
/**
 * Deprecated, use `code.file.path` instead
 *
 * @example "/usr/local/MyApplication/content_root/app/index.php"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_FILEPATH = 'code.filepath';
/**
 * Deprecated, use `code.function.name` instead
 *
 * @example "serveRequest"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `code.function.name`
 */
var ATTR_CODE_FUNCTION = 'code.function';
/**
 * The method or function name, or equivalent (usually rightmost part of the code unit's name).
 *
 * @example "serveRequest"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_FUNCTION_NAME = 'code.function.name';
/**
 * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`.
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_LINE_NUMBER = 'code.line.number';
/**
 * Deprecated, use `code.line.number` instead
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `code.line.number`
 */
var ATTR_CODE_LINENO = 'code.lineno';
/**
 * The "namespace" within which `code.function.name` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function.name` form a unique identifier for the code unit.
 *
 * @example "com.example.MyHttpService"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_NAMESPACE = 'code.namespace';
/**
 * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
 *
 * @example "at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\n"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CODE_STACKTRACE = 'code.stacktrace';
/**
 * The command used to run the container (i.e. the command name).
 *
 * @example otelcontribcol
 *
 * @note If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_COMMAND = 'container.command';
/**
 * All the command arguments (including the command/executable itself) run by the container.
 *
 * @example ["otelcontribcol", "--config", "config.yaml"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_COMMAND_ARGS = 'container.command_args';
/**
 * The full command run by the container as a single string representing the full command.
 *
 * @example otelcontribcol --config config.yaml
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_COMMAND_LINE = 'container.command_line';
/**
 * Deprecated, use `cpu.mode` instead.
 *
 * @example user
 * @example kernel
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cpu.mode`
 */
var ATTR_CONTAINER_CPU_STATE = 'container.cpu.state';
/**
  * Enum value "kernel" for attribute {@link ATTR_CONTAINER_CPU_STATE}.
  */
var CONTAINER_CPU_STATE_VALUE_KERNEL = "kernel";
/**
  * Enum value "system" for attribute {@link ATTR_CONTAINER_CPU_STATE}.
  */
var CONTAINER_CPU_STATE_VALUE_SYSTEM = "system";
/**
  * Enum value "user" for attribute {@link ATTR_CONTAINER_CPU_STATE}.
  */
var CONTAINER_CPU_STATE_VALUE_USER = "user";
/**
 * The name of the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin used by the volume.
 *
 * @example pd.csi.storage.gke.io
 *
 * @note This can sometimes be referred to as a "driver" in CSI implementations. This should represent the `name` field of the GetPluginInfo RPC.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_CSI_PLUGIN_NAME = 'container.csi.plugin.name';
/**
 * The unique volume ID returned by the CSI ([Container Storage Interface](https://github.com/container-storage-interface/spec)) plugin.
 *
 * @example projects/my-gcp-project/zones/my-gcp-zone/disks/my-gcp-disk
 *
 * @note This can sometimes be referred to as a "volume handle" in CSI implementations. This should represent the `Volume.volume_id` field in CSI spec.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_CSI_VOLUME_ID = 'container.csi.volume.id';
/**
 * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.
 *
 * @example a3bf90e006b2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_ID = 'container.id';
/**
 * Runtime specific image identifier. Usually a hash algorithm followed by a UUID.
 *
 * @example sha256:19c92d0a00d1b66d897bceaa7319bee0dd38a10a851c60bcec9474aa3f01e50f
 *
 * @note Docker defines a sha256 of the image id; `container.image.id` corresponds to the `Image` field from the Docker container inspect [API](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect) endpoint.
 * K8s defines a link to the container registry repository with digest `"imageID": "registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625"`.
 * The ID is assigned by the container runtime and can vary in different environments. Consider using `oci.manifest.digest` if it is important to identify the same image in different environments/runtimes.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_IMAGE_ID = 'container.image.id';
/**
 * Name of the image the container was built on.
 *
 * @example gcr.io/opentelemetry/operator
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_IMAGE_NAME = 'container.image.name';
/**
 * Repo digests of the container image as provided by the container runtime.
 *
 * @example ["example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb", "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"]
 *
 * @note [Docker](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect) and [CRI](https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238) report those under the `RepoDigests` field.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_IMAGE_REPO_DIGESTS = 'container.image.repo_digests';
/**
 * Container image tags. An example can be found in [Docker Image Inspect](https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect). Should be only the `<tag>` section of the full name for example from `registry.example.com/my-org/my-image:<tag>`.
 *
 * @example ["v1.27.1", "3.5.7-0"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_IMAGE_TAGS = 'container.image.tags';
/**
 * Container labels, `<key>` being the label name, the value being the label value.
 *
 * @example container.label.app=nginx
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_LABEL = function (key) { return "container.label.".concat(key); };
/**
 * Deprecated, use `container.label` instead.
 *
 * @example container.label.app=nginx
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `container.label`.
 */
var ATTR_CONTAINER_LABELS = function (key) { return "container.labels.".concat(key); };
/**
 * Container name used by container runtime.
 *
 * @example opentelemetry-autoconf
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_NAME = 'container.name';
/**
 * The container runtime managing this container.
 *
 * @example docker
 * @example containerd
 * @example rkt
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CONTAINER_RUNTIME = 'container.runtime';
/**
 * The mode of the CPU
 *
 * @example user
 * @example system
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_CPU_MODE = 'cpu.mode';
/**
  * Enum value "idle" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_IDLE = "idle";
/**
  * Enum value "interrupt" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_INTERRUPT = "interrupt";
/**
  * Enum value "iowait" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_IOWAIT = "iowait";
/**
  * Enum value "kernel" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_KERNEL = "kernel";
/**
  * Enum value "nice" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_NICE = "nice";
/**
  * Enum value "steal" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_STEAL = "steal";
/**
  * Enum value "system" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_SYSTEM = "system";
/**
  * Enum value "user" for attribute {@link ATTR_CPU_MODE}.
  */
var CPU_MODE_VALUE_USER = "user";
/**
 * Deprecated, use `cassandra.consistency.level` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.consistency.level`.
 */
var ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';
/**
  * Enum value "all" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL = "all";
/**
  * Enum value "any" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY = "any";
/**
  * Enum value "each_quorum" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM = "each_quorum";
/**
  * Enum value "local_one" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE = "local_one";
/**
  * Enum value "local_quorum" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM = "local_quorum";
/**
  * Enum value "local_serial" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL = "local_serial";
/**
  * Enum value "one" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE = "one";
/**
  * Enum value "quorum" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM = "quorum";
/**
  * Enum value "serial" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL = "serial";
/**
  * Enum value "three" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE = "three";
/**
  * Enum value "two" for attribute {@link ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL}.
  */
var DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO = "two";
/**
 * Deprecated, use `cassandra.coordinator.dc` instead.
 *
 * @example "us-west-2"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.coordinator.dc`.
 */
var ATTR_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';
/**
 * Deprecated, use `cassandra.coordinator.id` instead.
 *
 * @example "be13faa2-8574-4d71-926d-27f16cf8a7af"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.coordinator.id`.
 */
var ATTR_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';
/**
 * Deprecated, use `cassandra.query.idempotent` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.query.idempotent`.
 */
var ATTR_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';
/**
 * Deprecated, use `cassandra.page.size` instead.
 *
 * @example 5000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.page.size`.
 */
var ATTR_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';
/**
 * Deprecated, use `cassandra.speculative_execution.count` instead.
 *
 * @example 0
 * @example 2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cassandra.speculative_execution.count`.
 */
var ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';
/**
 * Deprecated, use `db.collection.name` instead.
 *
 * @example "mytable"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.collection.name`.
 */
var ATTR_DB_CASSANDRA_TABLE = 'db.cassandra.table';
/**
 * The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation **SHOULD** use a combination of parameters that would make the name unique, for example, combining attributes `server.address`, `server.port`, and `db.namespace`, formatted as `server.address:server.port/db.namespace`. Instrumentations that generate connection pool name following different patterns **SHOULD** document it.
 *
 * @example myDataSource
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_CLIENT_CONNECTION_POOL_NAME = 'db.client.connection.pool.name';
/**
 * The state of a connection in the pool
 *
 * @example idle
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_CLIENT_CONNECTION_STATE = 'db.client.connection.state';
/**
  * Enum value "idle" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.
  */
var DB_CLIENT_CONNECTION_STATE_VALUE_IDLE = "idle";
/**
  * Enum value "used" for attribute {@link ATTR_DB_CLIENT_CONNECTION_STATE}.
  */
var DB_CLIENT_CONNECTION_STATE_VALUE_USED = "used";
/**
 * Deprecated, use `db.client.connection.pool.name` instead.
 *
 * @example myDataSource
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.client.connection.pool.name`.
 */
var ATTR_DB_CLIENT_CONNECTIONS_POOL_NAME = 'db.client.connections.pool.name';
/**
 * Deprecated, use `db.client.connection.state` instead.
 *
 * @example idle
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.client.connection.state`.
 */
var ATTR_DB_CLIENT_CONNECTIONS_STATE = 'db.client.connections.state';
/**
  * Enum value "idle" for attribute {@link ATTR_DB_CLIENT_CONNECTIONS_STATE}.
  */
var DB_CLIENT_CONNECTIONS_STATE_VALUE_IDLE = "idle";
/**
  * Enum value "used" for attribute {@link ATTR_DB_CLIENT_CONNECTIONS_STATE}.
  */
var DB_CLIENT_CONNECTIONS_STATE_VALUE_USED = "used";
/**
 * The name of a collection (table, container) within the database.
 *
 * @example public.users
 * @example customers
 *
 * @note It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.
 *
 * The collection name **SHOULD NOT** be extracted from `db.query.text`,
 * unless the query format is known to only ever have a single collection name present.
 *
 * For batch operations, if the individual operations are known to have the same collection name
 * then that collection name **SHOULD** be used.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_COLLECTION_NAME = 'db.collection.name';
/**
 * Deprecated, use `server.address`, `server.port` attributes instead.
 *
 * @example "Server=(localdb)\\v11.0;Integrated Security=true;"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.address` and `server.port`.
 */
var ATTR_DB_CONNECTION_STRING = 'db.connection_string';
/**
 * Deprecated, use `azure.client.id` instead.
 *
 * @example "3ba4827d-4422-483f-b59f-85b74211c11d"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.client.id`.
 */
var ATTR_DB_COSMOSDB_CLIENT_ID = 'db.cosmosdb.client_id';
/**
 * Deprecated, use `azure.cosmosdb.connection.mode` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.connection.mode`.
 */
var ATTR_DB_COSMOSDB_CONNECTION_MODE = 'db.cosmosdb.connection_mode';
/**
  * Enum value "direct" for attribute {@link ATTR_DB_COSMOSDB_CONNECTION_MODE}.
  */
var DB_COSMOSDB_CONNECTION_MODE_VALUE_DIRECT = "direct";
/**
  * Enum value "gateway" for attribute {@link ATTR_DB_COSMOSDB_CONNECTION_MODE}.
  */
var DB_COSMOSDB_CONNECTION_MODE_VALUE_GATEWAY = "gateway";
/**
 * Deprecated, use `cosmosdb.consistency.level` instead.
 *
 * @example Eventual
 * @example ConsistentPrefix
 * @example BoundedStaleness
 * @example Strong
 * @example Session
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.consistency.level`.
 */
var ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL = 'db.cosmosdb.consistency_level';
/**
  * Enum value "BoundedStaleness" for attribute {@link ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_BOUNDED_STALENESS = "BoundedStaleness";
/**
  * Enum value "ConsistentPrefix" for attribute {@link ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_CONSISTENT_PREFIX = "ConsistentPrefix";
/**
  * Enum value "Eventual" for attribute {@link ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_EVENTUAL = "Eventual";
/**
  * Enum value "Session" for attribute {@link ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_SESSION = "Session";
/**
  * Enum value "Strong" for attribute {@link ATTR_DB_COSMOSDB_CONSISTENCY_LEVEL}.
  */
var DB_COSMOSDB_CONSISTENCY_LEVEL_VALUE_STRONG = "Strong";
/**
 * Deprecated, use `db.collection.name` instead.
 *
 * @example "mytable"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.collection.name`.
 */
var ATTR_DB_COSMOSDB_CONTAINER = 'db.cosmosdb.container';
/**
 * Deprecated, no replacement at this time.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated No replacement at this time.
 */
var ATTR_DB_COSMOSDB_OPERATION_TYPE = 'db.cosmosdb.operation_type';
/**
  * Enum value "batch" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_BATCH = "batch";
/**
  * Enum value "create" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_CREATE = "create";
/**
  * Enum value "delete" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_DELETE = "delete";
/**
  * Enum value "execute" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE = "execute";
/**
  * Enum value "execute_javascript" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_EXECUTE_JAVASCRIPT = "execute_javascript";
/**
  * Enum value "head" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD = "head";
/**
  * Enum value "head_feed" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_HEAD_FEED = "head_feed";
/**
  * Enum value "invalid" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_INVALID = "invalid";
/**
  * Enum value "patch" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_PATCH = "patch";
/**
  * Enum value "query" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY = "query";
/**
  * Enum value "query_plan" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_QUERY_PLAN = "query_plan";
/**
  * Enum value "read" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_READ = "read";
/**
  * Enum value "read_feed" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_READ_FEED = "read_feed";
/**
  * Enum value "replace" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_REPLACE = "replace";
/**
  * Enum value "upsert" for attribute {@link ATTR_DB_COSMOSDB_OPERATION_TYPE}.
  */
var DB_COSMOSDB_OPERATION_TYPE_VALUE_UPSERT = "upsert";
/**
 * Deprecated, use `azure.cosmosdb.operation.contacted_regions` instead.
 *
 * @example ["North Central US", "Australia East", "Australia Southeast"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.operation.contacted_regions`.
 */
var ATTR_DB_COSMOSDB_REGIONS_CONTACTED = 'db.cosmosdb.regions_contacted';
/**
 * Deprecated, use `azure.cosmosdb.operation.request_charge` instead.
 *
 * @example 46.18
 * @example 1.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.operation.request_charge`.
 */
var ATTR_DB_COSMOSDB_REQUEST_CHARGE = 'db.cosmosdb.request_charge';
/**
 * Deprecated, use `azure.cosmosdb.request.body.size` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.request.body.size`.
 */
var ATTR_DB_COSMOSDB_REQUEST_CONTENT_LENGTH = 'db.cosmosdb.request_content_length';
/**
 * Deprecated, use `db.response.status_code` instead.
 *
 * @example 200
 * @example 201
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.response.status_code`.
 */
var ATTR_DB_COSMOSDB_STATUS_CODE = 'db.cosmosdb.status_code';
/**
 * Deprecated, use `azure.cosmosdb.response.sub_status_code` instead.
 *
 * @example 1000
 * @example 1002
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `azure.cosmosdb.response.sub_status_code`.
 */
var ATTR_DB_COSMOSDB_SUB_STATUS_CODE = 'db.cosmosdb.sub_status_code';
/**
 * Deprecated, use `db.namespace` instead.
 *
 * @example e9106fc68e3044f0b1475b04bf4ffd5f
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.namespace`.
 */
var ATTR_DB_ELASTICSEARCH_CLUSTER_NAME = 'db.elasticsearch.cluster.name';
/**
 * Deprecated, use `elasticsearch.node.name` instead.
 *
 * @example instance-0000000001
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `elasticsearch.node.name`.
 */
var ATTR_DB_ELASTICSEARCH_NODE_NAME = 'db.elasticsearch.node.name';
/**
 * Deprecated, use `db.operation.parameter` instead.
 *
 * @example db.elasticsearch.path_parts.index=test-index
 * @example db.elasticsearch.path_parts.doc_id=123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.operation.parameter`.
 */
var ATTR_DB_ELASTICSEARCH_PATH_PARTS = function (key) { return "db.elasticsearch.path_parts.".concat(key); };
/**
 * Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.
 *
 * @example "mysql-e26b99z.example.com"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.
 */
var ATTR_DB_INSTANCE_ID = 'db.instance.id';
/**
 * Removed, no replacement at this time.
 *
 * @example org.postgresql.Driver
 * @example com.microsoft.sqlserver.jdbc.SQLServerDriver
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed as not used.
 */
var ATTR_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';
/**
 * Deprecated, use `db.collection.name` instead.
 *
 * @example "mytable"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.collection.name`.
 */
var ATTR_DB_MONGODB_COLLECTION = 'db.mongodb.collection';
/**
 * Deprecated, SQL Server instance is now populated as a part of `db.namespace` attribute.
 *
 * @example "MSSQLSERVER"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, no replacement at this time.
 */
var ATTR_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';
/**
 * Deprecated, use `db.namespace` instead.
 *
 * @example customers
 * @example main
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.namespace`.
 */
var ATTR_DB_NAME = 'db.name';
/**
 * The name of the database, fully qualified within the server address and port.
 *
 * @example customers
 * @example test.users
 *
 * @note If a database system has multiple namespace components, they **SHOULD** be concatenated (potentially using database system specific conventions) from most general to most specific namespace component, and more specific namespaces **SHOULD NOT** be captured without the more general namespaces, to ensure that "startswith" queries for the more general namespaces will be valid.
 * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.
 * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_NAMESPACE = 'db.namespace';
/**
 * Deprecated, use `db.operation.name` instead.
 *
 * @example findAndModify
 * @example HMSET
 * @example SELECT
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.operation.name`.
 */
var ATTR_DB_OPERATION = 'db.operation';
/**
 * The number of queries included in a batch operation.
 *
 * @example 2
 * @example 3
 * @example 4
 *
 * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';
/**
 * The name of the operation or command being executed.
 *
 * @example findAndModify
 * @example HMSET
 * @example SELECT
 *
 * @note It is **RECOMMENDED** to capture the value as provided by the application
 * without attempting to do any case normalization.
 *
 * The operation name **SHOULD NOT** be extracted from `db.query.text`,
 * unless the query format is known to only ever have a single operation name present.
 *
 * For batch operations, if the individual operations are known to have the same operation name
 * then that operation name **SHOULD** be used prepended by `BATCH `,
 * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database
 * system specific term if more applicable.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_OPERATION_NAME = 'db.operation.name';
/**
 * A database operation parameter, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
 *
 * @example someval
 * @example 55
 *
 * @note If a parameter has no name and instead is referenced only by index, then `<key>` **SHOULD** be the 0-based index.
 * If `db.query.text` is also captured, then `db.operation.parameter.<key>` **SHOULD** match up with the parameterized placeholders present in `db.query.text`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_OPERATION_PARAMETER = function (key) { return "db.operation.parameter.".concat(key); };
/**
 * A query parameter used in `db.query.text`, with `<key>` being the parameter name, and the attribute value being a string representation of the parameter value.
 *
 * @example someval
 * @example 55
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.operation.parameter`.
 */
var ATTR_DB_QUERY_PARAMETER = function (key) { return "db.query.parameter.".concat(key); };
/**
 * Low cardinality representation of a database query text.
 *
 * @example SELECT wuser_table
 * @example INSERT shipping_details SELECT orders
 * @example get user by id
 *
 * @note `db.query.summary` provides static summary of the query text. It describes a class of database queries and is useful as a grouping key, especially when analyzing telemetry for database calls involving complex queries.
 * Summary may be available to the instrumentation through instrumentation hooks or other means. If it is not available, instrumentations that support query parsing **SHOULD** generate a summary following [Generating query summary](../../docs/database/database-spans.md#generating-a-summary-of-the-query-text) section.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_QUERY_SUMMARY = 'db.query.summary';
/**
 * The database query being executed.
 *
 * @example SELECT * FROM wuser_table where username = ?
 * @example SET mykey ?
 *
 * @note For sanitization see [Sanitization of `db.query.text`](../../docs/database/database-spans.md#sanitization-of-dbquerytext).
 * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.
 * Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_QUERY_TEXT = 'db.query.text';
/**
 * Deprecated, use `db.namespace` instead.
 *
 * @example 0
 * @example 1
 * @example 15
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.namespace`.
 */
var ATTR_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';
/**
 * Number of rows returned by the operation.
 *
 * @example 10
 * @example 30
 * @example 1000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_RESPONSE_RETURNED_ROWS = 'db.response.returned_rows';
/**
 * Database response status code.
 *
 * @example 102
 * @example ORA-17002
 * @example 08P01
 * @example 404
 *
 * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
 * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';
/**
 * Deprecated, use `db.collection.name` instead.
 *
 * @example "mytable"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.collection.name`.
 */
var ATTR_DB_SQL_TABLE = 'db.sql.table';
/**
 * The database statement being executed.
 *
 * @example SELECT * FROM wuser_table
 * @example SET mykey "WuValue"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.query.text`.
 */
var ATTR_DB_STATEMENT = 'db.statement';
/**
 * Deprecated, use `db.system.name` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.system.name`.
 */
var ATTR_DB_SYSTEM = 'db.system';
/**
  * Enum value "adabas" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_ADABAS = "adabas";
/**
  * Enum value "cache" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_CACHE = "cache";
/**
  * Enum value "cassandra" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_CASSANDRA = "cassandra";
/**
  * Enum value "clickhouse" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_CLICKHOUSE = "clickhouse";
/**
  * Enum value "cloudscape" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_CLOUDSCAPE = "cloudscape";
/**
  * Enum value "cockroachdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_COCKROACHDB = "cockroachdb";
/**
  * Enum value "coldfusion" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_COLDFUSION = "coldfusion";
/**
  * Enum value "cosmosdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_COSMOSDB = "cosmosdb";
/**
  * Enum value "couchbase" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_COUCHBASE = "couchbase";
/**
  * Enum value "couchdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_COUCHDB = "couchdb";
/**
  * Enum value "db2" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_DB2 = "db2";
/**
  * Enum value "derby" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_DERBY = "derby";
/**
  * Enum value "dynamodb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_DYNAMODB = "dynamodb";
/**
  * Enum value "edb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_EDB = "edb";
/**
  * Enum value "elasticsearch" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_ELASTICSEARCH = "elasticsearch";
/**
  * Enum value "filemaker" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_FILEMAKER = "filemaker";
/**
  * Enum value "firebird" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_FIREBIRD = "firebird";
/**
  * Enum value "firstsql" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_FIRSTSQL = "firstsql";
/**
  * Enum value "geode" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_GEODE = "geode";
/**
  * Enum value "h2" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_H2 = "h2";
/**
  * Enum value "hanadb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_HANADB = "hanadb";
/**
  * Enum value "hbase" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_HBASE = "hbase";
/**
  * Enum value "hive" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_HIVE = "hive";
/**
  * Enum value "hsqldb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_HSQLDB = "hsqldb";
/**
  * Enum value "influxdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INFLUXDB = "influxdb";
/**
  * Enum value "informix" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INFORMIX = "informix";
/**
  * Enum value "ingres" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INGRES = "ingres";
/**
  * Enum value "instantdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INSTANTDB = "instantdb";
/**
  * Enum value "interbase" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INTERBASE = "interbase";
/**
  * Enum value "intersystems_cache" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_INTERSYSTEMS_CACHE = "intersystems_cache";
/**
  * Enum value "mariadb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MARIADB = "mariadb";
/**
  * Enum value "maxdb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MAXDB = "maxdb";
/**
  * Enum value "memcached" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MEMCACHED = "memcached";
/**
  * Enum value "mongodb" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MONGODB = "mongodb";
/**
  * Enum value "mssql" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MSSQL = "mssql";
/**
  * Enum value "mssqlcompact" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MSSQLCOMPACT = "mssqlcompact";
/**
  * Enum value "mysql" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_MYSQL = "mysql";
/**
  * Enum value "neo4j" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_NEO4J = "neo4j";
/**
  * Enum value "netezza" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_NETEZZA = "netezza";
/**
  * Enum value "opensearch" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_OPENSEARCH = "opensearch";
/**
  * Enum value "oracle" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_ORACLE = "oracle";
/**
  * Enum value "other_sql" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_OTHER_SQL = "other_sql";
/**
  * Enum value "pervasive" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_PERVASIVE = "pervasive";
/**
  * Enum value "pointbase" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_POINTBASE = "pointbase";
/**
  * Enum value "postgresql" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_POSTGRESQL = "postgresql";
/**
  * Enum value "progress" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_PROGRESS = "progress";
/**
  * Enum value "redis" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_REDIS = "redis";
/**
  * Enum value "redshift" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_REDSHIFT = "redshift";
/**
  * Enum value "spanner" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_SPANNER = "spanner";
/**
  * Enum value "sqlite" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_SQLITE = "sqlite";
/**
  * Enum value "sybase" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_SYBASE = "sybase";
/**
  * Enum value "teradata" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_TERADATA = "teradata";
/**
  * Enum value "trino" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_TRINO = "trino";
/**
  * Enum value "vertica" for attribute {@link ATTR_DB_SYSTEM}.
  */
var DB_SYSTEM_VALUE_VERTICA = "vertica";
/**
 * The database management system (DBMS) product as identified by the client instrumentation.
 *
 * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DB_SYSTEM_NAME = 'db.system.name';
/**
  * Enum value "actian.ingres" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_ACTIAN_INGRES = "actian.ingres";
/**
  * Enum value "aws.dynamodb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_AWS_DYNAMODB = "aws.dynamodb";
/**
  * Enum value "aws.redshift" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_AWS_REDSHIFT = "aws.redshift";
/**
  * Enum value "azure.cosmosdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_AZURE_COSMOSDB = "azure.cosmosdb";
/**
  * Enum value "cassandra" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_CASSANDRA = "cassandra";
/**
  * Enum value "clickhouse" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_CLICKHOUSE = "clickhouse";
/**
  * Enum value "cockroachdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_COCKROACHDB = "cockroachdb";
/**
  * Enum value "couchbase" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_COUCHBASE = "couchbase";
/**
  * Enum value "couchdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_COUCHDB = "couchdb";
/**
  * Enum value "derby" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_DERBY = "derby";
/**
  * Enum value "elasticsearch" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_ELASTICSEARCH = "elasticsearch";
/**
  * Enum value "firebirdsql" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_FIREBIRDSQL = "firebirdsql";
/**
  * Enum value "gcp.spanner" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_GCP_SPANNER = "gcp.spanner";
/**
  * Enum value "geode" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_GEODE = "geode";
/**
  * Enum value "h2database" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_H2DATABASE = "h2database";
/**
  * Enum value "hbase" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_HBASE = "hbase";
/**
  * Enum value "hive" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_HIVE = "hive";
/**
  * Enum value "hsqldb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_HSQLDB = "hsqldb";
/**
  * Enum value "ibm.db2" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_IBM_DB2 = "ibm.db2";
/**
  * Enum value "ibm.informix" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_IBM_INFORMIX = "ibm.informix";
/**
  * Enum value "ibm.netezza" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_IBM_NETEZZA = "ibm.netezza";
/**
  * Enum value "influxdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_INFLUXDB = "influxdb";
/**
  * Enum value "instantdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_INSTANTDB = "instantdb";
/**
  * Enum value "intersystems.cache" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_INTERSYSTEMS_CACHE = "intersystems.cache";
/**
  * Enum value "mariadb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_MARIADB = "mariadb";
/**
  * Enum value "memcached" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_MEMCACHED = "memcached";
/**
  * Enum value "microsoft.sql_server" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = "microsoft.sql_server";
/**
  * Enum value "mongodb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_MONGODB = "mongodb";
/**
  * Enum value "mysql" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_MYSQL = "mysql";
/**
  * Enum value "neo4j" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_NEO4J = "neo4j";
/**
  * Enum value "opensearch" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_OPENSEARCH = "opensearch";
/**
  * Enum value "oracle.db" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_ORACLE_DB = "oracle.db";
/**
  * Enum value "other_sql" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_OTHER_SQL = "other_sql";
/**
  * Enum value "postgresql" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_POSTGRESQL = "postgresql";
/**
  * Enum value "redis" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_REDIS = "redis";
/**
  * Enum value "sap.hana" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_SAP_HANA = "sap.hana";
/**
  * Enum value "sap.maxdb" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_SAP_MAXDB = "sap.maxdb";
/**
  * Enum value "softwareag.adabas" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_SOFTWAREAG_ADABAS = "softwareag.adabas";
/**
  * Enum value "sqlite" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_SQLITE = "sqlite";
/**
  * Enum value "teradata" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_TERADATA = "teradata";
/**
  * Enum value "trino" for attribute {@link ATTR_DB_SYSTEM_NAME}.
  */
var DB_SYSTEM_NAME_VALUE_TRINO = "trino";
/**
 * Deprecated, no replacement at this time.
 *
 * @example readonly_user
 * @example reporting_user
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated No replacement at this time.
 */
var ATTR_DB_USER = 'db.user';
/**
 * 'Deprecated, use `deployment.environment.name` instead.'
 *
 * @example staging
 * @example production
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `deployment.environment.name` instead.
 */
var ATTR_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';
/**
 * Name of the [deployment environment](https://wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
 *
 * @example staging
 * @example production
 *
 * @note `deployment.environment.name` does not affect the uniqueness constraints defined through
 * the `service.namespace`, `service.name` and `service.instance.id` resource attributes.
 * This implies that resources carrying the following attribute combinations **MUST** be
 * considered to be identifying the same service:
 *
 *   - `service.name=frontend`, `deployment.environment.name=production`
 *   - `service.name=frontend`, `deployment.environment.name=staging`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEPLOYMENT_ENVIRONMENT_NAME = 'deployment.environment.name';
/**
 * The id of the deployment.
 *
 * @example 1208
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEPLOYMENT_ID = 'deployment.id';
/**
 * The name of the deployment.
 *
 * @example deploy my app
 * @example deploy-frontend
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEPLOYMENT_NAME = 'deployment.name';
/**
 * The status of the deployment.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEPLOYMENT_STATUS = 'deployment.status';
/**
  * Enum value "failed" for attribute {@link ATTR_DEPLOYMENT_STATUS}.
  */
var DEPLOYMENT_STATUS_VALUE_FAILED = "failed";
/**
  * Enum value "succeeded" for attribute {@link ATTR_DEPLOYMENT_STATUS}.
  */
var DEPLOYMENT_STATUS_VALUE_SUCCEEDED = "succeeded";
/**
 * Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
 *
 * @example destination.example.com
 * @example 10.1.2.80
 * @example /tmp/my.sock
 *
 * @note When observed from the source side, and when communicating through an intermediary, `destination.address` **SHOULD** represent the destination address behind any intermediaries, for example proxies, if it's available.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DESTINATION_ADDRESS = 'destination.address';
/**
 * Destination port number
 *
 * @example 3389
 * @example 2888
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DESTINATION_PORT = 'destination.port';
/**
 * A unique identifier representing the device
 *
 * @example 2ab2916d-a51f-4ac8-80ee-45ac31a28092
 *
 * @note The device identifier **MUST** only be defined using the values outlined below. This value is not an advertising identifier and **MUST NOT** be used as such. On iOS (Swift or Objective-C), this value **MUST** be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value **MUST** be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEVICE_ID = 'device.id';
/**
 * The name of the device manufacturer
 *
 * @example Apple
 * @example Samsung
 *
 * @note The Android OS provides this field via [Build](https://developer.android.com/reference/android/os/Build#MANUFACTURER). iOS apps **SHOULD** hardcode the value `Apple`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEVICE_MANUFACTURER = 'device.manufacturer';
/**
 * The model identifier for the device
 *
 * @example iPhone3,4
 * @example SM-G920F
 *
 * @note It's recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';
/**
 * The marketing name for the device model
 *
 * @example iPhone 6s Plus
 * @example Samsung Galaxy S6
 *
 * @note It's recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DEVICE_MODEL_NAME = 'device.model.name';
/**
 * The disk IO operation direction.
 *
 * @example read
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DISK_IO_DIRECTION = 'disk.io.direction';
/**
  * Enum value "read" for attribute {@link ATTR_DISK_IO_DIRECTION}.
  */
var DISK_IO_DIRECTION_VALUE_READ = "read";
/**
  * Enum value "write" for attribute {@link ATTR_DISK_IO_DIRECTION}.
  */
var DISK_IO_DIRECTION_VALUE_WRITE = "write";
/**
 * The name being queried.
 *
 * @example www.example.com
 * @example opentelemetry.io
 *
 * @note If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_DNS_QUESTION_NAME = 'dns.question.name';
/**
 * Represents the human-readable identifier of the node/instance to which a request was routed.
 *
 * @example instance-0000000001
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_ELASTICSEARCH_NODE_NAME = 'elasticsearch.node.name';
/**
 * Deprecated, use `user.id` instead.
 *
 * @example "username"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `user.id` attribute.
 */
var ATTR_ENDUSER_ID = 'enduser.id';
/**
 * Deprecated, use `user.roles` instead.
 *
 * @example "admin"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `user.roles` attribute.
 */
var ATTR_ENDUSER_ROLE = 'enduser.role';
/**
 * Deprecated, no replacement at this time.
 *
 * @example "read:message, write:files"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed.
 */
var ATTR_ENDUSER_SCOPE = 'enduser.scope';
/**
 * Identifies the class / type of event.
 *
 * @example browser.mouse.click
 * @example device.app.lifecycle
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by EventName top-level field on the LogRecord
 */
var ATTR_EVENT_NAME = 'event.name';
/**
 * A boolean that is true if the serverless function is executed for the first time (aka cold-start).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_COLDSTART = 'faas.coldstart';
/**
 * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).
 *
 * @example "0/5 * * * ? *"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_CRON = 'faas.cron';
/**
 * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
 *
 * @example myBucketName
 * @example myDbName
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';
/**
 * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
 *
 * @example myFile.txt
 * @example myTableName
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_DOCUMENT_NAME = 'faas.document.name';
/**
 * Describes the type of the operation that was performed on the data.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';
/**
  * Enum value "delete" for attribute {@link ATTR_FAAS_DOCUMENT_OPERATION}.
  */
var FAAS_DOCUMENT_OPERATION_VALUE_DELETE = "delete";
/**
  * Enum value "edit" for attribute {@link ATTR_FAAS_DOCUMENT_OPERATION}.
  */
var FAAS_DOCUMENT_OPERATION_VALUE_EDIT = "edit";
/**
  * Enum value "insert" for attribute {@link ATTR_FAAS_DOCUMENT_OPERATION}.
  */
var FAAS_DOCUMENT_OPERATION_VALUE_INSERT = "insert";
/**
 * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
 *
 * @example "2020-01-23T13:47:06Z"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_DOCUMENT_TIME = 'faas.document.time';
/**
 * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
 *
 * @example 2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de
 *
 * @note - **AWS Lambda:** Use the (full) log stream name.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_INSTANCE = 'faas.instance';
/**
 * The invocation ID of the current function invocation.
 *
 * @example "af9d5aa4-a685-4c5f-a22b-444f80b3cc28"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_INVOCATION_ID = 'faas.invocation_id';
/**
 * The name of the invoked function.
 *
 * @example "my-function"
 *
 * @note **SHOULD** be equal to the `faas.name` resource attribute of the invoked function.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_INVOKED_NAME = 'faas.invoked_name';
/**
 * The cloud provider of the invoked function.
 *
 * @note **SHOULD** be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';
/**
  * Enum value "alibaba_cloud" for attribute {@link ATTR_FAAS_INVOKED_PROVIDER}.
  */
var FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD = "alibaba_cloud";
/**
  * Enum value "aws" for attribute {@link ATTR_FAAS_INVOKED_PROVIDER}.
  */
var FAAS_INVOKED_PROVIDER_VALUE_AWS = "aws";
/**
  * Enum value "azure" for attribute {@link ATTR_FAAS_INVOKED_PROVIDER}.
  */
var FAAS_INVOKED_PROVIDER_VALUE_AZURE = "azure";
/**
  * Enum value "gcp" for attribute {@link ATTR_FAAS_INVOKED_PROVIDER}.
  */
var FAAS_INVOKED_PROVIDER_VALUE_GCP = "gcp";
/**
  * Enum value "tencent_cloud" for attribute {@link ATTR_FAAS_INVOKED_PROVIDER}.
  */
var FAAS_INVOKED_PROVIDER_VALUE_TENCENT_CLOUD = "tencent_cloud";
/**
 * The cloud region of the invoked function.
 *
 * @example "eu-central-1"
 *
 * @note **SHOULD** be equal to the `cloud.region` resource attribute of the invoked function.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_INVOKED_REGION = 'faas.invoked_region';
/**
 * The amount of memory available to the serverless function converted to Bytes.
 *
 * @example 134217728
 *
 * @note It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_MAX_MEMORY = 'faas.max_memory';
/**
 * The name of the single function that this runtime instance executes.
 *
 * @example my-function
 * @example myazurefunctionapp/some-function-name
 *
 * @note This is the name of the function as configured/deployed on the FaaS
 * platform and is usually different from the name of the callback
 * function (which may be stored in the
 * [`code.namespace`/`code.function.name`](/docs/general/attributes.md#source-code-attributes)
 * span attributes).
 *
 * For some cloud providers, the above definition is ambiguous. The following
 * definition of function name **MUST** be used for this attribute
 * (and consequently the span name) for the listed cloud providers/products:
 *
 *   - **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name
 *     followed by a forward slash followed by the function name (this form
 *     can also be seen in the resource JSON for the function).
 *     This means that a span attribute **MUST** be used, as an Azure function
 *     app can host multiple functions that would usually share
 *     a TracerProvider (see also the `cloud.resource_id` attribute).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_NAME = 'faas.name';
/**
 * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
 *
 * @example "2020-01-23T13:47:06Z"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_TIME = 'faas.time';
/**
 * Type of the trigger which caused this function invocation.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_TRIGGER = 'faas.trigger';
/**
  * Enum value "datasource" for attribute {@link ATTR_FAAS_TRIGGER}.
  */
var FAAS_TRIGGER_VALUE_DATASOURCE = "datasource";
/**
  * Enum value "http" for attribute {@link ATTR_FAAS_TRIGGER}.
  */
var FAAS_TRIGGER_VALUE_HTTP = "http";
/**
  * Enum value "other" for attribute {@link ATTR_FAAS_TRIGGER}.
  */
var FAAS_TRIGGER_VALUE_OTHER = "other";
/**
  * Enum value "pubsub" for attribute {@link ATTR_FAAS_TRIGGER}.
  */
var FAAS_TRIGGER_VALUE_PUBSUB = "pubsub";
/**
  * Enum value "timer" for attribute {@link ATTR_FAAS_TRIGGER}.
  */
var FAAS_TRIGGER_VALUE_TIMER = "timer";
/**
 * The immutable version of the function being executed.
 *
 * @example 26
 * @example pinkfroid-00002
 *
 * @note Depending on the cloud provider and platform, use:
 *
 *   - **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
 *     (an integer represented as a decimal string).
 *   - **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)
 *     (i.e., the function name plus the revision suffix).
 *   - **Google Cloud Functions:** The value of the
 *     [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
 *   - **Azure Functions:** Not applicable. Do not set this attribute.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FAAS_VERSION = 'faas.version';
/**
 * The unique identifier for the flag evaluation context. For example, the targeting key.
 *
 * @example 5157782b-2203-4c80-a857-dbbd5e7761db
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_CONTEXT_ID = 'feature_flag.context.id';
/**
 * A message explaining the nature of an error occurring during flag evaluation.
 *
 * @example Flag `header-color` expected type `string` but found type `number`
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_EVALUATION_ERROR_MESSAGE = 'feature_flag.evaluation.error.message';
/**
 * The reason code which shows how a feature flag value was determined.
 *
 * @example static
 * @example targeting_match
 * @example error
 * @example default
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_EVALUATION_REASON = 'feature_flag.evaluation.reason';
/**
  * Enum value "cached" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_CACHED = "cached";
/**
  * Enum value "default" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_DEFAULT = "default";
/**
  * Enum value "disabled" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_DISABLED = "disabled";
/**
  * Enum value "error" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_ERROR = "error";
/**
  * Enum value "split" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_SPLIT = "split";
/**
  * Enum value "stale" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_STALE = "stale";
/**
  * Enum value "static" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_STATIC = "static";
/**
  * Enum value "targeting_match" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_TARGETING_MATCH = "targeting_match";
/**
  * Enum value "unknown" for attribute {@link ATTR_FEATURE_FLAG_EVALUATION_REASON}.
  */
var FEATURE_FLAG_EVALUATION_REASON_VALUE_UNKNOWN = "unknown";
/**
 * The lookup key of the feature flag.
 *
 * @example logo-color
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_KEY = 'feature_flag.key';
/**
 * Identifies the feature flag provider.
 *
 * @example Flag Manager
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_PROVIDER_NAME = 'feature_flag.provider_name';
/**
 * The identifier of the [flag set](https://openfeature.dev/specification/glossary/#flag-set) to which the feature flag belongs.
 *
 * @example proj-1
 * @example ab98sgs
 * @example service1/dev
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_SET_ID = 'feature_flag.set.id';
/**
 * A semantic identifier for an evaluated flag value.
 *
 * @example red
 * @example true
 * @example on
 *
 * @note A semantic identifier, commonly referred to as a variant, provides a means
 * for referring to a value without including the value itself. This can
 * provide additional context for understanding the meaning behind a value.
 * For example, the variant `red` maybe be used for the value `#c05543`.
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_VARIANT = 'feature_flag.variant';
/**
 * The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.
 *
 * @example 1
 * @example 01ABCDEF
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FEATURE_FLAG_VERSION = 'feature_flag.version';
/**
 * Time when the file was last accessed, in ISO 8601 format.
 *
 * @example 2021-01-01T12:00:00Z
 *
 * @note This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_ACCESSED = 'file.accessed';
/**
 * Array of file attributes.
 *
 * @example ["readonly", "hidden"]
 *
 * @note Attributes names depend on the OS or file system. Here’s a non-exhaustive list of values expected for this attribute: `archive`, `compressed`, `directory`, `encrypted`, `execute`, `hidden`, `immutable`, `journaled`, `read`, `readonly`, `symbolic link`, `system`, `temporary`, `write`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_ATTRIBUTES = 'file.attributes';
/**
 * Time when the file attributes or metadata was last changed, in ISO 8601 format.
 *
 * @example 2021-01-01T12:00:00Z
 *
 * @note `file.changed` captures the time when any of the file's properties or attributes (including the content) are changed, while `file.modified` captures the timestamp when the file content is modified.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_CHANGED = 'file.changed';
/**
 * Time when the file was created, in ISO 8601 format.
 *
 * @example 2021-01-01T12:00:00Z
 *
 * @note This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_CREATED = 'file.created';
/**
 * Directory where the file is located. It should include the drive letter, when appropriate.
 *
 * @example /home/user
 * @example C:\\Program Files\\MyApp
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_DIRECTORY = 'file.directory';
/**
 * File extension, excluding the leading dot.
 *
 * @example png
 * @example gz
 *
 * @note When the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_EXTENSION = 'file.extension';
/**
 * Name of the fork. A fork is additional data associated with a filesystem object.
 *
 * @example Zone.Identifer
 *
 * @note On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
 * On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: C:\\path\\to\\filename.extension:some_fork_name, and some_fork_name is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_FORK_NAME = 'file.fork_name';
/**
 * Primary Group ID (GID) of the file.
 *
 * @example 1000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_GROUP_ID = 'file.group.id';
/**
 * Primary group name of the file.
 *
 * @example users
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_GROUP_NAME = 'file.group.name';
/**
 * Inode representing the file in the filesystem.
 *
 * @example 256383
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_INODE = 'file.inode';
/**
 * Mode of the file in octal representation.
 *
 * @example 0640
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_MODE = 'file.mode';
/**
 * Time when the file content was last modified, in ISO 8601 format.
 *
 * @example 2021-01-01T12:00:00Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_MODIFIED = 'file.modified';
/**
 * Name of the file including the extension, without the directory.
 *
 * @example example.png
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_NAME = 'file.name';
/**
 * The user ID (UID) or security identifier (SID) of the file owner.
 *
 * @example 1000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_OWNER_ID = 'file.owner.id';
/**
 * Username of the file owner.
 *
 * @example root
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_OWNER_NAME = 'file.owner.name';
/**
 * Full path to the file, including the file name. It should include the drive letter, when appropriate.
 *
 * @example /home/alice/example.png
 * @example C:\\Program Files\\MyApp\\myapp.exe
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_PATH = 'file.path';
/**
 * File size in bytes.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_SIZE = 'file.size';
/**
 * Path to the target of a symbolic link.
 *
 * @example /usr/bin/python3
 *
 * @note This attribute is only applicable to symbolic links.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_FILE_SYMBOLIC_LINK_TARGET_PATH = 'file.symbolic_link.target_path';
/**
 * Identifies the Google Cloud service for which the official client library is intended.
 *
 * @example appengine
 * @example run
 * @example firestore
 * @example alloydb
 * @example spanner
 *
 * @note Intended to be a stable identifier for Google Cloud client libraries that is uniform across implementation languages. The value should be derived from the canonical service domain for the service; for example, 'foo.googleapis.com' should result in a value of 'foo'.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GCP_CLIENT_SERVICE = 'gcp.client.service';
/**
 * The name of the Cloud Run [execution](https://cloud.google.com/run/docs/managing/job-executions) being run for the Job, as set by the [`CLOUD_RUN_EXECUTION`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
 *
 * @example job-name-xxxx
 * @example sample-job-mdw84
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GCP_CLOUD_RUN_JOB_EXECUTION = 'gcp.cloud_run.job.execution';
/**
 * The index for a task within an execution as provided by the [`CLOUD_RUN_TASK_INDEX`](https://cloud.google.com/run/docs/container-contract#jobs-env-vars) environment variable.
 *
 * @example 0
 * @example 1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GCP_CLOUD_RUN_JOB_TASK_INDEX = 'gcp.cloud_run.job.task_index';
/**
 * The hostname of a GCE instance. This is the full value of the default or [custom hostname](https://cloud.google.com/compute/docs/instances/custom-hostname-vm).
 *
 * @example my-host1234.example.com
 * @example sample-vm.us-west1-b.c.my-project.internal
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GCP_GCE_INSTANCE_HOSTNAME = 'gcp.gce.instance.hostname';
/**
 * The instance name of a GCE instance. This is the value provided by `host.name`, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the [default internal DNS name](https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names).
 *
 * @example instance-1
 * @example my-vm-name
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GCP_GCE_INSTANCE_NAME = 'gcp.gce.instance.name';
/**
 * Deprecated, use Event API to report completions contents.
 *
 * @example [{'role': 'assistant', 'content': 'The capital of France is Paris.'}]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed, no replacement at this time.
 */
var ATTR_GEN_AI_COMPLETION = 'gen_ai.completion';
/**
 * The response format that is requested.
 *
 * @example json
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT = 'gen_ai.openai.request.response_format';
/**
  * Enum value "json_object" for attribute {@link ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT}.
  */
var GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_OBJECT = "json_object";
/**
  * Enum value "json_schema" for attribute {@link ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT}.
  */
var GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_JSON_SCHEMA = "json_schema";
/**
  * Enum value "text" for attribute {@link ATTR_GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT}.
  */
var GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT_VALUE_TEXT = "text";
/**
 * Deprecated, use `gen_ai.request.seed`.
 *
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `gen_ai.request.seed` attribute.
 */
var ATTR_GEN_AI_OPENAI_REQUEST_SEED = 'gen_ai.openai.request.seed';
/**
 * The service tier requested. May be a specific tier, default, or auto.
 *
 * @example auto
 * @example default
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_OPENAI_REQUEST_SERVICE_TIER = 'gen_ai.openai.request.service_tier';
/**
  * Enum value "auto" for attribute {@link ATTR_GEN_AI_OPENAI_REQUEST_SERVICE_TIER}.
  */
var GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_AUTO = "auto";
/**
  * Enum value "default" for attribute {@link ATTR_GEN_AI_OPENAI_REQUEST_SERVICE_TIER}.
  */
var GEN_AI_OPENAI_REQUEST_SERVICE_TIER_VALUE_DEFAULT = "default";
/**
 * The service tier used for the response.
 *
 * @example scale
 * @example default
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_OPENAI_RESPONSE_SERVICE_TIER = 'gen_ai.openai.response.service_tier';
/**
 * A fingerprint to track any eventual change in the Generative AI environment.
 *
 * @example fp_44709d6fcb
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_OPENAI_RESPONSE_SYSTEM_FINGERPRINT = 'gen_ai.openai.response.system_fingerprint';
/**
 * The name of the operation being performed.
 *
 * @note If one of the predefined values applies, but specific system uses a different name it's **RECOMMENDED** to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries **SHOULD** use applicable predefined value.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_OPERATION_NAME = 'gen_ai.operation.name';
/**
  * Enum value "chat" for attribute {@link ATTR_GEN_AI_OPERATION_NAME}.
  */
var GEN_AI_OPERATION_NAME_VALUE_CHAT = "chat";
/**
  * Enum value "embeddings" for attribute {@link ATTR_GEN_AI_OPERATION_NAME}.
  */
var GEN_AI_OPERATION_NAME_VALUE_EMBEDDINGS = "embeddings";
/**
  * Enum value "text_completion" for attribute {@link ATTR_GEN_AI_OPERATION_NAME}.
  */
var GEN_AI_OPERATION_NAME_VALUE_TEXT_COMPLETION = "text_completion";
/**
 * Deprecated, use Event API to report prompt contents.
 *
 * @example [{'role': 'user', 'content': 'What is the capital of France?'}]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed, no replacement at this time.
 */
var ATTR_GEN_AI_PROMPT = 'gen_ai.prompt';
/**
 * The encoding formats requested in an embeddings operation, if specified.
 *
 * @example ["base64"]
 * @example ["float", "binary"]
 *
 * @note In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_ENCODING_FORMATS = 'gen_ai.request.encoding_formats';
/**
 * The frequency penalty setting for the GenAI request.
 *
 * @example 0.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_FREQUENCY_PENALTY = 'gen_ai.request.frequency_penalty';
/**
 * The maximum number of tokens the model generates for a request.
 *
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_MAX_TOKENS = 'gen_ai.request.max_tokens';
/**
 * The name of the GenAI model a request is being made to.
 *
 * @example "gpt-4"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_MODEL = 'gen_ai.request.model';
/**
 * The presence penalty setting for the GenAI request.
 *
 * @example 0.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_PRESENCE_PENALTY = 'gen_ai.request.presence_penalty';
/**
 * Requests with same seed value more likely to return same result.
 *
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_SEED = 'gen_ai.request.seed';
/**
 * List of sequences that the model will use to stop generating further tokens.
 *
 * @example ["forest", "lived"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_STOP_SEQUENCES = 'gen_ai.request.stop_sequences';
/**
 * The temperature setting for the GenAI request.
 *
 * @example 0.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_TEMPERATURE = 'gen_ai.request.temperature';
/**
 * The top_k sampling setting for the GenAI request.
 *
 * @example 1.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_TOP_K = 'gen_ai.request.top_k';
/**
 * The top_p sampling setting for the GenAI request.
 *
 * @example 1.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_REQUEST_TOP_P = 'gen_ai.request.top_p';
/**
 * Array of reasons the model stopped generating tokens, corresponding to each generation received.
 *
 * @example ["stop"]
 * @example ["stop", "length"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_RESPONSE_FINISH_REASONS = 'gen_ai.response.finish_reasons';
/**
 * The unique identifier for the completion.
 *
 * @example chatcmpl-123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_RESPONSE_ID = 'gen_ai.response.id';
/**
 * The name of the model that generated the response.
 *
 * @example gpt-4-0613
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_RESPONSE_MODEL = 'gen_ai.response.model';
/**
 * The Generative AI product as identified by the client or server instrumentation.
 *
 * @example "openai"
 *
 * @note The `gen_ai.system` describes a family of GenAI models with specific model identified
 * by `gen_ai.request.model` and `gen_ai.response.model` attributes.
 *
 * The actual GenAI product may differ from the one identified by the client.
 * Multiple systems, including Azure OpenAI and Gemini, are accessible by OpenAI client
 * libraries. In such cases, the `gen_ai.system` is set to `openai` based on the
 * instrumentation's best knowledge, instead of the actual system. The `server.address`
 * attribute may help identify the actual system in use for `openai`.
 *
 * For custom model, a custom friendly name **SHOULD** be used.
 * If none of these options apply, the `gen_ai.system` **SHOULD** be set to `_OTHER`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_SYSTEM = 'gen_ai.system';
/**
  * Enum value "anthropic" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_ANTHROPIC = "anthropic";
/**
  * Enum value "aws.bedrock" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_AWS_BEDROCK = "aws.bedrock";
/**
  * Enum value "az.ai.inference" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_AZ_AI_INFERENCE = "az.ai.inference";
/**
  * Enum value "az.ai.openai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_AZ_AI_OPENAI = "az.ai.openai";
/**
  * Enum value "cohere" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_COHERE = "cohere";
/**
  * Enum value "deepseek" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_DEEPSEEK = "deepseek";
/**
  * Enum value "gemini" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_GEMINI = "gemini";
/**
  * Enum value "groq" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_GROQ = "groq";
/**
  * Enum value "ibm.watsonx.ai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_IBM_WATSONX_AI = "ibm.watsonx.ai";
/**
  * Enum value "mistral_ai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_MISTRAL_AI = "mistral_ai";
/**
  * Enum value "openai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_OPENAI = "openai";
/**
  * Enum value "perplexity" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_PERPLEXITY = "perplexity";
/**
  * Enum value "vertex_ai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_VERTEX_AI = "vertex_ai";
/**
  * Enum value "xai" for attribute {@link ATTR_GEN_AI_SYSTEM}.
  */
var GEN_AI_SYSTEM_VALUE_XAI = "xai";
/**
 * The type of token being counted.
 *
 * @example input
 * @example output
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_TOKEN_TYPE = 'gen_ai.token.type';
/**
  * Enum value "input" for attribute {@link ATTR_GEN_AI_TOKEN_TYPE}.
  */
var GEN_AI_TOKEN_TYPE_VALUE_INPUT = "input";
/**
  * Enum value "output" for attribute {@link ATTR_GEN_AI_TOKEN_TYPE}.
  */
var GEN_AI_TOKEN_TYPE_VALUE_COMPLETION = "output";
/**
 * Deprecated, use `gen_ai.usage.output_tokens` instead.
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `gen_ai.usage.output_tokens` attribute.
 */
var ATTR_GEN_AI_USAGE_COMPLETION_TOKENS = 'gen_ai.usage.completion_tokens';
/**
 * The number of tokens used in the GenAI input (prompt).
 *
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_USAGE_INPUT_TOKENS = 'gen_ai.usage.input_tokens';
/**
 * The number of tokens used in the GenAI response (completion).
 *
 * @example 180
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEN_AI_USAGE_OUTPUT_TOKENS = 'gen_ai.usage.output_tokens';
/**
 * Deprecated, use `gen_ai.usage.input_tokens` instead.
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `gen_ai.usage.input_tokens` attribute.
 */
var ATTR_GEN_AI_USAGE_PROMPT_TOKENS = 'gen_ai.usage.prompt_tokens';
/**
 * Two-letter code representing continent’s name.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_CONTINENT_CODE = 'geo.continent.code';
/**
  * Enum value "AF" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_AF = "AF";
/**
  * Enum value "AN" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_AN = "AN";
/**
  * Enum value "AS" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_AS = "AS";
/**
  * Enum value "EU" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_EU = "EU";
/**
  * Enum value "NA" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_NA = "NA";
/**
  * Enum value "OC" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_OC = "OC";
/**
  * Enum value "SA" for attribute {@link ATTR_GEO_CONTINENT_CODE}.
  */
var GEO_CONTINENT_CODE_VALUE_SA = "SA";
/**
 * Two-letter ISO Country Code ([ISO 3166-1 alpha2](https://wikipedia.org/wiki/ISO_3166-1#Codes)).
 *
 * @example CA
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_COUNTRY_ISO_CODE = 'geo.country.iso_code';
/**
 * Locality name. Represents the name of a city, town, village, or similar populated place.
 *
 * @example Montreal
 * @example Berlin
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_LOCALITY_NAME = 'geo.locality.name';
/**
 * Latitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).
 *
 * @example 45.505918
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_LOCATION_LAT = 'geo.location.lat';
/**
 * Longitude of the geo location in [WGS84](https://wikipedia.org/wiki/World_Geodetic_System#WGS84).
 *
 * @example -73.61483
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_LOCATION_LON = 'geo.location.lon';
/**
 * Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.
 *
 * @example 94040
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_POSTAL_CODE = 'geo.postal_code';
/**
 * Region ISO code ([ISO 3166-2](https://wikipedia.org/wiki/ISO_3166-2)).
 *
 * @example CA-QC
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GEO_REGION_ISO_CODE = 'geo.region.iso_code';
/**
 * The type of memory.
 *
 * @example other
 * @example stack
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GO_MEMORY_TYPE = 'go.memory.type';
/**
  * Enum value "other" for attribute {@link ATTR_GO_MEMORY_TYPE}.
  */
var GO_MEMORY_TYPE_VALUE_OTHER = "other";
/**
  * Enum value "stack" for attribute {@link ATTR_GO_MEMORY_TYPE}.
  */
var GO_MEMORY_TYPE_VALUE_STACK = "stack";
/**
 * The GraphQL document being executed.
 *
 * @example "query findBookById { bookById(id: ?) { name } }"
 *
 * @note The value may be sanitized to exclude sensitive information.
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GRAPHQL_DOCUMENT = 'graphql.document';
/**
 * The name of the operation being executed.
 *
 * @example "findBookById"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GRAPHQL_OPERATION_NAME = 'graphql.operation.name';
/**
 * The type of the operation being executed.
 *
 * @example query
 * @example mutation
 * @example subscription
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_GRAPHQL_OPERATION_TYPE = 'graphql.operation.type';
/**
  * Enum value "mutation" for attribute {@link ATTR_GRAPHQL_OPERATION_TYPE}.
  */
var GRAPHQL_OPERATION_TYPE_VALUE_MUTATION = "mutation";
/**
  * Enum value "query" for attribute {@link ATTR_GRAPHQL_OPERATION_TYPE}.
  */
var GRAPHQL_OPERATION_TYPE_VALUE_QUERY = "query";
/**
  * Enum value "subscription" for attribute {@link ATTR_GRAPHQL_OPERATION_TYPE}.
  */
var GRAPHQL_OPERATION_TYPE_VALUE_SUBSCRIPTION = "subscription";
/**
 * Unique identifier for the application
 *
 * @example 2daa2797-e42b-4624-9322-ec3f968df4da
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HEROKU_APP_ID = 'heroku.app.id';
/**
 * Commit hash for the current release
 *
 * @example e6134959463efd8966b20e75b913cafe3f5ec
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HEROKU_RELEASE_COMMIT = 'heroku.release.commit';
/**
 * Time and date the release was created
 *
 * @example 2022-10-23T18:00:42Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HEROKU_RELEASE_CREATION_TIMESTAMP = 'heroku.release.creation_timestamp';
/**
 * The CPU architecture the host system is running on.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_ARCH = 'host.arch';
/**
  * Enum value "amd64" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_AMD64 = "amd64";
/**
  * Enum value "arm32" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_ARM32 = "arm32";
/**
  * Enum value "arm64" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_ARM64 = "arm64";
/**
  * Enum value "ia64" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_IA64 = "ia64";
/**
  * Enum value "ppc32" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_PPC32 = "ppc32";
/**
  * Enum value "ppc64" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_PPC64 = "ppc64";
/**
  * Enum value "s390x" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_S390X = "s390x";
/**
  * Enum value "x86" for attribute {@link ATTR_HOST_ARCH}.
  */
var HOST_ARCH_VALUE_X86 = "x86";
/**
 * The amount of level 2 memory cache available to the processor (in Bytes).
 *
 * @example 12288000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_CACHE_L2_SIZE = 'host.cpu.cache.l2.size';
/**
 * Family or generation of the CPU.
 *
 * @example 6
 * @example PA-RISC 1.1e
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_FAMILY = 'host.cpu.family';
/**
 * Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.
 *
 * @example 6
 * @example 9000/778/B180L
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_MODEL_ID = 'host.cpu.model.id';
/**
 * Model designation of the processor.
 *
 * @example 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_MODEL_NAME = 'host.cpu.model.name';
/**
 * Stepping or core revisions.
 *
 * @example 1
 * @example r1p1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_STEPPING = 'host.cpu.stepping';
/**
 * Processor manufacturer identifier. A maximum 12-character string.
 *
 * @example GenuineIntel
 *
 * @note [CPUID](https://wiki.osdev.org/CPUID) command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_CPU_VENDOR_ID = 'host.cpu.vendor.id';
/**
 * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.
 *
 * @example fdbf79e8af94cb7f9e8df36789187052
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_ID = 'host.id';
/**
 * VM image ID or host OS image ID. For Cloud, this value is from the provider.
 *
 * @example ami-07b06b442921831e5
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_IMAGE_ID = 'host.image.id';
/**
 * Name of the VM image or OS install the host was instantiated from.
 *
 * @example infra-ami-eks-worker-node-7d4ec78312
 * @example CentOS-8-x86_64-1905
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_IMAGE_NAME = 'host.image.name';
/**
 * The version string of the VM image or host OS as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
 *
 * @example 0.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_IMAGE_VERSION = 'host.image.version';
/**
 * Available IP addresses of the host, excluding loopback interfaces.
 *
 * @example ["192.168.1.140", "fe80::abc2:4a28:737a:609e"]
 *
 * @note IPv4 Addresses **MUST** be specified in dotted-quad notation. IPv6 addresses **MUST** be specified in the [RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html) format.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_IP = 'host.ip';
/**
 * Available MAC addresses of the host, excluding loopback interfaces.
 *
 * @example ["AC-DE-48-23-45-67", "AC-DE-48-23-45-67-01-9F"]
 *
 * @note MAC Addresses **MUST** be represented in [IEEE RA hexadecimal form](https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf): as hyphen-separated octets in uppercase hexadecimal form from most to least significant.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_MAC = 'host.mac';
/**
 * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
 *
 * @example opentelemetry-test
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_NAME = 'host.name';
/**
 * Type of host. For Cloud, this must be the machine type.
 *
 * @example n1-standard-1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HOST_TYPE = 'host.type';
/**
 * Deprecated, use `client.address` instead.
 *
 * @example "83.164.160.102"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `client.address`.
 */
var ATTR_HTTP_CLIENT_IP = 'http.client_ip';
/**
 * State of the HTTP connection in the HTTP connection pool.
 *
 * @example active
 * @example idle
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HTTP_CONNECTION_STATE = 'http.connection.state';
/**
  * Enum value "active" for attribute {@link ATTR_HTTP_CONNECTION_STATE}.
  */
var HTTP_CONNECTION_STATE_VALUE_ACTIVE = "active";
/**
  * Enum value "idle" for attribute {@link ATTR_HTTP_CONNECTION_STATE}.
  */
var HTTP_CONNECTION_STATE_VALUE_IDLE = "idle";
/**
 * Deprecated, use `network.protocol.name` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.protocol.name`.
 */
var ATTR_HTTP_FLAVOR = 'http.flavor';
/**
  * Enum value "1.0" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_HTTP_1_0 = "1.0";
/**
  * Enum value "1.1" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_HTTP_1_1 = "1.1";
/**
  * Enum value "2.0" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_HTTP_2_0 = "2.0";
/**
  * Enum value "3.0" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_HTTP_3_0 = "3.0";
/**
  * Enum value "QUIC" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_QUIC = "QUIC";
/**
  * Enum value "SPDY" for attribute {@link ATTR_HTTP_FLAVOR}.
  */
var HTTP_FLAVOR_VALUE_SPDY = "SPDY";
/**
 * Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.
 *
 * @example www.example.org
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.
 */
var ATTR_HTTP_HOST = 'http.host';
/**
 * Deprecated, use `http.request.method` instead.
 *
 * @example GET
 * @example POST
 * @example HEAD
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `http.request.method`.
 */
var ATTR_HTTP_METHOD = 'http.method';
/**
 * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
 *
 * @example 3495
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HTTP_REQUEST_BODY_SIZE = 'http.request.body.size';
/**
 * The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.
 *
 * @example 1437
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HTTP_REQUEST_SIZE = 'http.request.size';
/**
 * Deprecated, use `http.request.header.<key>` instead.
 *
 * @example 3495
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `http.request.header.<key>`.
 */
var ATTR_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';
/**
 * Deprecated, use `http.request.body.size` instead.
 *
 * @example 5493
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `http.request.body.size`.
 */
var ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';
/**
 * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length) header. For requests using transport encoding, this should be the compressed size.
 *
 * @example 3495
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HTTP_RESPONSE_BODY_SIZE = 'http.response.body.size';
/**
 * The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.
 *
 * @example 1437
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HTTP_RESPONSE_SIZE = 'http.response.size';
/**
 * Deprecated, use `http.response.header.<key>` instead.
 *
 * @example 3495
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `http.response.header.<key>`.
 */
var ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';
/**
 * Deprecated, use `http.response.body.size` instead.
 *
 * @example 5493
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replace by `http.response.body.size`.
 */
var ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';
/**
 * Deprecated, use `url.scheme` instead.
 *
 * @example http
 * @example https
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `url.scheme` instead.
 */
var ATTR_HTTP_SCHEME = 'http.scheme';
/**
 * Deprecated, use `server.address` instead.
 *
 * @example example.com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.address`.
 */
var ATTR_HTTP_SERVER_NAME = 'http.server_name';
/**
 * Deprecated, use `http.response.status_code` instead.
 *
 * @example 200
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `http.response.status_code`.
 */
var ATTR_HTTP_STATUS_CODE = 'http.status_code';
/**
 * Deprecated, use `url.path` and `url.query` instead.
 *
 * @example /search?q=OpenTelemetry#SemConv
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Split to `url.path` and `url.query.
 */
var ATTR_HTTP_TARGET = 'http.target';
/**
 * Deprecated, use `url.full` instead.
 *
 * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `url.full`.
 */
var ATTR_HTTP_URL = 'http.url';
/**
 * Deprecated, use `user_agent.original` instead.
 *
 * @example CERN-LineMode/2.15 libwww/2.17b3
 * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `user_agent.original`.
 */
var ATTR_HTTP_USER_AGENT = 'http.user_agent';
/**
 * An identifier for the hardware component, unique within the monitored host
 *
 * @example win32battery_battery_testsysa33_1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HW_ID = 'hw.id';
/**
 * An easily-recognizable name for the hardware component
 *
 * @example eth0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HW_NAME = 'hw.name';
/**
 * Unique identifier of the parent component (typically the `hw.id` attribute of the enclosure, or disk controller)
 *
 * @example dellStorage_perc_0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HW_PARENT = 'hw.parent';
/**
 * The current state of the component
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HW_STATE = 'hw.state';
/**
  * Enum value "degraded" for attribute {@link ATTR_HW_STATE}.
  */
var HW_STATE_VALUE_DEGRADED = "degraded";
/**
  * Enum value "failed" for attribute {@link ATTR_HW_STATE}.
  */
var HW_STATE_VALUE_FAILED = "failed";
/**
  * Enum value "ok" for attribute {@link ATTR_HW_STATE}.
  */
var HW_STATE_VALUE_OK = "ok";
/**
 * Type of the component
 *
 * @note Describes the category of the hardware component for which `hw.state` is being reported. For example, `hw.type=temperature` along with `hw.state=degraded` would indicate that the temperature of the hardware component has been reported as `degraded`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_HW_TYPE = 'hw.type';
/**
  * Enum value "battery" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_BATTERY = "battery";
/**
  * Enum value "cpu" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_CPU = "cpu";
/**
  * Enum value "disk_controller" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_DISK_CONTROLLER = "disk_controller";
/**
  * Enum value "enclosure" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_ENCLOSURE = "enclosure";
/**
  * Enum value "fan" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_FAN = "fan";
/**
  * Enum value "gpu" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_GPU = "gpu";
/**
  * Enum value "logical_disk" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_LOGICAL_DISK = "logical_disk";
/**
  * Enum value "memory" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_MEMORY = "memory";
/**
  * Enum value "network" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_NETWORK = "network";
/**
  * Enum value "physical_disk" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_PHYSICAL_DISK = "physical_disk";
/**
  * Enum value "power_supply" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_POWER_SUPPLY = "power_supply";
/**
  * Enum value "tape_drive" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_TAPE_DRIVE = "tape_drive";
/**
  * Enum value "temperature" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_TEMPERATURE = "temperature";
/**
  * Enum value "voltage" for attribute {@link ATTR_HW_TYPE}.
  */
var HW_TYPE_VALUE_VOLTAGE = "voltage";
/**
 * Deprecated use the `device.app.lifecycle` event definition including `ios.state` as a payload field instead.
 *
 * @note The iOS lifecycle states are defined in the [UIApplicationDelegate documentation](https://developer.apple.com/documentation/uikit/uiapplicationdelegate#1656902), and from which the `OS terminology` column values are derived.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Moved to a payload field of `device.app.lifecycle`.
 */
var ATTR_IOS_STATE = 'ios.state';
/**
  * Enum value "active" for attribute {@link ATTR_IOS_STATE}.
  */
var IOS_STATE_VALUE_ACTIVE = "active";
/**
  * Enum value "background" for attribute {@link ATTR_IOS_STATE}.
  */
var IOS_STATE_VALUE_BACKGROUND = "background";
/**
  * Enum value "foreground" for attribute {@link ATTR_IOS_STATE}.
  */
var IOS_STATE_VALUE_FOREGROUND = "foreground";
/**
  * Enum value "inactive" for attribute {@link ATTR_IOS_STATE}.
  */
var IOS_STATE_VALUE_INACTIVE = "inactive";
/**
  * Enum value "terminate" for attribute {@link ATTR_IOS_STATE}.
  */
var IOS_STATE_VALUE_TERMINATE = "terminate";
/**
 * Name of the buffer pool.
 *
 * @example mapped
 * @example direct
 *
 * @note Pool names are generally obtained via [BufferPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_JVM_BUFFER_POOL_NAME = 'jvm.buffer.pool.name';
/**
 * The name of the cluster.
 *
 * @example opentelemetry-cluster
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CLUSTER_NAME = 'k8s.cluster.name';
/**
 * A pseudo-ID for the cluster, set to the UID of the `kube-system` namespace.
 *
 * @example 218fc5a9-a5f1-4b54-aa05-46717d0ab26d
 *
 * @note K8s doesn't have support for obtaining a cluster ID. If this is ever
 * added, we will recommend collecting the `k8s.cluster.uid` through the
 * official APIs. In the meantime, we are able to use the `uid` of the
 * `kube-system` namespace as a proxy for cluster ID. Read on for the
 * rationale.
 *
 * Every object created in a K8s cluster is assigned a distinct UID. The
 * `kube-system` namespace is used by Kubernetes itself and will exist
 * for the lifetime of the cluster. Using the `uid` of the `kube-system`
 * namespace is a reasonable proxy for the K8s ClusterID as it will only
 * change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
 * UUIDs as standardized by
 * [ISO/IEC 9834-8 and ITU-T X.667](https://www.itu.int/ITU-T/studygroups/com17/oid.html).
 * Which states:
 *
 * > If generated according to one of the mechanisms defined in Rec.
 * > ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
 * > different from all other UUIDs generated before 3603 A.D., or is
 * > extremely likely to be different (depending on the mechanism chosen).
 *
 * Therefore, UIDs between clusters should be extremely unlikely to
 * conflict.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CLUSTER_UID = 'k8s.cluster.uid';
/**
 * The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (`container.name`).
 *
 * @example redis
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CONTAINER_NAME = 'k8s.container.name';
/**
 * Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CONTAINER_RESTART_COUNT = 'k8s.container.restart_count';
/**
 * Last terminated reason of the Container.
 *
 * @example Evicted
 * @example Error
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CONTAINER_STATUS_LAST_TERMINATED_REASON = 'k8s.container.status.last_terminated_reason';
/**
 * The name of the CronJob.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CRONJOB_NAME = 'k8s.cronjob.name';
/**
 * The UID of the CronJob.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_CRONJOB_UID = 'k8s.cronjob.uid';
/**
 * The name of the DaemonSet.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';
/**
 * The UID of the DaemonSet.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';
/**
 * The name of the Deployment.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';
/**
 * The UID of the Deployment.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';
/**
 * The name of the Job.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_JOB_NAME = 'k8s.job.name';
/**
 * The UID of the Job.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_JOB_UID = 'k8s.job.uid';
/**
 * The name of the namespace that the pod is running in.
 *
 * @example default
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_NAMESPACE_NAME = 'k8s.namespace.name';
/**
 * The phase of the K8s namespace.
 *
 * @example active
 * @example terminating
 *
 * @note This attribute aligns with the `phase` field of the
 * [K8s NamespaceStatus](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_NAMESPACE_PHASE = 'k8s.namespace.phase';
/**
  * Enum value "active" for attribute {@link ATTR_K8S_NAMESPACE_PHASE}.
  */
var K8S_NAMESPACE_PHASE_VALUE_ACTIVE = "active";
/**
  * Enum value "terminating" for attribute {@link ATTR_K8S_NAMESPACE_PHASE}.
  */
var K8S_NAMESPACE_PHASE_VALUE_TERMINATING = "terminating";
/**
 * The name of the Node.
 *
 * @example node-1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_NODE_NAME = 'k8s.node.name';
/**
 * The UID of the Node.
 *
 * @example 1eb3a0c6-0477-4080-a9cb-0cb7db65c6a2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_NODE_UID = 'k8s.node.uid';
/**
 * The annotation key-value pairs placed on the Pod, the `<key>` being the annotation name, the value being the annotation value.
 *
 * @example k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets=true
 * @example k8s.pod.annotation.mycompany.io/arch=x64
 * @example k8s.pod.annotation.data=
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_POD_ANNOTATION = function (key) { return "k8s.pod.annotation.".concat(key); };
/**
 * The label key-value pairs placed on the Pod, the `<key>` being the label name, the value being the label value.
 *
 * @example k8s.pod.label.app=my-app
 * @example k8s.pod.label.mycompany.io/arch=x64
 * @example k8s.pod.label.data=
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_POD_LABEL = function (key) { return "k8s.pod.label.".concat(key); };
/**
 * Deprecated, use `k8s.pod.label` instead.
 *
 * @example k8s.pod.label.app=my-app
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `k8s.pod.label`.
 */
var ATTR_K8S_POD_LABELS = function (key) { return "k8s.pod.labels.".concat(key); };
/**
 * The name of the Pod.
 *
 * @example opentelemetry-pod-autoconf
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_POD_NAME = 'k8s.pod.name';
/**
 * The UID of the Pod.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_POD_UID = 'k8s.pod.uid';
/**
 * The name of the ReplicaSet.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_REPLICASET_NAME = 'k8s.replicaset.name';
/**
 * The UID of the ReplicaSet.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_REPLICASET_UID = 'k8s.replicaset.uid';
/**
 * The name of the StatefulSet.
 *
 * @example opentelemetry
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';
/**
 * The UID of the StatefulSet.
 *
 * @example 275ecb36-5aa8-4c2a-9c47-d8bb681b9aff
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';
/**
 * The name of the K8s volume.
 *
 * @example volume0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_VOLUME_NAME = 'k8s.volume.name';
/**
 * The type of the K8s volume.
 *
 * @example emptyDir
 * @example persistentVolumeClaim
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_K8S_VOLUME_TYPE = 'k8s.volume.type';
/**
  * Enum value "configMap" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_CONFIG_MAP = "configMap";
/**
  * Enum value "downwardAPI" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_DOWNWARD_API = "downwardAPI";
/**
  * Enum value "emptyDir" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_EMPTY_DIR = "emptyDir";
/**
  * Enum value "local" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_LOCAL = "local";
/**
  * Enum value "persistentVolumeClaim" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_PERSISTENT_VOLUME_CLAIM = "persistentVolumeClaim";
/**
  * Enum value "secret" for attribute {@link ATTR_K8S_VOLUME_TYPE}.
  */
var K8S_VOLUME_TYPE_VALUE_SECRET = "secret";
/**
 * The Linux Slab memory state
 *
 * @example reclaimable
 * @example unreclaimable
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LINUX_MEMORY_SLAB_STATE = 'linux.memory.slab.state';
/**
  * Enum value "reclaimable" for attribute {@link ATTR_LINUX_MEMORY_SLAB_STATE}.
  */
var LINUX_MEMORY_SLAB_STATE_VALUE_RECLAIMABLE = "reclaimable";
/**
  * Enum value "unreclaimable" for attribute {@link ATTR_LINUX_MEMORY_SLAB_STATE}.
  */
var LINUX_MEMORY_SLAB_STATE_VALUE_UNRECLAIMABLE = "unreclaimable";
/**
 * The basename of the file.
 *
 * @example audit.log
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_FILE_NAME = 'log.file.name';
/**
 * The basename of the file, with symlinks resolved.
 *
 * @example uuid.log
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_FILE_NAME_RESOLVED = 'log.file.name_resolved';
/**
 * The full path to the file.
 *
 * @example /var/log/mysql/audit.log
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_FILE_PATH = 'log.file.path';
/**
 * The full path to the file, with symlinks resolved.
 *
 * @example /var/lib/docker/uuid.log
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_FILE_PATH_RESOLVED = 'log.file.path_resolved';
/**
 * The stream associated with the log. See below for a list of well-known values.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_IOSTREAM = 'log.iostream';
/**
  * Enum value "stderr" for attribute {@link ATTR_LOG_IOSTREAM}.
  */
var LOG_IOSTREAM_VALUE_STDERR = "stderr";
/**
  * Enum value "stdout" for attribute {@link ATTR_LOG_IOSTREAM}.
  */
var LOG_IOSTREAM_VALUE_STDOUT = "stdout";
/**
 * The complete original Log Record.
 *
 * @example 77 <86>1 2015-08-06T21:58:59.694Z 192.168.2.133 inactive - - - Something happened
 * @example [INFO] 8/3/24 12:34:56 Something happened
 *
 * @note This value **MAY** be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_RECORD_ORIGINAL = 'log.record.original';
/**
 * A unique identifier for the Log Record.
 *
 * @example 01ARZ3NDEKTSV4RRFFQ69G5FAV
 *
 * @note If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records **MUST** have different values.
 * The id **MAY** be an [Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec), but other identifiers (e.g. UUID) may be used as needed.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_LOG_RECORD_UID = 'log.record.uid';
/**
 * Deprecated, use `rpc.message.compressed_size` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `rpc.message.compressed_size`.
 */
var ATTR_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';
/**
 * Deprecated, use `rpc.message.id` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `rpc.message.id`.
 */
var ATTR_MESSAGE_ID = 'message.id';
/**
 * Deprecated, use `rpc.message.type` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `rpc.message.type`.
 */
var ATTR_MESSAGE_TYPE = 'message.type';
/**
  * Enum value "RECEIVED" for attribute {@link ATTR_MESSAGE_TYPE}.
  */
var MESSAGE_TYPE_VALUE_RECEIVED = "RECEIVED";
/**
  * Enum value "SENT" for attribute {@link ATTR_MESSAGE_TYPE}.
  */
var MESSAGE_TYPE_VALUE_SENT = "SENT";
/**
 * Deprecated, use `rpc.message.uncompressed_size` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `rpc.message.uncompressed_size`.
 */
var ATTR_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';
/**
 * The number of messages sent, received, or processed in the scope of the batching operation.
 *
 * @example 0
 * @example 1
 * @example 2
 *
 * @note Instrumentations **SHOULD NOT** set `messaging.batch.message_count` on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations **SHOULD** use `messaging.batch.message_count` for batching APIs and **SHOULD NOT** use it for single-message APIs.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_BATCH_MESSAGE_COUNT = 'messaging.batch.message_count';
/**
 * A unique identifier for the client that consumes or produces a message.
 *
 * @example client-5
 * @example myhost@8742@s8083jm
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_CLIENT_ID = 'messaging.client.id';
/**
 * The name of the consumer group with which a consumer is associated.
 *
 * @example my-group
 * @example indexer
 *
 * @note Semantic conventions for individual messaging systems **SHOULD** document whether `messaging.consumer.group.name` is applicable and what it means in the context of that system.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_CONSUMER_GROUP_NAME = 'messaging.consumer.group.name';
/**
 * A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_ANONYMOUS = 'messaging.destination.anonymous';
/**
 * The message destination name
 *
 * @example MyQueue
 * @example MyTopic
 *
 * @note Destination name **SHOULD** uniquely identify a specific queue, topic or other entity within the broker. If
 * the broker doesn't have such notion, the destination name **SHOULD** uniquely identify the broker.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_NAME = 'messaging.destination.name';
/**
 * The identifier of the partition messages are sent to or received from, unique within the `messaging.destination.name`.
 *
 * @example "1"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_PARTITION_ID = 'messaging.destination.partition.id';
/**
 * The name of the destination subscription from which a message is consumed.
 *
 * @example subscription-a
 *
 * @note Semantic conventions for individual messaging systems **SHOULD** document whether `messaging.destination.subscription.name` is applicable and what it means in the context of that system.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_SUBSCRIPTION_NAME = 'messaging.destination.subscription.name';
/**
 * Low cardinality representation of the messaging destination name
 *
 * @example /customers/{customerId}
 *
 * @note Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_TEMPLATE = 'messaging.destination.template';
/**
 * A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_DESTINATION_TEMPORARY = 'messaging.destination.temporary';
/**
 * Deprecated, no replacement at this time.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated No replacement at this time.
 */
var ATTR_MESSAGING_DESTINATION_PUBLISH_ANONYMOUS = 'messaging.destination_publish.anonymous';
/**
 * Deprecated, no replacement at this time.
 *
 * @example MyQueue
 * @example MyTopic
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated No replacement at this time.
 */
var ATTR_MESSAGING_DESTINATION_PUBLISH_NAME = 'messaging.destination_publish.name';
/**
 * Deprecated, use `messaging.consumer.group.name` instead.
 *
 * @example "$Default"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.consumer.group.name`.
 */
var ATTR_MESSAGING_EVENTHUBS_CONSUMER_GROUP = 'messaging.eventhubs.consumer.group';
/**
 * The UTC epoch seconds at which the message has been accepted and stored in the entity.
 *
 * @example 1701393730
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_EVENTHUBS_MESSAGE_ENQUEUED_TIME = 'messaging.eventhubs.message.enqueued_time';
/**
 * The ack deadline in seconds set for the modify ack deadline request.
 *
 * @example 10
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_DEADLINE = 'messaging.gcp_pubsub.message.ack_deadline';
/**
 * The ack id for a given message.
 *
 * @example "ack_id"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ACK_ID = 'messaging.gcp_pubsub.message.ack_id';
/**
 * The delivery attempt for a given message.
 *
 * @example 2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_DELIVERY_ATTEMPT = 'messaging.gcp_pubsub.message.delivery_attempt';
/**
 * The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.
 *
 * @example "ordering_key"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_GCP_PUBSUB_MESSAGE_ORDERING_KEY = 'messaging.gcp_pubsub.message.ordering_key';
/**
 * Deprecated, use `messaging.consumer.group.name` instead.
 *
 * @example "my-group"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.consumer.group.name`.
 */
var ATTR_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer.group';
/**
 * Deprecated, use `messaging.destination.partition.id` instead.
 *
 * @example 2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.destination.partition.id`.
 */
var ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION = 'messaging.kafka.destination.partition';
/**
 * Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from `messaging.message.id` in that they're not unique. If the key is `null`, the attribute **MUST NOT** be set.
 *
 * @example "myKey"
 *
 * @note If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message.key';
/**
 * Deprecated, use `messaging.kafka.offset` instead.
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.kafka.offset`.
 */
var ATTR_MESSAGING_KAFKA_MESSAGE_OFFSET = 'messaging.kafka.message.offset';
/**
 * A boolean that is true if the message is a tombstone.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE = 'messaging.kafka.message.tombstone';
/**
 * The offset of a record in the corresponding Kafka partition.
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_KAFKA_OFFSET = 'messaging.kafka.offset';
/**
 * The size of the message body in bytes.
 *
 * @example 1439
 *
 * @note This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
 * body size should be used.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_MESSAGE_BODY_SIZE = 'messaging.message.body.size';
/**
 * The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".
 *
 * @example "MyConversationId"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_MESSAGE_CONVERSATION_ID = 'messaging.message.conversation_id';
/**
 * The size of the message body and metadata in bytes.
 *
 * @example 2738
 *
 * @note This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed
 * size should be used.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_MESSAGE_ENVELOPE_SIZE = 'messaging.message.envelope.size';
/**
 * A value used by the messaging system as an identifier for the message, represented as a string.
 *
 * @example "452a7c7c7c7048c2f887f61572b18fc2"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_MESSAGE_ID = 'messaging.message.id';
/**
 * Deprecated, use `messaging.operation.type` instead.
 *
 * @example publish
 * @example create
 * @example process
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.operation.type`.
 */
var ATTR_MESSAGING_OPERATION = 'messaging.operation';
/**
 * The system-specific name of the messaging operation.
 *
 * @example ack
 * @example nack
 * @example send
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_OPERATION_NAME = 'messaging.operation.name';
/**
 * A string identifying the type of the messaging operation.
 *
 * @note If a custom value is used, it **MUST** be of low cardinality.
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_OPERATION_TYPE = 'messaging.operation.type';
/**
  * Enum value "create" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_CREATE = "create";
/**
  * Enum value "deliver" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_DELIVER = "deliver";
/**
  * Enum value "process" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_PROCESS = "process";
/**
  * Enum value "publish" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_PUBLISH = "publish";
/**
  * Enum value "receive" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_RECEIVE = "receive";
/**
  * Enum value "send" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_SEND = "send";
/**
  * Enum value "settle" for attribute {@link ATTR_MESSAGING_OPERATION_TYPE}.
  */
var MESSAGING_OPERATION_TYPE_VALUE_SETTLE = "settle";
/**
 * RabbitMQ message routing key.
 *
 * @example "myKey"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY = 'messaging.rabbitmq.destination.routing_key';
/**
 * RabbitMQ message delivery tag
 *
 * @example 123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_RABBITMQ_MESSAGE_DELIVERY_TAG = 'messaging.rabbitmq.message.delivery_tag';
/**
 * Deprecated, use `messaging.consumer.group.name` instead.
 *
 * @example "myConsumerGroup"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.consumer.group.name` on the consumer spans. No replacement for producer spans.
 */
var ATTR_MESSAGING_ROCKETMQ_CLIENT_GROUP = 'messaging.rocketmq.client_group';
/**
 * Model of message consumption. This only applies to consumer spans.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_CONSUMPTION_MODEL = 'messaging.rocketmq.consumption_model';
/**
  * Enum value "broadcasting" for attribute {@link ATTR_MESSAGING_ROCKETMQ_CONSUMPTION_MODEL}.
  */
var MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_BROADCASTING = "broadcasting";
/**
  * Enum value "clustering" for attribute {@link ATTR_MESSAGING_ROCKETMQ_CONSUMPTION_MODEL}.
  */
var MESSAGING_ROCKETMQ_CONSUMPTION_MODEL_VALUE_CLUSTERING = "clustering";
/**
 * The delay time level for delay message, which determines the message delay time.
 *
 * @example 3
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELAY_TIME_LEVEL = 'messaging.rocketmq.message.delay_time_level';
/**
 * The timestamp in milliseconds that the delay message is expected to be delivered to consumer.
 *
 * @example 1665987217045
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_DELIVERY_TIMESTAMP = 'messaging.rocketmq.message.delivery_timestamp';
/**
 * It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.
 *
 * @example "myMessageGroup"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_GROUP = 'messaging.rocketmq.message.group';
/**
 * Key(s) of message, another way to mark message besides message id.
 *
 * @example ["keyA", "keyB"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_KEYS = 'messaging.rocketmq.message.keys';
/**
 * The secondary classifier of message besides topic.
 *
 * @example "tagA"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_TAG = 'messaging.rocketmq.message.tag';
/**
 * Type of message.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE = 'messaging.rocketmq.message.type';
/**
  * Enum value "delay" for attribute {@link ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE}.
  */
var MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_DELAY = "delay";
/**
  * Enum value "fifo" for attribute {@link ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE}.
  */
var MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_FIFO = "fifo";
/**
  * Enum value "normal" for attribute {@link ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE}.
  */
var MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_NORMAL = "normal";
/**
  * Enum value "transaction" for attribute {@link ATTR_MESSAGING_ROCKETMQ_MESSAGE_TYPE}.
  */
var MESSAGING_ROCKETMQ_MESSAGE_TYPE_VALUE_TRANSACTION = "transaction";
/**
 * Namespace of RocketMQ resources, resources in different namespaces are individual.
 *
 * @example "myNamespace"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_ROCKETMQ_NAMESPACE = 'messaging.rocketmq.namespace';
/**
 * Deprecated, use `messaging.destination.subscription.name` instead.
 *
 * @example "subscription-a"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `messaging.destination.subscription.name`.
 */
var ATTR_MESSAGING_SERVICEBUS_DESTINATION_SUBSCRIPTION_NAME = 'messaging.servicebus.destination.subscription_name';
/**
 * Describes the [settlement type](https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS = 'messaging.servicebus.disposition_status';
/**
  * Enum value "abandon" for attribute {@link ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS}.
  */
var MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_ABANDON = "abandon";
/**
  * Enum value "complete" for attribute {@link ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS}.
  */
var MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_COMPLETE = "complete";
/**
  * Enum value "dead_letter" for attribute {@link ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS}.
  */
var MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEAD_LETTER = "dead_letter";
/**
  * Enum value "defer" for attribute {@link ATTR_MESSAGING_SERVICEBUS_DISPOSITION_STATUS}.
  */
var MESSAGING_SERVICEBUS_DISPOSITION_STATUS_VALUE_DEFER = "defer";
/**
 * Number of deliveries that have been attempted for this message.
 *
 * @example 2
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_SERVICEBUS_MESSAGE_DELIVERY_COUNT = 'messaging.servicebus.message.delivery_count';
/**
 * The UTC epoch seconds at which the message has been accepted and stored in the entity.
 *
 * @example 1701393730
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_SERVICEBUS_MESSAGE_ENQUEUED_TIME = 'messaging.servicebus.message.enqueued_time';
/**
 * The messaging system as identified by the client instrumentation.
 *
 * @note The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the `messaging.system` is set to `kafka` based on the instrumentation's best knowledge.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_MESSAGING_SYSTEM = 'messaging.system';
/**
  * Enum value "activemq" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_ACTIVEMQ = "activemq";
/**
  * Enum value "aws_sqs" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_AWS_SQS = "aws_sqs";
/**
  * Enum value "eventgrid" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_EVENTGRID = "eventgrid";
/**
  * Enum value "eventhubs" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_EVENTHUBS = "eventhubs";
/**
  * Enum value "gcp_pubsub" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_GCP_PUBSUB = "gcp_pubsub";
/**
  * Enum value "jms" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_JMS = "jms";
/**
  * Enum value "kafka" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_KAFKA = "kafka";
/**
  * Enum value "pulsar" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_PULSAR = "pulsar";
/**
  * Enum value "rabbitmq" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_RABBITMQ = "rabbitmq";
/**
  * Enum value "rocketmq" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_ROCKETMQ = "rocketmq";
/**
  * Enum value "servicebus" for attribute {@link ATTR_MESSAGING_SYSTEM}.
  */
var MESSAGING_SYSTEM_VALUE_SERVICEBUS = "servicebus";
/**
 * Deprecated, use `network.local.address`.
 *
 * @example "192.168.0.1"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.local.address`.
 */
var ATTR_NET_HOST_IP = 'net.host.ip';
/**
 * Deprecated, use `server.address`.
 *
 * @example example.com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.address`.
 */
var ATTR_NET_HOST_NAME = 'net.host.name';
/**
 * Deprecated, use `server.port`.
 *
 * @example 8080
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.port`.
 */
var ATTR_NET_HOST_PORT = 'net.host.port';
/**
 * Deprecated, use `network.peer.address`.
 *
 * @example "127.0.0.1"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.peer.address`.
 */
var ATTR_NET_PEER_IP = 'net.peer.ip';
/**
 * Deprecated, use `server.address` on client spans and `client.address` on server spans.
 *
 * @example example.com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.address` on client spans and `client.address` on server spans.
 */
var ATTR_NET_PEER_NAME = 'net.peer.name';
/**
 * Deprecated, use `server.port` on client spans and `client.port` on server spans.
 *
 * @example 8080
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.port` on client spans and `client.port` on server spans.
 */
var ATTR_NET_PEER_PORT = 'net.peer.port';
/**
 * Deprecated, use `network.protocol.name`.
 *
 * @example amqp
 * @example http
 * @example mqtt
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.protocol.name`.
 */
var ATTR_NET_PROTOCOL_NAME = 'net.protocol.name';
/**
 * Deprecated, use `network.protocol.version`.
 *
 * @example "3.1.1"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.protocol.version`.
 */
var ATTR_NET_PROTOCOL_VERSION = 'net.protocol.version';
/**
 * Deprecated, use `network.transport` and `network.type`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Split to `network.transport` and `network.type`.
 */
var ATTR_NET_SOCK_FAMILY = 'net.sock.family';
/**
  * Enum value "inet" for attribute {@link ATTR_NET_SOCK_FAMILY}.
  */
var NET_SOCK_FAMILY_VALUE_INET = "inet";
/**
  * Enum value "inet6" for attribute {@link ATTR_NET_SOCK_FAMILY}.
  */
var NET_SOCK_FAMILY_VALUE_INET6 = "inet6";
/**
  * Enum value "unix" for attribute {@link ATTR_NET_SOCK_FAMILY}.
  */
var NET_SOCK_FAMILY_VALUE_UNIX = "unix";
/**
 * Deprecated, use `network.local.address`.
 *
 * @example /var/my.sock
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.local.address`.
 */
var ATTR_NET_SOCK_HOST_ADDR = 'net.sock.host.addr';
/**
 * Deprecated, use `network.local.port`.
 *
 * @example 8080
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.local.port`.
 */
var ATTR_NET_SOCK_HOST_PORT = 'net.sock.host.port';
/**
 * Deprecated, use `network.peer.address`.
 *
 * @example 192.168.0.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.peer.address`.
 */
var ATTR_NET_SOCK_PEER_ADDR = 'net.sock.peer.addr';
/**
 * Deprecated, no replacement at this time.
 *
 * @example /var/my.sock
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed.
 */
var ATTR_NET_SOCK_PEER_NAME = 'net.sock.peer.name';
/**
 * Deprecated, use `network.peer.port`.
 *
 * @example 65531
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.peer.port`.
 */
var ATTR_NET_SOCK_PEER_PORT = 'net.sock.peer.port';
/**
 * Deprecated, use `network.transport`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `network.transport`.
 */
var ATTR_NET_TRANSPORT = 'net.transport';
/**
  * Enum value "inproc" for attribute {@link ATTR_NET_TRANSPORT}.
  */
var NET_TRANSPORT_VALUE_INPROC = "inproc";
/**
  * Enum value "ip_tcp" for attribute {@link ATTR_NET_TRANSPORT}.
  */
var NET_TRANSPORT_VALUE_IP_TCP = "ip_tcp";
/**
  * Enum value "ip_udp" for attribute {@link ATTR_NET_TRANSPORT}.
  */
var NET_TRANSPORT_VALUE_IP_UDP = "ip_udp";
/**
  * Enum value "other" for attribute {@link ATTR_NET_TRANSPORT}.
  */
var NET_TRANSPORT_VALUE_OTHER = "other";
/**
  * Enum value "pipe" for attribute {@link ATTR_NET_TRANSPORT}.
  */
var NET_TRANSPORT_VALUE_PIPE = "pipe";
/**
 * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
 *
 * @example "DE"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CARRIER_ICC = 'network.carrier.icc';
/**
 * The mobile carrier country code.
 *
 * @example "310"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CARRIER_MCC = 'network.carrier.mcc';
/**
 * The mobile carrier network code.
 *
 * @example "001"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CARRIER_MNC = 'network.carrier.mnc';
/**
 * The name of the mobile carrier.
 *
 * @example "sprint"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CARRIER_NAME = 'network.carrier.name';
/**
 * The state of network connection
 *
 * @example close_wait
 *
 * @note Connection states are defined as part of the [rfc9293](https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2)
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CONNECTION_STATE = 'network.connection.state';
/**
  * Enum value "close_wait" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_CLOSE_WAIT = "close_wait";
/**
  * Enum value "closed" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_CLOSED = "closed";
/**
  * Enum value "closing" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_CLOSING = "closing";
/**
  * Enum value "established" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_ESTABLISHED = "established";
/**
  * Enum value "fin_wait_1" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_1 = "fin_wait_1";
/**
  * Enum value "fin_wait_2" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_FIN_WAIT_2 = "fin_wait_2";
/**
  * Enum value "last_ack" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_LAST_ACK = "last_ack";
/**
  * Enum value "listen" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_LISTEN = "listen";
/**
  * Enum value "syn_received" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_SYN_RECEIVED = "syn_received";
/**
  * Enum value "syn_sent" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_SYN_SENT = "syn_sent";
/**
  * Enum value "time_wait" for attribute {@link ATTR_NETWORK_CONNECTION_STATE}.
  */
var NETWORK_CONNECTION_STATE_VALUE_TIME_WAIT = "time_wait";
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @example "LTE"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CONNECTION_SUBTYPE = 'network.connection.subtype';
/**
  * Enum value "cdma" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA = "cdma";
/**
  * Enum value "cdma2000_1xrtt" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT = "cdma2000_1xrtt";
/**
  * Enum value "edge" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE = "edge";
/**
  * Enum value "ehrpd" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD = "ehrpd";
/**
  * Enum value "evdo_0" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 = "evdo_0";
/**
  * Enum value "evdo_a" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A = "evdo_a";
/**
  * Enum value "evdo_b" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B = "evdo_b";
/**
  * Enum value "gprs" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS = "gprs";
/**
  * Enum value "gsm" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_GSM = "gsm";
/**
  * Enum value "hsdpa" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA = "hsdpa";
/**
  * Enum value "hspa" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA = "hspa";
/**
  * Enum value "hspap" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP = "hspap";
/**
  * Enum value "hsupa" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA = "hsupa";
/**
  * Enum value "iden" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN = "iden";
/**
  * Enum value "iwlan" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN = "iwlan";
/**
  * Enum value "lte" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_LTE = "lte";
/**
  * Enum value "lte_ca" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA = "lte_ca";
/**
  * Enum value "nr" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_NR = "nr";
/**
  * Enum value "nrnsa" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA = "nrnsa";
/**
  * Enum value "td_scdma" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA = "td_scdma";
/**
  * Enum value "umts" for attribute {@link ATTR_NETWORK_CONNECTION_SUBTYPE}.
  */
var NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS = "umts";
/**
 * The internet connection type.
 *
 * @example "wifi"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_CONNECTION_TYPE = 'network.connection.type';
/**
  * Enum value "cell" for attribute {@link ATTR_NETWORK_CONNECTION_TYPE}.
  */
var NETWORK_CONNECTION_TYPE_VALUE_CELL = "cell";
/**
  * Enum value "unavailable" for attribute {@link ATTR_NETWORK_CONNECTION_TYPE}.
  */
var NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE = "unavailable";
/**
  * Enum value "unknown" for attribute {@link ATTR_NETWORK_CONNECTION_TYPE}.
  */
var NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN = "unknown";
/**
  * Enum value "wifi" for attribute {@link ATTR_NETWORK_CONNECTION_TYPE}.
  */
var NETWORK_CONNECTION_TYPE_VALUE_WIFI = "wifi";
/**
  * Enum value "wired" for attribute {@link ATTR_NETWORK_CONNECTION_TYPE}.
  */
var NETWORK_CONNECTION_TYPE_VALUE_WIRED = "wired";
/**
 * The network interface name.
 *
 * @example lo
 * @example eth0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_INTERFACE_NAME = 'network.interface.name';
/**
 * The network IO operation direction.
 *
 * @example transmit
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NETWORK_IO_DIRECTION = 'network.io.direction';
/**
  * Enum value "receive" for attribute {@link ATTR_NETWORK_IO_DIRECTION}.
  */
var NETWORK_IO_DIRECTION_VALUE_RECEIVE = "receive";
/**
  * Enum value "transmit" for attribute {@link ATTR_NETWORK_IO_DIRECTION}.
  */
var NETWORK_IO_DIRECTION_VALUE_TRANSMIT = "transmit";
/**
 * The state of event loop time.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_NODEJS_EVENTLOOP_STATE = 'nodejs.eventloop.state';
/**
  * Enum value "active" for attribute {@link ATTR_NODEJS_EVENTLOOP_STATE}.
  */
var NODEJS_EVENTLOOP_STATE_VALUE_ACTIVE = "active";
/**
  * Enum value "idle" for attribute {@link ATTR_NODEJS_EVENTLOOP_STATE}.
  */
var NODEJS_EVENTLOOP_STATE_VALUE_IDLE = "idle";
/**
 * The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.
 *
 * @example sha256:e4ca62c0d62f3e886e684806dfe9d4e0cda60d54986898173c1083856cfda0f4
 *
 * @note Follows [OCI Image Manifest Specification](https://github.com/opencontainers/image-spec/blob/main/manifest.md), and specifically the [Digest property](https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests).
 * An example can be found in [Example Image Manifest](https://docs.docker.com/registry/spec/manifest-v2-2/#example-image-manifest).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OCI_MANIFEST_DIGEST = 'oci.manifest.digest';
/**
 * Parent-child Reference type
 *
 * @note The causal relationship between a child Span and a parent Span.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OPENTRACING_REF_TYPE = 'opentracing.ref_type';
/**
  * Enum value "child_of" for attribute {@link ATTR_OPENTRACING_REF_TYPE}.
  */
var OPENTRACING_REF_TYPE_VALUE_CHILD_OF = "child_of";
/**
  * Enum value "follows_from" for attribute {@link ATTR_OPENTRACING_REF_TYPE}.
  */
var OPENTRACING_REF_TYPE_VALUE_FOLLOWS_FROM = "follows_from";
/**
 * Unique identifier for a particular build or compilation of the operating system.
 *
 * @example TQ3C.230805.001.B2
 * @example 20E247
 * @example 22621
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OS_BUILD_ID = 'os.build_id';
/**
 * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
 *
 * @example Microsoft Windows [Version 10.0.18363.778]
 * @example Ubuntu 18.04.1 LTS
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OS_DESCRIPTION = 'os.description';
/**
 * Human readable operating system name.
 *
 * @example iOS
 * @example Android
 * @example Ubuntu
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OS_NAME = 'os.name';
/**
 * The operating system type.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OS_TYPE = 'os.type';
/**
  * Enum value "aix" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_AIX = "aix";
/**
  * Enum value "darwin" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_DARWIN = "darwin";
/**
  * Enum value "dragonflybsd" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_DRAGONFLYBSD = "dragonflybsd";
/**
  * Enum value "freebsd" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_FREEBSD = "freebsd";
/**
  * Enum value "hpux" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_HPUX = "hpux";
/**
  * Enum value "linux" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_LINUX = "linux";
/**
  * Enum value "netbsd" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_NETBSD = "netbsd";
/**
  * Enum value "openbsd" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_OPENBSD = "openbsd";
/**
  * Enum value "solaris" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_SOLARIS = "solaris";
/**
  * Enum value "windows" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_WINDOWS = "windows";
/**
  * Enum value "z_os" for attribute {@link ATTR_OS_TYPE}.
  */
var OS_TYPE_VALUE_Z_OS = "z_os";
/**
 * The version string of the operating system as defined in [Version Attributes](/docs/resource/README.md#version-attributes).
 *
 * @example 14.2.1
 * @example 18.04.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_OS_VERSION = 'os.version';
/**
 * Deprecated. Use the `otel.scope.name` attribute
 *
 * @example io.opentelemetry.contrib.mongodb
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Use the `otel.scope.name` attribute.
 */
var ATTR_OTEL_LIBRARY_NAME = 'otel.library.name';
/**
 * Deprecated. Use the `otel.scope.version` attribute.
 *
 * @example 1.0.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Use the `otel.scope.version` attribute.
 */
var ATTR_OTEL_LIBRARY_VERSION = 'otel.library.version';
/**
 * The [`service.name`](/docs/resource/README.md#service) of the remote service. **SHOULD** be equal to the actual `service.name` resource attribute of the remote service if any.
 *
 * @example "AuthTokenCache"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PEER_SERVICE = 'peer.service';
/**
 * Deprecated, use `db.client.connection.pool.name` instead.
 *
 * @example myDataSource
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.client.connection.pool.name`.
 */
var ATTR_POOL_NAME = 'pool.name';
/**
 * Length of the process.command_args array
 *
 * @example 4
 *
 * @note This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_ARGS_COUNT = 'process.args_count';
/**
 * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.
 *
 * @example cmd/otelcol
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_COMMAND = 'process.command';
/**
 * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.
 *
 * @example ["cmd/otecol", "--config=config.yaml"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_COMMAND_ARGS = 'process.command_args';
/**
 * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.
 *
 * @example C:\\cmd\\otecol --config="my directory\\config.yaml"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_COMMAND_LINE = 'process.command_line';
/**
 * Specifies whether the context switches for this data point were voluntary or involuntary.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_CONTEXT_SWITCH_TYPE = 'process.context_switch_type';
/**
  * Enum value "involuntary" for attribute {@link ATTR_PROCESS_CONTEXT_SWITCH_TYPE}.
  */
var PROCESS_CONTEXT_SWITCH_TYPE_VALUE_INVOLUNTARY = "involuntary";
/**
  * Enum value "voluntary" for attribute {@link ATTR_PROCESS_CONTEXT_SWITCH_TYPE}.
  */
var PROCESS_CONTEXT_SWITCH_TYPE_VALUE_VOLUNTARY = "voluntary";
/**
 * Deprecated, use `cpu.mode` instead.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cpu.mode`
 */
var ATTR_PROCESS_CPU_STATE = 'process.cpu.state';
/**
  * Enum value "system" for attribute {@link ATTR_PROCESS_CPU_STATE}.
  */
var PROCESS_CPU_STATE_VALUE_SYSTEM = "system";
/**
  * Enum value "user" for attribute {@link ATTR_PROCESS_CPU_STATE}.
  */
var PROCESS_CPU_STATE_VALUE_USER = "user";
/**
  * Enum value "wait" for attribute {@link ATTR_PROCESS_CPU_STATE}.
  */
var PROCESS_CPU_STATE_VALUE_WAIT = "wait";
/**
 * The date and time the process was created, in ISO 8601 format.
 *
 * @example 2023-11-21T09:25:34.853Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_CREATION_TIME = 'process.creation.time';
/**
 * The GNU build ID as found in the `.note.gnu.build-id` ELF section (hex string).
 *
 * @example c89b11207f6479603b0d49bf291c092c2b719293
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXECUTABLE_BUILD_ID_GNU = 'process.executable.build_id.gnu';
/**
 * The Go build ID as retrieved by `go tool buildid <go executable>`.
 *
 * @example foh3mEXu7BLZjsN9pOwG/kATcXlYVCDEFouRMQed_/WwRFB1hPo9LBkekthSPG/x8hMC8emW2cCjXD0_1aY
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXECUTABLE_BUILD_ID_GO = 'process.executable.build_id.go';
/**
 * Profiling specific build ID for executables. See the OTel specification for Profiles for more information.
 *
 * @example 600DCAFE4A110000F2BF38C493F5FB92
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXECUTABLE_BUILD_ID_HTLHASH = 'process.executable.build_id.htlhash';
/**
 * "Deprecated, use `process.executable.build_id.htlhash` instead."
 *
 * @example 600DCAFE4A110000F2BF38C493F5FB92
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `process.executable.build_id.htlhash`
 */
var ATTR_PROCESS_EXECUTABLE_BUILD_ID_PROFILING = 'process.executable.build_id.profiling';
/**
 * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.
 *
 * @example otelcol
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXECUTABLE_NAME = 'process.executable.name';
/**
 * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
 *
 * @example /usr/bin/cmd/otelcol
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXECUTABLE_PATH = 'process.executable.path';
/**
 * The exit code of the process.
 *
 * @example 127
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXIT_CODE = 'process.exit.code';
/**
 * The date and time the process exited, in ISO 8601 format.
 *
 * @example 2023-11-21T09:26:12.315Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_EXIT_TIME = 'process.exit.time';
/**
 * The PID of the process's group leader. This is also the process group ID (PGID) of the process.
 *
 * @example 23
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_GROUP_LEADER_PID = 'process.group_leader.pid';
/**
 * Whether the process is connected to an interactive shell.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_INTERACTIVE = 'process.interactive';
/**
 * The control group associated with the process.
 *
 * @example 1:name=systemd:/user.slice/user-1000.slice/session-3.scope
 * @example 0::/user.slice/user-1000.slice/user@1000.service/tmux-spawn-0267755b-4639-4a27-90ed-f19f88e53748.scope
 *
 * @note Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the [/proc/[PID]/cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) file.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_LINUX_CGROUP = 'process.linux.cgroup';
/**
 * The username of the user that owns the process.
 *
 * @example root
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_OWNER = 'process.owner';
/**
 * The type of page fault for this data point. Type `major` is for major/hard page faults, and `minor` is for minor/soft page faults.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_PAGING_FAULT_TYPE = 'process.paging.fault_type';
/**
  * Enum value "major" for attribute {@link ATTR_PROCESS_PAGING_FAULT_TYPE}.
  */
var PROCESS_PAGING_FAULT_TYPE_VALUE_MAJOR = "major";
/**
  * Enum value "minor" for attribute {@link ATTR_PROCESS_PAGING_FAULT_TYPE}.
  */
var PROCESS_PAGING_FAULT_TYPE_VALUE_MINOR = "minor";
/**
 * Parent Process identifier (PPID).
 *
 * @example 111
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_PARENT_PID = 'process.parent_pid';
/**
 * Process identifier (PID).
 *
 * @example 1234
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_PID = 'process.pid';
/**
 * The real user ID (RUID) of the process.
 *
 * @example 1000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_REAL_USER_ID = 'process.real_user.id';
/**
 * The username of the real user of the process.
 *
 * @example operator
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_REAL_USER_NAME = 'process.real_user.name';
/**
 * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
 *
 * @example "Eclipse OpenJ9 Eclipse OpenJ9 VM openj9-0.21.0"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';
/**
 * The name of the runtime of this process.
 *
 * @example OpenJDK Runtime Environment
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name';
/**
 * The version of the runtime of this process, as returned by the runtime without modification.
 *
 * @example "14.0.2"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_RUNTIME_VERSION = 'process.runtime.version';
/**
 * The saved user ID (SUID) of the process.
 *
 * @example 1002
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_SAVED_USER_ID = 'process.saved_user.id';
/**
 * The username of the saved user.
 *
 * @example operator
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_SAVED_USER_NAME = 'process.saved_user.name';
/**
 * The PID of the process's session leader. This is also the session ID (SID) of the process.
 *
 * @example 14
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_SESSION_LEADER_PID = 'process.session_leader.pid';
/**
 * Process title (proctitle)
 *
 * @example cat /etc/hostname
 * @example xfce4-session
 * @example bash
 *
 * @note In many Unix-like systems, process title (proctitle), is the string that represents the name or command line of a running process, displayed by system monitoring tools like ps, top, and htop.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_TITLE = 'process.title';
/**
 * The effective user ID (EUID) of the process.
 *
 * @example 1001
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_USER_ID = 'process.user.id';
/**
 * The username of the effective user of the process.
 *
 * @example root
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_USER_NAME = 'process.user.name';
/**
 * Virtual process identifier.
 *
 * @example 12
 *
 * @note The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_VPID = 'process.vpid';
/**
 * The working directory of the process.
 *
 * @example /root
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROCESS_WORKING_DIRECTORY = 'process.working_directory';
/**
 * Describes the interpreter or compiler of a single frame.
 *
 * @example cpython
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_PROFILE_FRAME_TYPE = 'profile.frame.type';
/**
  * Enum value "beam" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_BEAM = "beam";
/**
  * Enum value "cpython" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_CPYTHON = "cpython";
/**
  * Enum value "dotnet" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_DOTNET = "dotnet";
/**
  * Enum value "jvm" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_JVM = "jvm";
/**
  * Enum value "kernel" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_KERNEL = "kernel";
/**
  * Enum value "native" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_NATIVE = "native";
/**
  * Enum value "perl" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_PERL = "perl";
/**
  * Enum value "php" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_PHP = "php";
/**
  * Enum value "ruby" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_RUBY = "ruby";
/**
  * Enum value "v8js" for attribute {@link ATTR_PROFILE_FRAME_TYPE}.
  */
var PROFILE_FRAME_TYPE_VALUE_V8JS = "v8js";
/**
 * The [error codes](https://connect.build/docs/protocol/#error-codes) of the Connect request. Error codes are always string values.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_CONNECT_RPC_ERROR_CODE = 'rpc.connect_rpc.error_code';
/**
  * Enum value "aborted" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_ABORTED = "aborted";
/**
  * Enum value "already_exists" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_ALREADY_EXISTS = "already_exists";
/**
  * Enum value "cancelled" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_CANCELLED = "cancelled";
/**
  * Enum value "data_loss" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_DATA_LOSS = "data_loss";
/**
  * Enum value "deadline_exceeded" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_DEADLINE_EXCEEDED = "deadline_exceeded";
/**
  * Enum value "failed_precondition" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_FAILED_PRECONDITION = "failed_precondition";
/**
  * Enum value "internal" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_INTERNAL = "internal";
/**
  * Enum value "invalid_argument" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_INVALID_ARGUMENT = "invalid_argument";
/**
  * Enum value "not_found" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_NOT_FOUND = "not_found";
/**
  * Enum value "out_of_range" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_OUT_OF_RANGE = "out_of_range";
/**
  * Enum value "permission_denied" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_PERMISSION_DENIED = "permission_denied";
/**
  * Enum value "resource_exhausted" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_RESOURCE_EXHAUSTED = "resource_exhausted";
/**
  * Enum value "unauthenticated" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAUTHENTICATED = "unauthenticated";
/**
  * Enum value "unavailable" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNAVAILABLE = "unavailable";
/**
  * Enum value "unimplemented" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNIMPLEMENTED = "unimplemented";
/**
  * Enum value "unknown" for attribute {@link ATTR_RPC_CONNECT_RPC_ERROR_CODE}.
  */
var RPC_CONNECT_RPC_ERROR_CODE_VALUE_UNKNOWN = "unknown";
/**
 * Connect request metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
 *
 * @example rpc.request.metadata.my-custom-metadata-attribute=["1.2.3.4", "1.2.3.5"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_CONNECT_RPC_REQUEST_METADATA = function (key) { return "rpc.connect_rpc.request.metadata.".concat(key); };
/**
 * Connect response metadata, `<key>` being the normalized Connect Metadata key (lowercase), the value being the metadata values.
 *
 * @example rpc.response.metadata.my-custom-metadata-attribute=["attribute_value"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_CONNECT_RPC_RESPONSE_METADATA = function (key) { return "rpc.connect_rpc.response.metadata.".concat(key); };
/**
 * gRPC request metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
 *
 * @example rpc.grpc.request.metadata.my-custom-metadata-attribute=["1.2.3.4", "1.2.3.5"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which metadata values are to be captured. Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_GRPC_REQUEST_METADATA = function (key) { return "rpc.grpc.request.metadata.".concat(key); };
/**
 * gRPC response metadata, `<key>` being the normalized gRPC Metadata key (lowercase), the value being the metadata values.
 *
 * @example rpc.grpc.response.metadata.my-custom-metadata-attribute=["attribute_value"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which metadata values are to be captured. Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_GRPC_RESPONSE_METADATA = function (key) { return "rpc.grpc.response.metadata.".concat(key); };
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';
/**
  * Enum value 0 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_OK = 0;
/**
  * Enum value 1 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_CANCELLED = 1;
/**
  * Enum value 2 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN = 2;
/**
  * Enum value 3 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT = 3;
/**
  * Enum value 4 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED = 4;
/**
  * Enum value 5 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND = 5;
/**
  * Enum value 6 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS = 6;
/**
  * Enum value 7 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED = 7;
/**
  * Enum value 8 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED = 8;
/**
  * Enum value 9 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION = 9;
/**
  * Enum value 10 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_ABORTED = 10;
/**
  * Enum value 11 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE = 11;
/**
  * Enum value 12 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED = 12;
/**
  * Enum value 13 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_INTERNAL = 13;
/**
  * Enum value 14 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE = 14;
/**
  * Enum value 15 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS = 15;
/**
  * Enum value 16 for attribute {@link ATTR_RPC_GRPC_STATUS_CODE}.
  */
var RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED = 16;
/**
 * `error.code` property of response if it is an error response.
 *
 * @example -32700
 * @example 100
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';
/**
 * `error.message` property of response if it is an error response.
 *
 * @example Parse error
 * @example User already exists
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';
/**
 * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
 *
 * @example 10
 * @example request-7
 * @example
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';
/**
 * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
 *
 * @example 2.0
 * @example 1.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';
/**
 * Compressed size of the message in bytes.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_MESSAGE_COMPRESSED_SIZE = 'rpc.message.compressed_size';
/**
 * **MUST** be calculated as two different counters starting from `1` one for sent messages and one for received message.
 *
 * @note This way we guarantee that the values will be consistent between different implementations.
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_MESSAGE_ID = 'rpc.message.id';
/**
 * Whether this is a received or sent message.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_MESSAGE_TYPE = 'rpc.message.type';
/**
  * Enum value "RECEIVED" for attribute {@link ATTR_RPC_MESSAGE_TYPE}.
  */
var RPC_MESSAGE_TYPE_VALUE_RECEIVED = "RECEIVED";
/**
  * Enum value "SENT" for attribute {@link ATTR_RPC_MESSAGE_TYPE}.
  */
var RPC_MESSAGE_TYPE_VALUE_SENT = "SENT";
/**
 * Uncompressed size of the message in bytes.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_MESSAGE_UNCOMPRESSED_SIZE = 'rpc.message.uncompressed_size';
/**
 * The name of the (logical) method being called, must be equal to the $method part in the span name.
 *
 * @example "exampleMethod"
 *
 * @note This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function.name` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_METHOD = 'rpc.method';
/**
 * The full (logical) name of the service being called, including its package name, if applicable.
 *
 * @example "myservice.EchoService"
 *
 * @note This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_SERVICE = 'rpc.service';
/**
 * A string identifying the remoting system. See below for a list of well-known identifiers.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_RPC_SYSTEM = 'rpc.system';
/**
  * Enum value "apache_dubbo" for attribute {@link ATTR_RPC_SYSTEM}.
  */
var RPC_SYSTEM_VALUE_APACHE_DUBBO = "apache_dubbo";
/**
  * Enum value "connect_rpc" for attribute {@link ATTR_RPC_SYSTEM}.
  */
var RPC_SYSTEM_VALUE_CONNECT_RPC = "connect_rpc";
/**
  * Enum value "dotnet_wcf" for attribute {@link ATTR_RPC_SYSTEM}.
  */
var RPC_SYSTEM_VALUE_DOTNET_WCF = "dotnet_wcf";
/**
  * Enum value "grpc" for attribute {@link ATTR_RPC_SYSTEM}.
  */
var RPC_SYSTEM_VALUE_GRPC = "grpc";
/**
  * Enum value "java_rmi" for attribute {@link ATTR_RPC_SYSTEM}.
  */
var RPC_SYSTEM_VALUE_JAVA_RMI = "java_rmi";
/**
 * A categorization value keyword used by the entity using the rule for detection of this event
 *
 * @example Attempted Information Leak
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_CATEGORY = 'security_rule.category';
/**
 * The description of the rule generating the event.
 *
 * @example Block requests to public DNS over HTTPS / TLS protocols
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_DESCRIPTION = 'security_rule.description';
/**
 * Name of the license under which the rule used to generate this event is made available.
 *
 * @example Apache 2.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_LICENSE = 'security_rule.license';
/**
 * The name of the rule or signature generating the event.
 *
 * @example BLOCK_DNS_over_TLS
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_NAME = 'security_rule.name';
/**
 * Reference URL to additional information about the rule used to generate this event.
 *
 * @example https://en.wikipedia.org/wiki/DNS_over_TLS
 *
 * @note The URL can point to the vendor’s documentation about the rule. If that’s not available, it can also be a link to a more general page describing this type of alert.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_REFERENCE = 'security_rule.reference';
/**
 * Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.
 *
 * @example Standard_Protocol_Filters
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_RULESET_NAME = 'security_rule.ruleset.name';
/**
 * A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.
 *
 * @example 550e8400-e29b-41d4-a716-446655440000
 * @example 1100110011
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_UUID = 'security_rule.uuid';
/**
 * The version / revision of the rule being used for analysis.
 *
 * @example 1.0.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SECURITY_RULE_VERSION = 'security_rule.version';
/**
 * The string ID of the service instance.
 *
 * @example 627cc493-f310-47de-96bd-71410b7dec09
 *
 * @note **MUST** be unique for each instance of the same `service.namespace,service.name` pair (in other words
 * `service.namespace,service.name,service.instance.id` triplet **MUST** be globally unique). The ID helps to
 * distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
 * service).
 *
 * Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC
 * 4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of
 * this value if stability is desirable. In that case, the ID **SHOULD** be used as source of a UUID Version 5 and
 * **SHOULD** use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.
 *
 * UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
 * needed. Similar to what can be seen in the man page for the
 * [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying
 * data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it
 * or not via another resource attribute.
 *
 * For applications running behind an application server (like unicorn), we do not recommend using one identifier
 * for all processes participating in the application. Instead, it's recommended each division (e.g. a worker
 * thread in unicorn) to have its own instance.id.
 *
 * It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the
 * service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will
 * likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.
 * However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance
 * for that telemetry. This is typically the case for scraping receivers, as they know the target address and
 * port.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SERVICE_INSTANCE_ID = 'service.instance.id';
/**
 * A namespace for `service.name`.
 *
 * @example Shop
 *
 * @note A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SERVICE_NAMESPACE = 'service.namespace';
/**
 * A unique id to identify a session.
 *
 * @example "00112233-4455-6677-8899-aabbccddeeff"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SESSION_ID = 'session.id';
/**
 * The previous `session.id` for this user, when known.
 *
 * @example "00112233-4455-6677-8899-aabbccddeeff"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SESSION_PREVIOUS_ID = 'session.previous_id';
/**
 * Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
 *
 * @example source.example.com
 * @example 10.1.2.80
 * @example /tmp/my.sock
 *
 * @note When observed from the destination side, and when communicating through an intermediary, `source.address` **SHOULD** represent the source address behind any intermediaries, for example proxies, if it's available.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SOURCE_ADDRESS = 'source.address';
/**
 * Source port number
 *
 * @example 3389
 * @example 2888
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SOURCE_PORT = 'source.port';
/**
 * Deprecated, use `db.client.connection.state` instead.
 *
 * @example idle
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `db.client.connection.state`.
 */
var ATTR_STATE = 'state';
/**
  * Enum value "idle" for attribute {@link ATTR_STATE}.
  */
var STATE_VALUE_IDLE = "idle";
/**
  * Enum value "used" for attribute {@link ATTR_STATE}.
  */
var STATE_VALUE_USED = "used";
/**
 * The logical CPU number [0..n-1]
 *
 * @example 1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_CPU_LOGICAL_NUMBER = 'system.cpu.logical_number';
/**
 * Deprecated, use `cpu.mode` instead.
 *
 * @example idle
 * @example interrupt
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `cpu.mode`
 */
var ATTR_SYSTEM_CPU_STATE = 'system.cpu.state';
/**
  * Enum value "idle" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_IDLE = "idle";
/**
  * Enum value "interrupt" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_INTERRUPT = "interrupt";
/**
  * Enum value "iowait" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_IOWAIT = "iowait";
/**
  * Enum value "nice" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_NICE = "nice";
/**
  * Enum value "steal" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_STEAL = "steal";
/**
  * Enum value "system" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_SYSTEM = "system";
/**
  * Enum value "user" for attribute {@link ATTR_SYSTEM_CPU_STATE}.
  */
var SYSTEM_CPU_STATE_VALUE_USER = "user";
/**
 * The device identifier
 *
 * @example (identifier)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_DEVICE = 'system.device';
/**
 * The filesystem mode
 *
 * @example rw, ro
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_FILESYSTEM_MODE = 'system.filesystem.mode';
/**
 * The filesystem mount path
 *
 * @example /mnt/data
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_FILESYSTEM_MOUNTPOINT = 'system.filesystem.mountpoint';
/**
 * The filesystem state
 *
 * @example used
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_FILESYSTEM_STATE = 'system.filesystem.state';
/**
  * Enum value "free" for attribute {@link ATTR_SYSTEM_FILESYSTEM_STATE}.
  */
var SYSTEM_FILESYSTEM_STATE_VALUE_FREE = "free";
/**
  * Enum value "reserved" for attribute {@link ATTR_SYSTEM_FILESYSTEM_STATE}.
  */
var SYSTEM_FILESYSTEM_STATE_VALUE_RESERVED = "reserved";
/**
  * Enum value "used" for attribute {@link ATTR_SYSTEM_FILESYSTEM_STATE}.
  */
var SYSTEM_FILESYSTEM_STATE_VALUE_USED = "used";
/**
 * The filesystem type
 *
 * @example ext4
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_FILESYSTEM_TYPE = 'system.filesystem.type';
/**
  * Enum value "exfat" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_EXFAT = "exfat";
/**
  * Enum value "ext4" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_EXT4 = "ext4";
/**
  * Enum value "fat32" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_FAT32 = "fat32";
/**
  * Enum value "hfsplus" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_HFSPLUS = "hfsplus";
/**
  * Enum value "ntfs" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_NTFS = "ntfs";
/**
  * Enum value "refs" for attribute {@link ATTR_SYSTEM_FILESYSTEM_TYPE}.
  */
var SYSTEM_FILESYSTEM_TYPE_VALUE_REFS = "refs";
/**
 * The memory state
 *
 * @example free
 * @example cached
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_MEMORY_STATE = 'system.memory.state';
/**
  * Enum value "buffers" for attribute {@link ATTR_SYSTEM_MEMORY_STATE}.
  */
var SYSTEM_MEMORY_STATE_VALUE_BUFFERS = "buffers";
/**
  * Enum value "cached" for attribute {@link ATTR_SYSTEM_MEMORY_STATE}.
  */
var SYSTEM_MEMORY_STATE_VALUE_CACHED = "cached";
/**
  * Enum value "free" for attribute {@link ATTR_SYSTEM_MEMORY_STATE}.
  */
var SYSTEM_MEMORY_STATE_VALUE_FREE = "free";
/**
  * Enum value "shared" for attribute {@link ATTR_SYSTEM_MEMORY_STATE}.
  */
var SYSTEM_MEMORY_STATE_VALUE_SHARED = "shared";
/**
  * Enum value "used" for attribute {@link ATTR_SYSTEM_MEMORY_STATE}.
  */
var SYSTEM_MEMORY_STATE_VALUE_USED = "used";
/**
 * Deprecated, use `network.connection.state` instead.
 *
 * @example close_wait
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Removed, report network connection state with `network.connection.state` attribute
 */
var ATTR_SYSTEM_NETWORK_STATE = 'system.network.state';
/**
  * Enum value "close" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_CLOSE = "close";
/**
  * Enum value "close_wait" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_CLOSE_WAIT = "close_wait";
/**
  * Enum value "closing" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_CLOSING = "closing";
/**
  * Enum value "delete" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_DELETE = "delete";
/**
  * Enum value "established" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_ESTABLISHED = "established";
/**
  * Enum value "fin_wait_1" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_1 = "fin_wait_1";
/**
  * Enum value "fin_wait_2" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_FIN_WAIT_2 = "fin_wait_2";
/**
  * Enum value "last_ack" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_LAST_ACK = "last_ack";
/**
  * Enum value "listen" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_LISTEN = "listen";
/**
  * Enum value "syn_recv" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_SYN_RECV = "syn_recv";
/**
  * Enum value "syn_sent" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_SYN_SENT = "syn_sent";
/**
  * Enum value "time_wait" for attribute {@link ATTR_SYSTEM_NETWORK_STATE}.
  */
var SYSTEM_NETWORK_STATE_VALUE_TIME_WAIT = "time_wait";
/**
 * The paging access direction
 *
 * @example in
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_PAGING_DIRECTION = 'system.paging.direction';
/**
  * Enum value "in" for attribute {@link ATTR_SYSTEM_PAGING_DIRECTION}.
  */
var SYSTEM_PAGING_DIRECTION_VALUE_IN = "in";
/**
  * Enum value "out" for attribute {@link ATTR_SYSTEM_PAGING_DIRECTION}.
  */
var SYSTEM_PAGING_DIRECTION_VALUE_OUT = "out";
/**
 * The memory paging state
 *
 * @example free
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_PAGING_STATE = 'system.paging.state';
/**
  * Enum value "free" for attribute {@link ATTR_SYSTEM_PAGING_STATE}.
  */
var SYSTEM_PAGING_STATE_VALUE_FREE = "free";
/**
  * Enum value "used" for attribute {@link ATTR_SYSTEM_PAGING_STATE}.
  */
var SYSTEM_PAGING_STATE_VALUE_USED = "used";
/**
 * The memory paging type
 *
 * @example minor
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_PAGING_TYPE = 'system.paging.type';
/**
  * Enum value "major" for attribute {@link ATTR_SYSTEM_PAGING_TYPE}.
  */
var SYSTEM_PAGING_TYPE_VALUE_MAJOR = "major";
/**
  * Enum value "minor" for attribute {@link ATTR_SYSTEM_PAGING_TYPE}.
  */
var SYSTEM_PAGING_TYPE_VALUE_MINOR = "minor";
/**
 * The process state, e.g., [Linux Process State Codes](https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES)
 *
 * @example running
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_SYSTEM_PROCESS_STATUS = 'system.process.status';
/**
  * Enum value "defunct" for attribute {@link ATTR_SYSTEM_PROCESS_STATUS}.
  */
var SYSTEM_PROCESS_STATUS_VALUE_DEFUNCT = "defunct";
/**
  * Enum value "running" for attribute {@link ATTR_SYSTEM_PROCESS_STATUS}.
  */
var SYSTEM_PROCESS_STATUS_VALUE_RUNNING = "running";
/**
  * Enum value "sleeping" for attribute {@link ATTR_SYSTEM_PROCESS_STATUS}.
  */
var SYSTEM_PROCESS_STATUS_VALUE_SLEEPING = "sleeping";
/**
  * Enum value "stopped" for attribute {@link ATTR_SYSTEM_PROCESS_STATUS}.
  */
var SYSTEM_PROCESS_STATUS_VALUE_STOPPED = "stopped";
/**
 * Deprecated, use `system.process.status` instead.
 *
 * @example running
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `system.process.status`.
 */
var ATTR_SYSTEM_PROCESSES_STATUS = 'system.processes.status';
/**
  * Enum value "defunct" for attribute {@link ATTR_SYSTEM_PROCESSES_STATUS}.
  */
var SYSTEM_PROCESSES_STATUS_VALUE_DEFUNCT = "defunct";
/**
  * Enum value "running" for attribute {@link ATTR_SYSTEM_PROCESSES_STATUS}.
  */
var SYSTEM_PROCESSES_STATUS_VALUE_RUNNING = "running";
/**
  * Enum value "sleeping" for attribute {@link ATTR_SYSTEM_PROCESSES_STATUS}.
  */
var SYSTEM_PROCESSES_STATUS_VALUE_SLEEPING = "sleeping";
/**
  * Enum value "stopped" for attribute {@link ATTR_SYSTEM_PROCESSES_STATUS}.
  */
var SYSTEM_PROCESSES_STATUS_VALUE_STOPPED = "stopped";
/**
 * The name of the auto instrumentation agent or distribution, if used.
 *
 * @example parts-unlimited-java
 *
 * @note Official auto instrumentation agents and distributions **SHOULD** set the `telemetry.distro.name` attribute to
 * a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TELEMETRY_DISTRO_NAME = 'telemetry.distro.name';
/**
 * The version string of the auto instrumentation agent or distribution, if used.
 *
 * @example 1.2.3
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TELEMETRY_DISTRO_VERSION = 'telemetry.distro.version';
/**
 * The fully qualified human readable name of the [test case](https://wikipedia.org/wiki/Test_case).
 *
 * @example org.example.TestCase1.test1
 * @example example/tests/TestCase1.test1
 * @example ExampleTestCase1_test1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TEST_CASE_NAME = 'test.case.name';
/**
 * The status of the actual test case result from test execution.
 *
 * @example pass
 * @example fail
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TEST_CASE_RESULT_STATUS = 'test.case.result.status';
/**
  * Enum value "fail" for attribute {@link ATTR_TEST_CASE_RESULT_STATUS}.
  */
var TEST_CASE_RESULT_STATUS_VALUE_FAIL = "fail";
/**
  * Enum value "pass" for attribute {@link ATTR_TEST_CASE_RESULT_STATUS}.
  */
var TEST_CASE_RESULT_STATUS_VALUE_PASS = "pass";
/**
 * The human readable name of a [test suite](https://wikipedia.org/wiki/Test_suite).
 *
 * @example TestSuite1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TEST_SUITE_NAME = 'test.suite.name';
/**
 * The status of the test suite run.
 *
 * @example success
 * @example failure
 * @example skipped
 * @example aborted
 * @example timed_out
 * @example in_progress
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TEST_SUITE_RUN_STATUS = 'test.suite.run.status';
/**
  * Enum value "aborted" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_ABORTED = "aborted";
/**
  * Enum value "failure" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_FAILURE = "failure";
/**
  * Enum value "in_progress" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_IN_PROGRESS = "in_progress";
/**
  * Enum value "skipped" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_SKIPPED = "skipped";
/**
  * Enum value "success" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_SUCCESS = "success";
/**
  * Enum value "timed_out" for attribute {@link ATTR_TEST_SUITE_RUN_STATUS}.
  */
var TEST_SUITE_RUN_STATUS_VALUE_TIMED_OUT = "timed_out";
/**
 * Current "managed" thread ID (as opposed to OS thread ID).
 *
 * @example 42
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_THREAD_ID = 'thread.id';
/**
 * Current thread name.
 *
 * @example "main"
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_THREAD_NAME = 'thread.name';
/**
 * String indicating the [cipher](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5) used during the current connection.
 *
 * @example TLS_RSA_WITH_3DES_EDE_CBC_SHA
 * @example TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
 *
 * @note The values allowed for `tls.cipher` **MUST** be one of the `Descriptions` of the [registered TLS Cipher Suits](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CIPHER = 'tls.cipher';
/**
 * PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.
 *
 * @example MII...
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_CERTIFICATE = 'tls.client.certificate';
/**
 * Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.
 *
 * @example ["MII...", "MI..."]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_CERTIFICATE_CHAIN = 'tls.client.certificate_chain';
/**
 * Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_HASH_MD5 = 'tls.client.hash.md5';
/**
 * Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 9E393D93138888D288266C2D915214D1D1CCEB2A
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_HASH_SHA1 = 'tls.client.hash.sha1';
/**
 * Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_HASH_SHA256 = 'tls.client.hash.sha256';
/**
 * Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
 *
 * @example CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_ISSUER = 'tls.client.issuer';
/**
 * A hash that identifies clients based on how they perform an SSL/TLS handshake.
 *
 * @example d4e5b18d6b55c71272893221c96ba240
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_JA3 = 'tls.client.ja3';
/**
 * Date/Time indicating when client certificate is no longer considered valid.
 *
 * @example 2021-01-01T00:00:00.000Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_NOT_AFTER = 'tls.client.not_after';
/**
 * Date/Time indicating when client certificate is first considered valid.
 *
 * @example 1970-01-01T00:00:00.000Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_NOT_BEFORE = 'tls.client.not_before';
/**
 * Deprecated, use `server.address` instead.
 *
 * @example opentelemetry.io
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Replaced by `server.address`.
 */
var ATTR_TLS_CLIENT_SERVER_NAME = 'tls.client.server_name';
/**
 * Distinguished name of subject of the x.509 certificate presented by the client.
 *
 * @example CN=myclient, OU=Documentation Team, DC=example, DC=com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_SUBJECT = 'tls.client.subject';
/**
 * Array of ciphers offered by the client during the client hello.
 *
 * @example ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CLIENT_SUPPORTED_CIPHERS = 'tls.client.supported_ciphers';
/**
 * String indicating the curve used for the given cipher, when applicable
 *
 * @example secp256r1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_CURVE = 'tls.curve';
/**
 * Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
 *
 * @example true
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_ESTABLISHED = 'tls.established';
/**
 * String indicating the protocol being tunneled. Per the values in the [IANA registry](https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.
 *
 * @example http/1.1
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_NEXT_PROTOCOL = 'tls.next_protocol';
/**
 * Normalized lowercase protocol name parsed from original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_PROTOCOL_NAME = 'tls.protocol.name';
/**
  * Enum value "ssl" for attribute {@link ATTR_TLS_PROTOCOL_NAME}.
  */
var TLS_PROTOCOL_NAME_VALUE_SSL = "ssl";
/**
  * Enum value "tls" for attribute {@link ATTR_TLS_PROTOCOL_NAME}.
  */
var TLS_PROTOCOL_NAME_VALUE_TLS = "tls";
/**
 * Numeric part of the version parsed from the original string of the negotiated [SSL/TLS protocol version](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES)
 *
 * @example 1.2
 * @example 3
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_PROTOCOL_VERSION = 'tls.protocol.version';
/**
 * Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
 *
 * @example true
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_RESUMED = 'tls.resumed';
/**
 * PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.
 *
 * @example MII...
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_CERTIFICATE = 'tls.server.certificate';
/**
 * Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.
 *
 * @example ["MII...", "MI..."]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_CERTIFICATE_CHAIN = 'tls.server.certificate_chain';
/**
 * Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_HASH_MD5 = 'tls.server.hash.md5';
/**
 * Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 9E393D93138888D288266C2D915214D1D1CCEB2A
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_HASH_SHA1 = 'tls.server.hash.sha1';
/**
 * Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 *
 * @example 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_HASH_SHA256 = 'tls.server.hash.sha256';
/**
 * Distinguished name of [subject](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6) of the issuer of the x.509 certificate presented by the client.
 *
 * @example CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_ISSUER = 'tls.server.issuer';
/**
 * A hash that identifies servers based on how they perform an SSL/TLS handshake.
 *
 * @example d4e5b18d6b55c71272893221c96ba240
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_JA3S = 'tls.server.ja3s';
/**
 * Date/Time indicating when server certificate is no longer considered valid.
 *
 * @example 2021-01-01T00:00:00.000Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_NOT_AFTER = 'tls.server.not_after';
/**
 * Date/Time indicating when server certificate is first considered valid.
 *
 * @example 1970-01-01T00:00:00.000Z
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_NOT_BEFORE = 'tls.server.not_before';
/**
 * Distinguished name of subject of the x.509 certificate presented by the server.
 *
 * @example CN=myserver, OU=Documentation Team, DC=example, DC=com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_TLS_SERVER_SUBJECT = 'tls.server.subject';
/**
 * Domain extracted from the `url.full`, such as "opentelemetry.io".
 *
 * @example www.foo.bar
 * @example opentelemetry.io
 * @example 3.12.167.2
 * @example [1080:0:0:0:8:800:200C:417A]
 *
 * @note In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a [literal IPv6 address](https://www.rfc-editor.org/rfc/rfc2732#section-2) enclosed by `[` and `]`, the `[` and `]` characters should also be captured in the domain field.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_DOMAIN = 'url.domain';
/**
 * The file extension extracted from the `url.full`, excluding the leading dot.
 *
 * @example png
 * @example gz
 *
 * @note The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions `example.tar.gz`, only the last one should be captured `gz`, not `tar.gz`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_EXTENSION = 'url.extension';
/**
 * Unmodified original URL as seen in the event source.
 *
 * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv
 * @example search?q=OpenTelemetry
 *
 * @note In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.
 * `url.original` might contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case password and username **SHOULD NOT** be redacted and attribute's value **SHOULD** remain the same.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_ORIGINAL = 'url.original';
/**
 * Port extracted from the `url.full`
 *
 * @example 443
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_PORT = 'url.port';
/**
 * The highest registered url domain, stripped of the subdomain.
 *
 * @example example.com
 * @example foo.co.uk
 *
 * @note This value can be determined precisely with the [public suffix list](http://publicsuffix.org). For example, the registered domain for `foo.example.com` is `example.com`. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as `co.uk`.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_REGISTERED_DOMAIN = 'url.registered_domain';
/**
 * The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
 *
 * @example east
 * @example sub2.sub1
 *
 * @note The subdomain portion of `www.east.mydomain.co.uk` is `east`. If the domain has multiple levels of subdomain, such as `sub2.sub1.example.com`, the subdomain field should contain `sub2.sub1`, with no trailing period.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_SUBDOMAIN = 'url.subdomain';
/**
 * The low-cardinality template of an [absolute path reference](https://www.rfc-editor.org/rfc/rfc3986#section-4.2).
 *
 * @example /users/{id}
 * @example /users/:id
 * @example /users?id={id}
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_TEMPLATE = 'url.template';
/**
 * The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is `com`.
 *
 * @example com
 * @example co.uk
 *
 * @note This value can be determined precisely with the [public suffix list](http://publicsuffix.org).
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_URL_TOP_LEVEL_DOMAIN = 'url.top_level_domain';
/**
 * User email address.
 *
 * @example a.einstein@example.com
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_EMAIL = 'user.email';
/**
 * User's full name
 *
 * @example Albert Einstein
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_FULL_NAME = 'user.full_name';
/**
 * Unique user hash to correlate information for a user in anonymized form.
 *
 * @example 364fc68eaf4c8acec74a4e52d7d1feaa
 *
 * @note Useful if `user.id` or `user.name` contain confidential information and cannot be used.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_HASH = 'user.hash';
/**
 * Unique identifier of the user.
 *
 * @example S-1-5-21-202424912787-2692429404-2351956786-1000
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_ID = 'user.id';
/**
 * Short name or login/username of the user.
 *
 * @example a.einstein
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_NAME = 'user.name';
/**
 * Array of user roles at the time of the event.
 *
 * @example ["admin", "reporting_user"]
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_ROLES = 'user.roles';
/**
 * Name of the user-agent extracted from original. Usually refers to the browser's name.
 *
 * @example Safari
 * @example YourApp
 *
 * @note [Example](https://www.whatsmyua.info) of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant name **SHOULD** be selected. In such a scenario it should align with `user_agent.version`
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_AGENT_NAME = 'user_agent.name';
/**
 * Specifies the category of synthetic traffic, such as tests or bots.
 *
 * @note This attribute **MAY** be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_AGENT_SYNTHETIC_TYPE = 'user_agent.synthetic.type';
/**
  * Enum value "bot" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.
  */
var USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = "bot";
/**
  * Enum value "test" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.
  */
var USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = "test";
/**
 * Version of the user-agent extracted from original. Usually refers to the browser's version
 *
 * @example 14.1.2
 * @example 1.0.0
 *
 * @note [Example](https://www.whatsmyua.info) of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the `user_agent.original`, the most significant version **SHOULD** be selected. In such a scenario it should align with `user_agent.name`
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_USER_AGENT_VERSION = 'user_agent.version';
/**
 * The type of garbage collection.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_V8JS_GC_TYPE = 'v8js.gc.type';
/**
  * Enum value "incremental" for attribute {@link ATTR_V8JS_GC_TYPE}.
  */
var V8JS_GC_TYPE_VALUE_INCREMENTAL = "incremental";
/**
  * Enum value "major" for attribute {@link ATTR_V8JS_GC_TYPE}.
  */
var V8JS_GC_TYPE_VALUE_MAJOR = "major";
/**
  * Enum value "minor" for attribute {@link ATTR_V8JS_GC_TYPE}.
  */
var V8JS_GC_TYPE_VALUE_MINOR = "minor";
/**
  * Enum value "weakcb" for attribute {@link ATTR_V8JS_GC_TYPE}.
  */
var V8JS_GC_TYPE_VALUE_WEAKCB = "weakcb";
/**
 * The name of the space type of heap memory.
 *
 * @note Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_V8JS_HEAP_SPACE_NAME = 'v8js.heap.space.name';
/**
  * Enum value "code_space" for attribute {@link ATTR_V8JS_HEAP_SPACE_NAME}.
  */
var V8JS_HEAP_SPACE_NAME_VALUE_CODE_SPACE = "code_space";
/**
  * Enum value "large_object_space" for attribute {@link ATTR_V8JS_HEAP_SPACE_NAME}.
  */
var V8JS_HEAP_SPACE_NAME_VALUE_LARGE_OBJECT_SPACE = "large_object_space";
/**
  * Enum value "map_space" for attribute {@link ATTR_V8JS_HEAP_SPACE_NAME}.
  */
var V8JS_HEAP_SPACE_NAME_VALUE_MAP_SPACE = "map_space";
/**
  * Enum value "new_space" for attribute {@link ATTR_V8JS_HEAP_SPACE_NAME}.
  */
var V8JS_HEAP_SPACE_NAME_VALUE_NEW_SPACE = "new_space";
/**
  * Enum value "old_space" for attribute {@link ATTR_V8JS_HEAP_SPACE_NAME}.
  */
var V8JS_HEAP_SPACE_NAME_VALUE_OLD_SPACE = "old_space";
/**
 * The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
 *
 * @example 123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_CHANGE_ID = 'vcs.change.id';
/**
 * The state of the change (pull request/merge request/changelist).
 *
 * @example open
 * @example closed
 * @example merged
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_CHANGE_STATE = 'vcs.change.state';
/**
  * Enum value "closed" for attribute {@link ATTR_VCS_CHANGE_STATE}.
  */
var VCS_CHANGE_STATE_VALUE_CLOSED = "closed";
/**
  * Enum value "merged" for attribute {@link ATTR_VCS_CHANGE_STATE}.
  */
var VCS_CHANGE_STATE_VALUE_MERGED = "merged";
/**
  * Enum value "open" for attribute {@link ATTR_VCS_CHANGE_STATE}.
  */
var VCS_CHANGE_STATE_VALUE_OPEN = "open";
/**
  * Enum value "wip" for attribute {@link ATTR_VCS_CHANGE_STATE}.
  */
var VCS_CHANGE_STATE_VALUE_WIP = "wip";
/**
 * The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.
 *
 * @example Fixes broken thing
 * @example feat: add my new feature
 * @example [chore] update dependency
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_CHANGE_TITLE = 'vcs.change.title';
/**
 * The type of line change being measured on a branch or change.
 *
 * @example added
 * @example removed
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_LINE_CHANGE_TYPE = 'vcs.line_change.type';
/**
  * Enum value "added" for attribute {@link ATTR_VCS_LINE_CHANGE_TYPE}.
  */
var VCS_LINE_CHANGE_TYPE_VALUE_ADDED = "added";
/**
  * Enum value "removed" for attribute {@link ATTR_VCS_LINE_CHANGE_TYPE}.
  */
var VCS_LINE_CHANGE_TYPE_VALUE_REMOVED = "removed";
/**
 * The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
 *
 * @example my-feature-branch
 * @example tag-1-test
 *
 * @note `base` refers to the starting point of a change. For example, `main`
 * would be the base reference of type branch if you've created a new
 * reference of type branch from it and created new commits.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_BASE_NAME = 'vcs.ref.base.name';
/**
 * The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
 *
 * @example 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
 * @example main
 * @example 123
 * @example HEAD
 *
 * @note `base` refers to the starting point of a change. For example, `main`
 * would be the base reference of type branch if you've created a new
 * reference of type branch from it and created new commits. The
 * revision can be a full [hash value (see
 * glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
 * of the recorded change to a ref within a repository pointing to a
 * commit [commit](https://git-scm.com/docs/git-commit) object. It does
 * not necessarily have to be a hash; it can simply define a [revision
 * number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
 * which is an integer that is monotonically increasing. In cases where
 * it is identical to the `ref.base.name`, it **SHOULD** still be included.
 * It is up to the implementer to decide which value to set as the
 * revision based on the VCS system and situational context.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_BASE_REVISION = 'vcs.ref.base.revision';
/**
 * The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
 *
 * @example branch
 * @example tag
 *
 * @note `base` refers to the starting point of a change. For example, `main`
 * would be the base reference of type branch if you've created a new
 * reference of type branch from it and created new commits.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_BASE_TYPE = 'vcs.ref.base.type';
/**
  * Enum value "branch" for attribute {@link ATTR_VCS_REF_BASE_TYPE}.
  */
var VCS_REF_BASE_TYPE_VALUE_BRANCH = "branch";
/**
  * Enum value "tag" for attribute {@link ATTR_VCS_REF_BASE_TYPE}.
  */
var VCS_REF_BASE_TYPE_VALUE_TAG = "tag";
/**
 * The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
 *
 * @example my-feature-branch
 * @example tag-1-test
 *
 * @note `head` refers to where you are right now; the current reference at a
 * given time.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_HEAD_NAME = 'vcs.ref.head.name';
/**
 * The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
 *
 * @example 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
 * @example main
 * @example 123
 * @example HEAD
 *
 * @note `head` refers to where you are right now; the current reference at a
 * given time.The revision can be a full [hash value (see
 * glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf),
 * of the recorded change to a ref within a repository pointing to a
 * commit [commit](https://git-scm.com/docs/git-commit) object. It does
 * not necessarily have to be a hash; it can simply define a [revision
 * number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html)
 * which is an integer that is monotonically increasing. In cases where
 * it is identical to the `ref.head.name`, it **SHOULD** still be included.
 * It is up to the implementer to decide which value to set as the
 * revision based on the VCS system and situational context.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_HEAD_REVISION = 'vcs.ref.head.revision';
/**
 * The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
 *
 * @example branch
 * @example tag
 *
 * @note `head` refers to where you are right now; the current reference at a
 * given time.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_HEAD_TYPE = 'vcs.ref.head.type';
/**
  * Enum value "branch" for attribute {@link ATTR_VCS_REF_HEAD_TYPE}.
  */
var VCS_REF_HEAD_TYPE_VALUE_BRANCH = "branch";
/**
  * Enum value "tag" for attribute {@link ATTR_VCS_REF_HEAD_TYPE}.
  */
var VCS_REF_HEAD_TYPE_VALUE_TAG = "tag";
/**
 * The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
 *
 * @example branch
 * @example tag
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REF_TYPE = 'vcs.ref.type';
/**
  * Enum value "branch" for attribute {@link ATTR_VCS_REF_TYPE}.
  */
var VCS_REF_TYPE_VALUE_BRANCH = "branch";
/**
  * Enum value "tag" for attribute {@link ATTR_VCS_REF_TYPE}.
  */
var VCS_REF_TYPE_VALUE_TAG = "tag";
/**
 * Deprecated, use `vcs.change.id` instead.
 *
 * @example 123
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `vcs.change.id` instead.
 */
var ATTR_VCS_REPOSITORY_CHANGE_ID = 'vcs.repository.change.id';
/**
 * Deprecated, use `vcs.change.title` instead.
 *
 * @example Fixes broken thing
 * @example feat: add my new feature
 * @example [chore] update dependency
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `vcs.change.title` instead.
 */
var ATTR_VCS_REPOSITORY_CHANGE_TITLE = 'vcs.repository.change.title';
/**
 * The human readable name of the repository. It **SHOULD NOT** include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.
 *
 * @example semantic-conventions
 * @example my-cool-repo
 *
 * @note Due to it only being the name, it can clash with forks of the same
 * repository if collecting telemetry across multiple orgs or groups in
 * the same backends.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REPOSITORY_NAME = 'vcs.repository.name';
/**
 * Deprecated, use `vcs.ref.head.name` instead.
 *
 * @example my-feature-branch
 * @example tag-1-test
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `vcs.ref.head.name` instead.
 */
var ATTR_VCS_REPOSITORY_REF_NAME = 'vcs.repository.ref.name';
/**
 * Deprecated, use `vcs.ref.head.revision` instead.
 *
 * @example 9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc
 * @example main
 * @example 123
 * @example HEAD
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `vcs.ref.head.revision` instead.
 */
var ATTR_VCS_REPOSITORY_REF_REVISION = 'vcs.repository.ref.revision';
/**
 * Deprecated, use `vcs.ref.head.type` instead.
 *
 * @example branch
 * @example tag
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 *
 * @deprecated Deprecated, use `vcs.ref.head.type` instead.
 */
var ATTR_VCS_REPOSITORY_REF_TYPE = 'vcs.repository.ref.type';
/**
  * Enum value "branch" for attribute {@link ATTR_VCS_REPOSITORY_REF_TYPE}.
  */
var VCS_REPOSITORY_REF_TYPE_VALUE_BRANCH = "branch";
/**
  * Enum value "tag" for attribute {@link ATTR_VCS_REPOSITORY_REF_TYPE}.
  */
var VCS_REPOSITORY_REF_TYPE_VALUE_TAG = "tag";
/**
 * The [canonical URL](https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.) of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.
 *
 * @example https://github.com/opentelemetry/open-telemetry-collector-contrib
 * @example https://gitlab.com/my-org/my-project/my-projects-project/repo
 *
 * @note In Git Version Control Systems, the canonical URL **SHOULD NOT** include
 * the `.git` extension.
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REPOSITORY_URL_FULL = 'vcs.repository.url.full';
/**
 * The type of revision comparison.
 *
 * @example ahead
 * @example behind
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_VCS_REVISION_DELTA_DIRECTION = 'vcs.revision_delta.direction';
/**
  * Enum value "ahead" for attribute {@link ATTR_VCS_REVISION_DELTA_DIRECTION}.
  */
var VCS_REVISION_DELTA_DIRECTION_VALUE_AHEAD = "ahead";
/**
  * Enum value "behind" for attribute {@link ATTR_VCS_REVISION_DELTA_DIRECTION}.
  */
var VCS_REVISION_DELTA_DIRECTION_VALUE_BEHIND = "behind";
/**
 * Additional description of the web engine (e.g. detailed version and edition information).
 *
 * @example WildFly Full 21.0.0.Final (WildFly Core 13.0.1.Final) - 2.2.2.Final
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_WEBENGINE_DESCRIPTION = 'webengine.description';
/**
 * The name of the web engine.
 *
 * @example WildFly
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_WEBENGINE_NAME = 'webengine.name';
/**
 * The version of the web engine.
 *
 * @example 21.0.0
 *
 * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.
 */
var ATTR_WEBENGINE_VERSION = 'webengine.version';
//# sourceMappingURL=experimental_attributes.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createConstMap: () => (/* binding */ createConstMap)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a const map from the given values
 * @param values - An array of values to be used as keys and values in the map.
 * @returns A populated version of the map with the values and keys derived from the values.
 */
/*#__NO_SIDE_EFFECTS__*/
function createConstMap(values) {
    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any
    var res = {};
    var len = values.length;
    for (var lp = 0; lp < len; lp++) {
        var val = values[lp];
        if (val) {
            res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;
        }
    }
    return res;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AWSECSLAUNCHTYPEVALUES_EC2: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_EC2),
/* harmony export */   AWSECSLAUNCHTYPEVALUES_FARGATE: () => (/* binding */ AWSECSLAUNCHTYPEVALUES_FARGATE),
/* harmony export */   AwsEcsLaunchtypeValues: () => (/* binding */ AwsEcsLaunchtypeValues),
/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS),
/* harmony export */   CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => (/* binding */ CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC),
/* harmony export */   CLOUDPLATFORMVALUES_AWS_EC2: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EC2),
/* harmony export */   CLOUDPLATFORMVALUES_AWS_ECS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ECS),
/* harmony export */   CLOUDPLATFORMVALUES_AWS_EKS: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_EKS),
/* harmony export */   CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK),
/* harmony export */   CLOUDPLATFORMVALUES_AWS_LAMBDA: () => (/* binding */ CLOUDPLATFORMVALUES_AWS_LAMBDA),
/* harmony export */   CLOUDPLATFORMVALUES_AZURE_AKS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_AKS),
/* harmony export */   CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_APP_SERVICE),
/* harmony export */   CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES),
/* harmony export */   CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_FUNCTIONS),
/* harmony export */   CLOUDPLATFORMVALUES_AZURE_VM: () => (/* binding */ CLOUDPLATFORMVALUES_AZURE_VM),
/* harmony export */   CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_APP_ENGINE),
/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS),
/* harmony export */   CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_CLOUD_RUN),
/* harmony export */   CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE),
/* harmony export */   CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => (/* binding */ CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE),
/* harmony export */   CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ CLOUDPROVIDERVALUES_ALIBABA_CLOUD),
/* harmony export */   CLOUDPROVIDERVALUES_AWS: () => (/* binding */ CLOUDPROVIDERVALUES_AWS),
/* harmony export */   CLOUDPROVIDERVALUES_AZURE: () => (/* binding */ CLOUDPROVIDERVALUES_AZURE),
/* harmony export */   CLOUDPROVIDERVALUES_GCP: () => (/* binding */ CLOUDPROVIDERVALUES_GCP),
/* harmony export */   CloudPlatformValues: () => (/* binding */ CloudPlatformValues),
/* harmony export */   CloudProviderValues: () => (/* binding */ CloudProviderValues),
/* harmony export */   HOSTARCHVALUES_AMD64: () => (/* binding */ HOSTARCHVALUES_AMD64),
/* harmony export */   HOSTARCHVALUES_ARM32: () => (/* binding */ HOSTARCHVALUES_ARM32),
/* harmony export */   HOSTARCHVALUES_ARM64: () => (/* binding */ HOSTARCHVALUES_ARM64),
/* harmony export */   HOSTARCHVALUES_IA64: () => (/* binding */ HOSTARCHVALUES_IA64),
/* harmony export */   HOSTARCHVALUES_PPC32: () => (/* binding */ HOSTARCHVALUES_PPC32),
/* harmony export */   HOSTARCHVALUES_PPC64: () => (/* binding */ HOSTARCHVALUES_PPC64),
/* harmony export */   HOSTARCHVALUES_X86: () => (/* binding */ HOSTARCHVALUES_X86),
/* harmony export */   HostArchValues: () => (/* binding */ HostArchValues),
/* harmony export */   OSTYPEVALUES_AIX: () => (/* binding */ OSTYPEVALUES_AIX),
/* harmony export */   OSTYPEVALUES_DARWIN: () => (/* binding */ OSTYPEVALUES_DARWIN),
/* harmony export */   OSTYPEVALUES_DRAGONFLYBSD: () => (/* binding */ OSTYPEVALUES_DRAGONFLYBSD),
/* harmony export */   OSTYPEVALUES_FREEBSD: () => (/* binding */ OSTYPEVALUES_FREEBSD),
/* harmony export */   OSTYPEVALUES_HPUX: () => (/* binding */ OSTYPEVALUES_HPUX),
/* harmony export */   OSTYPEVALUES_LINUX: () => (/* binding */ OSTYPEVALUES_LINUX),
/* harmony export */   OSTYPEVALUES_NETBSD: () => (/* binding */ OSTYPEVALUES_NETBSD),
/* harmony export */   OSTYPEVALUES_OPENBSD: () => (/* binding */ OSTYPEVALUES_OPENBSD),
/* harmony export */   OSTYPEVALUES_SOLARIS: () => (/* binding */ OSTYPEVALUES_SOLARIS),
/* harmony export */   OSTYPEVALUES_WINDOWS: () => (/* binding */ OSTYPEVALUES_WINDOWS),
/* harmony export */   OSTYPEVALUES_Z_OS: () => (/* binding */ OSTYPEVALUES_Z_OS),
/* harmony export */   OsTypeValues: () => (/* binding */ OsTypeValues),
/* harmony export */   SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CLUSTER_ARN),
/* harmony export */   SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_CONTAINER_ARN),
/* harmony export */   SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => (/* binding */ SEMRESATTRS_AWS_ECS_LAUNCHTYPE),
/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_ARN: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_ARN),
/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_FAMILY),
/* harmony export */   SEMRESATTRS_AWS_ECS_TASK_REVISION: () => (/* binding */ SEMRESATTRS_AWS_ECS_TASK_REVISION),
/* harmony export */   SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => (/* binding */ SEMRESATTRS_AWS_EKS_CLUSTER_ARN),
/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_ARNS),
/* harmony export */   SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_GROUP_NAMES),
/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_ARNS),
/* harmony export */   SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => (/* binding */ SEMRESATTRS_AWS_LOG_STREAM_NAMES),
/* harmony export */   SEMRESATTRS_CLOUD_ACCOUNT_ID: () => (/* binding */ SEMRESATTRS_CLOUD_ACCOUNT_ID),
/* harmony export */   SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => (/* binding */ SEMRESATTRS_CLOUD_AVAILABILITY_ZONE),
/* harmony export */   SEMRESATTRS_CLOUD_PLATFORM: () => (/* binding */ SEMRESATTRS_CLOUD_PLATFORM),
/* harmony export */   SEMRESATTRS_CLOUD_PROVIDER: () => (/* binding */ SEMRESATTRS_CLOUD_PROVIDER),
/* harmony export */   SEMRESATTRS_CLOUD_REGION: () => (/* binding */ SEMRESATTRS_CLOUD_REGION),
/* harmony export */   SEMRESATTRS_CONTAINER_ID: () => (/* binding */ SEMRESATTRS_CONTAINER_ID),
/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_NAME),
/* harmony export */   SEMRESATTRS_CONTAINER_IMAGE_TAG: () => (/* binding */ SEMRESATTRS_CONTAINER_IMAGE_TAG),
/* harmony export */   SEMRESATTRS_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_CONTAINER_NAME),
/* harmony export */   SEMRESATTRS_CONTAINER_RUNTIME: () => (/* binding */ SEMRESATTRS_CONTAINER_RUNTIME),
/* harmony export */   SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => (/* binding */ SEMRESATTRS_DEPLOYMENT_ENVIRONMENT),
/* harmony export */   SEMRESATTRS_DEVICE_ID: () => (/* binding */ SEMRESATTRS_DEVICE_ID),
/* harmony export */   SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_IDENTIFIER),
/* harmony export */   SEMRESATTRS_DEVICE_MODEL_NAME: () => (/* binding */ SEMRESATTRS_DEVICE_MODEL_NAME),
/* harmony export */   SEMRESATTRS_FAAS_ID: () => (/* binding */ SEMRESATTRS_FAAS_ID),
/* harmony export */   SEMRESATTRS_FAAS_INSTANCE: () => (/* binding */ SEMRESATTRS_FAAS_INSTANCE),
/* harmony export */   SEMRESATTRS_FAAS_MAX_MEMORY: () => (/* binding */ SEMRESATTRS_FAAS_MAX_MEMORY),
/* harmony export */   SEMRESATTRS_FAAS_NAME: () => (/* binding */ SEMRESATTRS_FAAS_NAME),
/* harmony export */   SEMRESATTRS_FAAS_VERSION: () => (/* binding */ SEMRESATTRS_FAAS_VERSION),
/* harmony export */   SEMRESATTRS_HOST_ARCH: () => (/* binding */ SEMRESATTRS_HOST_ARCH),
/* harmony export */   SEMRESATTRS_HOST_ID: () => (/* binding */ SEMRESATTRS_HOST_ID),
/* harmony export */   SEMRESATTRS_HOST_IMAGE_ID: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_ID),
/* harmony export */   SEMRESATTRS_HOST_IMAGE_NAME: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_NAME),
/* harmony export */   SEMRESATTRS_HOST_IMAGE_VERSION: () => (/* binding */ SEMRESATTRS_HOST_IMAGE_VERSION),
/* harmony export */   SEMRESATTRS_HOST_NAME: () => (/* binding */ SEMRESATTRS_HOST_NAME),
/* harmony export */   SEMRESATTRS_HOST_TYPE: () => (/* binding */ SEMRESATTRS_HOST_TYPE),
/* harmony export */   SEMRESATTRS_K8S_CLUSTER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CLUSTER_NAME),
/* harmony export */   SEMRESATTRS_K8S_CONTAINER_NAME: () => (/* binding */ SEMRESATTRS_K8S_CONTAINER_NAME),
/* harmony export */   SEMRESATTRS_K8S_CRONJOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_NAME),
/* harmony export */   SEMRESATTRS_K8S_CRONJOB_UID: () => (/* binding */ SEMRESATTRS_K8S_CRONJOB_UID),
/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_NAME),
/* harmony export */   SEMRESATTRS_K8S_DAEMONSET_UID: () => (/* binding */ SEMRESATTRS_K8S_DAEMONSET_UID),
/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_NAME),
/* harmony export */   SEMRESATTRS_K8S_DEPLOYMENT_UID: () => (/* binding */ SEMRESATTRS_K8S_DEPLOYMENT_UID),
/* harmony export */   SEMRESATTRS_K8S_JOB_NAME: () => (/* binding */ SEMRESATTRS_K8S_JOB_NAME),
/* harmony export */   SEMRESATTRS_K8S_JOB_UID: () => (/* binding */ SEMRESATTRS_K8S_JOB_UID),
/* harmony export */   SEMRESATTRS_K8S_NAMESPACE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NAMESPACE_NAME),
/* harmony export */   SEMRESATTRS_K8S_NODE_NAME: () => (/* binding */ SEMRESATTRS_K8S_NODE_NAME),
/* harmony export */   SEMRESATTRS_K8S_NODE_UID: () => (/* binding */ SEMRESATTRS_K8S_NODE_UID),
/* harmony export */   SEMRESATTRS_K8S_POD_NAME: () => (/* binding */ SEMRESATTRS_K8S_POD_NAME),
/* harmony export */   SEMRESATTRS_K8S_POD_UID: () => (/* binding */ SEMRESATTRS_K8S_POD_UID),
/* harmony export */   SEMRESATTRS_K8S_REPLICASET_NAME: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_NAME),
/* harmony export */   SEMRESATTRS_K8S_REPLICASET_UID: () => (/* binding */ SEMRESATTRS_K8S_REPLICASET_UID),
/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_NAME: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_NAME),
/* harmony export */   SEMRESATTRS_K8S_STATEFULSET_UID: () => (/* binding */ SEMRESATTRS_K8S_STATEFULSET_UID),
/* harmony export */   SEMRESATTRS_OS_DESCRIPTION: () => (/* binding */ SEMRESATTRS_OS_DESCRIPTION),
/* harmony export */   SEMRESATTRS_OS_NAME: () => (/* binding */ SEMRESATTRS_OS_NAME),
/* harmony export */   SEMRESATTRS_OS_TYPE: () => (/* binding */ SEMRESATTRS_OS_TYPE),
/* harmony export */   SEMRESATTRS_OS_VERSION: () => (/* binding */ SEMRESATTRS_OS_VERSION),
/* harmony export */   SEMRESATTRS_PROCESS_COMMAND: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND),
/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_ARGS: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_ARGS),
/* harmony export */   SEMRESATTRS_PROCESS_COMMAND_LINE: () => (/* binding */ SEMRESATTRS_PROCESS_COMMAND_LINE),
/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_NAME),
/* harmony export */   SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => (/* binding */ SEMRESATTRS_PROCESS_EXECUTABLE_PATH),
/* harmony export */   SEMRESATTRS_PROCESS_OWNER: () => (/* binding */ SEMRESATTRS_PROCESS_OWNER),
/* harmony export */   SEMRESATTRS_PROCESS_PID: () => (/* binding */ SEMRESATTRS_PROCESS_PID),
/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION),
/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_NAME: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_NAME),
/* harmony export */   SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => (/* binding */ SEMRESATTRS_PROCESS_RUNTIME_VERSION),
/* harmony export */   SEMRESATTRS_SERVICE_INSTANCE_ID: () => (/* binding */ SEMRESATTRS_SERVICE_INSTANCE_ID),
/* harmony export */   SEMRESATTRS_SERVICE_NAME: () => (/* binding */ SEMRESATTRS_SERVICE_NAME),
/* harmony export */   SEMRESATTRS_SERVICE_NAMESPACE: () => (/* binding */ SEMRESATTRS_SERVICE_NAMESPACE),
/* harmony export */   SEMRESATTRS_SERVICE_VERSION: () => (/* binding */ SEMRESATTRS_SERVICE_VERSION),
/* harmony export */   SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_AUTO_VERSION),
/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_LANGUAGE),
/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_NAME: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_NAME),
/* harmony export */   SEMRESATTRS_TELEMETRY_SDK_VERSION: () => (/* binding */ SEMRESATTRS_TELEMETRY_SDK_VERSION),
/* harmony export */   SEMRESATTRS_WEBENGINE_DESCRIPTION: () => (/* binding */ SEMRESATTRS_WEBENGINE_DESCRIPTION),
/* harmony export */   SEMRESATTRS_WEBENGINE_NAME: () => (/* binding */ SEMRESATTRS_WEBENGINE_NAME),
/* harmony export */   SEMRESATTRS_WEBENGINE_VERSION: () => (/* binding */ SEMRESATTRS_WEBENGINE_VERSION),
/* harmony export */   SemanticResourceAttributes: () => (/* binding */ SemanticResourceAttributes),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_CPP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_CPP),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_DOTNET),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_ERLANG),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_GO: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_GO),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_JAVA: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_JAVA),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_NODEJS),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PHP: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PHP),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_PYTHON),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_RUBY: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_RUBY),
/* harmony export */   TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => (/* binding */ TELEMETRYSDKLANGUAGEVALUES_WEBJS),
/* harmony export */   TelemetrySdkLanguageValues: () => (/* binding */ TelemetrySdkLanguageValues)
/* harmony export */ });
/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticResourceAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_CLOUD_PROVIDER = 'cloud.provider';
var TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';
var TMP_CLOUD_REGION = 'cloud.region';
var TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';
var TMP_CLOUD_PLATFORM = 'cloud.platform';
var TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';
var TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';
var TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';
var TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';
var TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';
var TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';
var TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';
var TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';
var TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';
var TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';
var TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';
var TMP_CONTAINER_NAME = 'container.name';
var TMP_CONTAINER_ID = 'container.id';
var TMP_CONTAINER_RUNTIME = 'container.runtime';
var TMP_CONTAINER_IMAGE_NAME = 'container.image.name';
var TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';
var TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';
var TMP_DEVICE_ID = 'device.id';
var TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';
var TMP_DEVICE_MODEL_NAME = 'device.model.name';
var TMP_FAAS_NAME = 'faas.name';
var TMP_FAAS_ID = 'faas.id';
var TMP_FAAS_VERSION = 'faas.version';
var TMP_FAAS_INSTANCE = 'faas.instance';
var TMP_FAAS_MAX_MEMORY = 'faas.max_memory';
var TMP_HOST_ID = 'host.id';
var TMP_HOST_NAME = 'host.name';
var TMP_HOST_TYPE = 'host.type';
var TMP_HOST_ARCH = 'host.arch';
var TMP_HOST_IMAGE_NAME = 'host.image.name';
var TMP_HOST_IMAGE_ID = 'host.image.id';
var TMP_HOST_IMAGE_VERSION = 'host.image.version';
var TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';
var TMP_K8S_NODE_NAME = 'k8s.node.name';
var TMP_K8S_NODE_UID = 'k8s.node.uid';
var TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';
var TMP_K8S_POD_UID = 'k8s.pod.uid';
var TMP_K8S_POD_NAME = 'k8s.pod.name';
var TMP_K8S_CONTAINER_NAME = 'k8s.container.name';
var TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';
var TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';
var TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';
var TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';
var TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';
var TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';
var TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';
var TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';
var TMP_K8S_JOB_UID = 'k8s.job.uid';
var TMP_K8S_JOB_NAME = 'k8s.job.name';
var TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';
var TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';
var TMP_OS_TYPE = 'os.type';
var TMP_OS_DESCRIPTION = 'os.description';
var TMP_OS_NAME = 'os.name';
var TMP_OS_VERSION = 'os.version';
var TMP_PROCESS_PID = 'process.pid';
var TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';
var TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';
var TMP_PROCESS_COMMAND = 'process.command';
var TMP_PROCESS_COMMAND_LINE = 'process.command_line';
var TMP_PROCESS_COMMAND_ARGS = 'process.command_args';
var TMP_PROCESS_OWNER = 'process.owner';
var TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';
var TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';
var TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';
var TMP_SERVICE_NAME = 'service.name';
var TMP_SERVICE_NAMESPACE = 'service.namespace';
var TMP_SERVICE_INSTANCE_ID = 'service.instance.id';
var TMP_SERVICE_VERSION = 'service.version';
var TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';
var TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';
var TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';
var TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';
var TMP_WEBENGINE_NAME = 'webengine.name';
var TMP_WEBENGINE_VERSION = 'webengine.version';
var TMP_WEBENGINE_DESCRIPTION = 'webengine.description';
/**
 * Name of the cloud provider.
 *
 * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;
/**
 * The cloud account ID the resource is assigned to.
 *
 * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;
/**
 * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).
 *
 * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;
/**
 * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
 *
 * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.
 *
 * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;
/**
 * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).
 *
 * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;
/**
 * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).
 *
 * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;
/**
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 *
 * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;
/**
 * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).
 *
 * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;
/**
 * The task definition family this task definition is a member of.
 *
 * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;
/**
 * The revision for this task definition.
 *
 * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;
/**
 * The ARN of an EKS cluster.
 *
 * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;
/**
 * The name(s) of the AWS log group(s) an application is writing to.
 *
 * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
 *
 * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;
/**
 * The Amazon Resource Name(s) (ARN) of the AWS log group(s).
 *
 * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).
 *
 * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;
/**
 * The name(s) of the AWS log stream(s) an application is writing to.
 *
 * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;
/**
 * The ARN(s) of the AWS log stream(s).
 *
 * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
 *
 * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;
/**
 * Container name.
 *
 * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;
/**
 * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.
 *
 * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;
/**
 * The container runtime managing this container.
 *
 * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;
/**
 * Name of the image the container was built on.
 *
 * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;
/**
 * Container image tag.
 *
 * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;
/**
 * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).
 *
 * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;
/**
 * A unique identifier representing the device.
 *
 * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
 *
 * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;
/**
 * The model identifier for the device.
 *
 * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.
 *
 * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;
/**
 * The marketing name for the device model.
 *
 * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.
 *
 * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;
/**
 * The name of the single function that this runtime instance executes.
 *
 * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).
 *
 * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;
/**
* The unique ID of the single function that this runtime instance executes.
*
* Note: Depending on the cloud provider, use:

* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
Take care not to use the &#34;invoked ARN&#34; directly but replace any
[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple
different aliases.
* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)
* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).

On some providers, it may not be possible to determine the full ID at startup,
which is why this field cannot be made required. For example, on AWS the account ID
part of the ARN is not available without calling another AWS API
which may be deemed too slow for a short-running lambda function.
As an alternative, consider setting `faas.id` as a span attribute instead.
*
* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
*/
var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;
/**
* The immutable version of the function being executed.
*
* Note: Depending on the cloud provider and platform, use:

* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)
  (an integer represented as a decimal string).
* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)
  (i.e., the function name plus the revision suffix).
* **Google Cloud Functions:** The value of the
  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).
* **Azure Functions:** Not applicable. Do not set this attribute.
*
* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
*/
var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;
/**
 * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
 *
 * Note: * **AWS Lambda:** Use the (full) log stream name.
 *
 * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;
/**
 * The amount of memory available to the serverless function in MiB.
 *
 * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.
 *
 * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;
/**
 * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.
 *
 * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_ID = TMP_HOST_ID;
/**
 * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
 *
 * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;
/**
 * Type of host. For Cloud, this must be the machine type.
 *
 * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;
/**
 * Name of the VM image or OS install the host was instantiated from.
 *
 * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;
/**
 * VM image ID. For Cloud, this value is from the provider.
 *
 * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;
/**
 * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).
 *
 * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;
/**
 * The name of the cluster.
 *
 * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;
/**
 * The name of the Node.
 *
 * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;
/**
 * The UID of the Node.
 *
 * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;
/**
 * The name of the namespace that the pod is running in.
 *
 * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;
/**
 * The UID of the Pod.
 *
 * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;
/**
 * The name of the Pod.
 *
 * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;
/**
 * The name of the Container in a Pod template.
 *
 * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;
/**
 * The UID of the ReplicaSet.
 *
 * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;
/**
 * The name of the ReplicaSet.
 *
 * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;
/**
 * The UID of the Deployment.
 *
 * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;
/**
 * The name of the Deployment.
 *
 * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;
/**
 * The UID of the StatefulSet.
 *
 * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;
/**
 * The name of the StatefulSet.
 *
 * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;
/**
 * The UID of the DaemonSet.
 *
 * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;
/**
 * The name of the DaemonSet.
 *
 * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;
/**
 * The UID of the Job.
 *
 * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;
/**
 * The name of the Job.
 *
 * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;
/**
 * The UID of the CronJob.
 *
 * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;
/**
 * The name of the CronJob.
 *
 * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;
/**
 * The operating system type.
 *
 * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;
/**
 * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.
 *
 * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;
/**
 * Human readable operating system name.
 *
 * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_OS_NAME = TMP_OS_NAME;
/**
 * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).
 *
 * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;
/**
 * Process identifier (PID).
 *
 * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;
/**
 * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.
 *
 * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;
/**
 * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.
 *
 * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;
/**
 * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.
 *
 * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;
/**
 * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.
 *
 * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;
/**
 * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.
 *
 * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;
/**
 * The username of the user that owns the process.
 *
 * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;
/**
 * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.
 *
 * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;
/**
 * The version of the runtime of this process, as returned by the runtime without modification.
 *
 * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;
/**
 * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
 *
 * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;
/**
 * Logical name of the service.
 *
 * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
 *
 * @deprecated Use ATTR_SERVICE_NAME.
 */
var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;
/**
 * A namespace for `service.name`.
 *
 * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
 *
 * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;
/**
 * The string ID of the service instance.
 *
 * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).
 *
 * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;
/**
 * The version string of the service API or implementation.
 *
 * @deprecated Use ATTR_SERVICE_VERSION.
 */
var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;
/**
 * The name of the telemetry SDK as defined above.
 *
 * @deprecated Use ATTR_TELEMETRY_SDK_NAME.
 */
var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.
 */
var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;
/**
 * The version string of the telemetry SDK.
 *
 * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.
 */
var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;
/**
 * The version string of the auto instrumentation agent, if used.
 *
 * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;
/**
 * The name of the web engine.
 *
 * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;
/**
 * The version of the web engine.
 *
 * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;
/**
 * Additional description of the web engine (e.g. detailed version and edition information).
 *
 * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;
/**
 * Create exported Value Map for SemanticResourceAttributes values
 * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification
 */
var SemanticResourceAttributes = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_CLOUD_PROVIDER,
    TMP_CLOUD_ACCOUNT_ID,
    TMP_CLOUD_REGION,
    TMP_CLOUD_AVAILABILITY_ZONE,
    TMP_CLOUD_PLATFORM,
    TMP_AWS_ECS_CONTAINER_ARN,
    TMP_AWS_ECS_CLUSTER_ARN,
    TMP_AWS_ECS_LAUNCHTYPE,
    TMP_AWS_ECS_TASK_ARN,
    TMP_AWS_ECS_TASK_FAMILY,
    TMP_AWS_ECS_TASK_REVISION,
    TMP_AWS_EKS_CLUSTER_ARN,
    TMP_AWS_LOG_GROUP_NAMES,
    TMP_AWS_LOG_GROUP_ARNS,
    TMP_AWS_LOG_STREAM_NAMES,
    TMP_AWS_LOG_STREAM_ARNS,
    TMP_CONTAINER_NAME,
    TMP_CONTAINER_ID,
    TMP_CONTAINER_RUNTIME,
    TMP_CONTAINER_IMAGE_NAME,
    TMP_CONTAINER_IMAGE_TAG,
    TMP_DEPLOYMENT_ENVIRONMENT,
    TMP_DEVICE_ID,
    TMP_DEVICE_MODEL_IDENTIFIER,
    TMP_DEVICE_MODEL_NAME,
    TMP_FAAS_NAME,
    TMP_FAAS_ID,
    TMP_FAAS_VERSION,
    TMP_FAAS_INSTANCE,
    TMP_FAAS_MAX_MEMORY,
    TMP_HOST_ID,
    TMP_HOST_NAME,
    TMP_HOST_TYPE,
    TMP_HOST_ARCH,
    TMP_HOST_IMAGE_NAME,
    TMP_HOST_IMAGE_ID,
    TMP_HOST_IMAGE_VERSION,
    TMP_K8S_CLUSTER_NAME,
    TMP_K8S_NODE_NAME,
    TMP_K8S_NODE_UID,
    TMP_K8S_NAMESPACE_NAME,
    TMP_K8S_POD_UID,
    TMP_K8S_POD_NAME,
    TMP_K8S_CONTAINER_NAME,
    TMP_K8S_REPLICASET_UID,
    TMP_K8S_REPLICASET_NAME,
    TMP_K8S_DEPLOYMENT_UID,
    TMP_K8S_DEPLOYMENT_NAME,
    TMP_K8S_STATEFULSET_UID,
    TMP_K8S_STATEFULSET_NAME,
    TMP_K8S_DAEMONSET_UID,
    TMP_K8S_DAEMONSET_NAME,
    TMP_K8S_JOB_UID,
    TMP_K8S_JOB_NAME,
    TMP_K8S_CRONJOB_UID,
    TMP_K8S_CRONJOB_NAME,
    TMP_OS_TYPE,
    TMP_OS_DESCRIPTION,
    TMP_OS_NAME,
    TMP_OS_VERSION,
    TMP_PROCESS_PID,
    TMP_PROCESS_EXECUTABLE_NAME,
    TMP_PROCESS_EXECUTABLE_PATH,
    TMP_PROCESS_COMMAND,
    TMP_PROCESS_COMMAND_LINE,
    TMP_PROCESS_COMMAND_ARGS,
    TMP_PROCESS_OWNER,
    TMP_PROCESS_RUNTIME_NAME,
    TMP_PROCESS_RUNTIME_VERSION,
    TMP_PROCESS_RUNTIME_DESCRIPTION,
    TMP_SERVICE_NAME,
    TMP_SERVICE_NAMESPACE,
    TMP_SERVICE_INSTANCE_ID,
    TMP_SERVICE_VERSION,
    TMP_TELEMETRY_SDK_NAME,
    TMP_TELEMETRY_SDK_LANGUAGE,
    TMP_TELEMETRY_SDK_VERSION,
    TMP_TELEMETRY_AUTO_VERSION,
    TMP_WEBENGINE_NAME,
    TMP_WEBENGINE_VERSION,
    TMP_WEBENGINE_DESCRIPTION,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudProviderValues enum definition
 *
 * Name of the cloud provider.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';
var TMP_CLOUDPROVIDERVALUES_AWS = 'aws';
var TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';
var TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';
/**
 * Name of the cloud provider.
 *
 * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;
/**
 * Name of the cloud provider.
 *
 * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;
/**
 * Name of the cloud provider.
 *
 * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;
/**
 * Name of the cloud provider.
 *
 * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;
/**
 * The constant map of values for CloudProviderValues.
 * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.
 */
var CloudProviderValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,
    TMP_CLOUDPROVIDERVALUES_AWS,
    TMP_CLOUDPROVIDERVALUES_AZURE,
    TMP_CLOUDPROVIDERVALUES_GCP,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for CloudPlatformValues enum definition
 *
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';
var TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';
var TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';
var TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';
var TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';
var TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';
var TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';
var TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';
var TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';
var TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';
var TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';
var TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';
var TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';
var TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';
var TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';
var TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';
var TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;
/**
 * The cloud platform in use.
 *
 * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.
 *
 * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;
/**
 * The constant map of values for CloudPlatformValues.
 * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.
 */
var CloudPlatformValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,
    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,
    TMP_CLOUDPLATFORMVALUES_AWS_EC2,
    TMP_CLOUDPLATFORMVALUES_AWS_ECS,
    TMP_CLOUDPLATFORMVALUES_AWS_EKS,
    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,
    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,
    TMP_CLOUDPLATFORMVALUES_AZURE_VM,
    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,
    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,
    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,
    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,
    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,
    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,
    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,
    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,
    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for AwsEcsLaunchtypeValues enum definition
 *
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';
var TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';
/**
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 *
 * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;
/**
 * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.
 *
 * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;
/**
 * The constant map of values for AwsEcsLaunchtypeValues.
 * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.
 */
var AwsEcsLaunchtypeValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_AWSECSLAUNCHTYPEVALUES_EC2,
    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HostArchValues enum definition
 *
 * The CPU architecture the host system is running on.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_HOSTARCHVALUES_AMD64 = 'amd64';
var TMP_HOSTARCHVALUES_ARM32 = 'arm32';
var TMP_HOSTARCHVALUES_ARM64 = 'arm64';
var TMP_HOSTARCHVALUES_IA64 = 'ia64';
var TMP_HOSTARCHVALUES_PPC32 = 'ppc32';
var TMP_HOSTARCHVALUES_PPC64 = 'ppc64';
var TMP_HOSTARCHVALUES_X86 = 'x86';
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;
/**
 * The CPU architecture the host system is running on.
 *
 * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;
/**
 * The constant map of values for HostArchValues.
 * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.
 */
var HostArchValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_HOSTARCHVALUES_AMD64,
    TMP_HOSTARCHVALUES_ARM32,
    TMP_HOSTARCHVALUES_ARM64,
    TMP_HOSTARCHVALUES_IA64,
    TMP_HOSTARCHVALUES_PPC32,
    TMP_HOSTARCHVALUES_PPC64,
    TMP_HOSTARCHVALUES_X86,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for OsTypeValues enum definition
 *
 * The operating system type.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_OSTYPEVALUES_WINDOWS = 'windows';
var TMP_OSTYPEVALUES_LINUX = 'linux';
var TMP_OSTYPEVALUES_DARWIN = 'darwin';
var TMP_OSTYPEVALUES_FREEBSD = 'freebsd';
var TMP_OSTYPEVALUES_NETBSD = 'netbsd';
var TMP_OSTYPEVALUES_OPENBSD = 'openbsd';
var TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';
var TMP_OSTYPEVALUES_HPUX = 'hpux';
var TMP_OSTYPEVALUES_AIX = 'aix';
var TMP_OSTYPEVALUES_SOLARIS = 'solaris';
var TMP_OSTYPEVALUES_Z_OS = 'z_os';
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;
/**
 * The operating system type.
 *
 * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;
/**
 * The constant map of values for OsTypeValues.
 * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.
 */
var OsTypeValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_OSTYPEVALUES_WINDOWS,
    TMP_OSTYPEVALUES_LINUX,
    TMP_OSTYPEVALUES_DARWIN,
    TMP_OSTYPEVALUES_FREEBSD,
    TMP_OSTYPEVALUES_NETBSD,
    TMP_OSTYPEVALUES_OPENBSD,
    TMP_OSTYPEVALUES_DRAGONFLYBSD,
    TMP_OSTYPEVALUES_HPUX,
    TMP_OSTYPEVALUES_AIX,
    TMP_OSTYPEVALUES_SOLARIS,
    TMP_OSTYPEVALUES_Z_OS,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for TelemetrySdkLanguageValues enum definition
 *
 * The language of the telemetry SDK.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';
var TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';
var TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';
var TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';
var TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';
var TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';
var TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';
var TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';
var TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';
var TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.
 */
var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.
 */
var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.
 */
var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.
 */
var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.
 */
var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.
 */
var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.
 */
var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.
 */
var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.
 */
var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;
/**
 * The language of the telemetry SDK.
 *
 * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.
 */
var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;
/**
 * The constant map of values for TelemetrySdkLanguageValues.
 * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.
 */
var TelemetrySdkLanguageValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,
    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,
    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,
    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,
    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,
    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,
    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,
    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,
    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,
    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,
]);
//# sourceMappingURL=SemanticResourceAttributes.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED),
/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED),
/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED),
/* harmony export */   ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED: () => (/* binding */ ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED),
/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED),
/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER),
/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER),
/* harmony export */   ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED: () => (/* binding */ ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED),
/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE),
/* harmony export */   ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS: () => (/* binding */ ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS),
/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT),
/* harmony export */   ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE: () => (/* binding */ ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE),
/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_POLICY: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_POLICY),
/* harmony export */   ATTR_ASPNETCORE_RATE_LIMITING_RESULT: () => (/* binding */ ATTR_ASPNETCORE_RATE_LIMITING_RESULT),
/* harmony export */   ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED: () => (/* binding */ ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED),
/* harmony export */   ATTR_ASPNETCORE_ROUTING_IS_FALLBACK: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_IS_FALLBACK),
/* harmony export */   ATTR_ASPNETCORE_ROUTING_MATCH_STATUS: () => (/* binding */ ATTR_ASPNETCORE_ROUTING_MATCH_STATUS),
/* harmony export */   ATTR_CLIENT_ADDRESS: () => (/* binding */ ATTR_CLIENT_ADDRESS),
/* harmony export */   ATTR_CLIENT_PORT: () => (/* binding */ ATTR_CLIENT_PORT),
/* harmony export */   ATTR_DOTNET_GC_HEAP_GENERATION: () => (/* binding */ ATTR_DOTNET_GC_HEAP_GENERATION),
/* harmony export */   ATTR_ERROR_TYPE: () => (/* binding */ ATTR_ERROR_TYPE),
/* harmony export */   ATTR_EXCEPTION_ESCAPED: () => (/* binding */ ATTR_EXCEPTION_ESCAPED),
/* harmony export */   ATTR_EXCEPTION_MESSAGE: () => (/* binding */ ATTR_EXCEPTION_MESSAGE),
/* harmony export */   ATTR_EXCEPTION_STACKTRACE: () => (/* binding */ ATTR_EXCEPTION_STACKTRACE),
/* harmony export */   ATTR_EXCEPTION_TYPE: () => (/* binding */ ATTR_EXCEPTION_TYPE),
/* harmony export */   ATTR_HTTP_REQUEST_HEADER: () => (/* binding */ ATTR_HTTP_REQUEST_HEADER),
/* harmony export */   ATTR_HTTP_REQUEST_METHOD: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD),
/* harmony export */   ATTR_HTTP_REQUEST_METHOD_ORIGINAL: () => (/* binding */ ATTR_HTTP_REQUEST_METHOD_ORIGINAL),
/* harmony export */   ATTR_HTTP_REQUEST_RESEND_COUNT: () => (/* binding */ ATTR_HTTP_REQUEST_RESEND_COUNT),
/* harmony export */   ATTR_HTTP_RESPONSE_HEADER: () => (/* binding */ ATTR_HTTP_RESPONSE_HEADER),
/* harmony export */   ATTR_HTTP_RESPONSE_STATUS_CODE: () => (/* binding */ ATTR_HTTP_RESPONSE_STATUS_CODE),
/* harmony export */   ATTR_HTTP_ROUTE: () => (/* binding */ ATTR_HTTP_ROUTE),
/* harmony export */   ATTR_JVM_GC_ACTION: () => (/* binding */ ATTR_JVM_GC_ACTION),
/* harmony export */   ATTR_JVM_GC_NAME: () => (/* binding */ ATTR_JVM_GC_NAME),
/* harmony export */   ATTR_JVM_MEMORY_POOL_NAME: () => (/* binding */ ATTR_JVM_MEMORY_POOL_NAME),
/* harmony export */   ATTR_JVM_MEMORY_TYPE: () => (/* binding */ ATTR_JVM_MEMORY_TYPE),
/* harmony export */   ATTR_JVM_THREAD_DAEMON: () => (/* binding */ ATTR_JVM_THREAD_DAEMON),
/* harmony export */   ATTR_JVM_THREAD_STATE: () => (/* binding */ ATTR_JVM_THREAD_STATE),
/* harmony export */   ATTR_NETWORK_LOCAL_ADDRESS: () => (/* binding */ ATTR_NETWORK_LOCAL_ADDRESS),
/* harmony export */   ATTR_NETWORK_LOCAL_PORT: () => (/* binding */ ATTR_NETWORK_LOCAL_PORT),
/* harmony export */   ATTR_NETWORK_PEER_ADDRESS: () => (/* binding */ ATTR_NETWORK_PEER_ADDRESS),
/* harmony export */   ATTR_NETWORK_PEER_PORT: () => (/* binding */ ATTR_NETWORK_PEER_PORT),
/* harmony export */   ATTR_NETWORK_PROTOCOL_NAME: () => (/* binding */ ATTR_NETWORK_PROTOCOL_NAME),
/* harmony export */   ATTR_NETWORK_PROTOCOL_VERSION: () => (/* binding */ ATTR_NETWORK_PROTOCOL_VERSION),
/* harmony export */   ATTR_NETWORK_TRANSPORT: () => (/* binding */ ATTR_NETWORK_TRANSPORT),
/* harmony export */   ATTR_NETWORK_TYPE: () => (/* binding */ ATTR_NETWORK_TYPE),
/* harmony export */   ATTR_OTEL_SCOPE_NAME: () => (/* binding */ ATTR_OTEL_SCOPE_NAME),
/* harmony export */   ATTR_OTEL_SCOPE_VERSION: () => (/* binding */ ATTR_OTEL_SCOPE_VERSION),
/* harmony export */   ATTR_OTEL_STATUS_CODE: () => (/* binding */ ATTR_OTEL_STATUS_CODE),
/* harmony export */   ATTR_OTEL_STATUS_DESCRIPTION: () => (/* binding */ ATTR_OTEL_STATUS_DESCRIPTION),
/* harmony export */   ATTR_SERVER_ADDRESS: () => (/* binding */ ATTR_SERVER_ADDRESS),
/* harmony export */   ATTR_SERVER_PORT: () => (/* binding */ ATTR_SERVER_PORT),
/* harmony export */   ATTR_SERVICE_NAME: () => (/* binding */ ATTR_SERVICE_NAME),
/* harmony export */   ATTR_SERVICE_VERSION: () => (/* binding */ ATTR_SERVICE_VERSION),
/* harmony export */   ATTR_SIGNALR_CONNECTION_STATUS: () => (/* binding */ ATTR_SIGNALR_CONNECTION_STATUS),
/* harmony export */   ATTR_SIGNALR_TRANSPORT: () => (/* binding */ ATTR_SIGNALR_TRANSPORT),
/* harmony export */   ATTR_TELEMETRY_SDK_LANGUAGE: () => (/* binding */ ATTR_TELEMETRY_SDK_LANGUAGE),
/* harmony export */   ATTR_TELEMETRY_SDK_NAME: () => (/* binding */ ATTR_TELEMETRY_SDK_NAME),
/* harmony export */   ATTR_TELEMETRY_SDK_VERSION: () => (/* binding */ ATTR_TELEMETRY_SDK_VERSION),
/* harmony export */   ATTR_URL_FRAGMENT: () => (/* binding */ ATTR_URL_FRAGMENT),
/* harmony export */   ATTR_URL_FULL: () => (/* binding */ ATTR_URL_FULL),
/* harmony export */   ATTR_URL_PATH: () => (/* binding */ ATTR_URL_PATH),
/* harmony export */   ATTR_URL_QUERY: () => (/* binding */ ATTR_URL_QUERY),
/* harmony export */   ATTR_URL_SCHEME: () => (/* binding */ ATTR_URL_SCHEME),
/* harmony export */   ATTR_USER_AGENT_ORIGINAL: () => (/* binding */ ATTR_USER_AGENT_ORIGINAL),
/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN0: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN0),
/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN1: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN1),
/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_GEN2: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_GEN2),
/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_LOH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_LOH),
/* harmony export */   DOTNET_GC_HEAP_GENERATION_VALUE_POH: () => (/* binding */ DOTNET_GC_HEAP_GENERATION_VALUE_POH),
/* harmony export */   ERROR_TYPE_VALUE_OTHER: () => (/* binding */ ERROR_TYPE_VALUE_OTHER),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_CONNECT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_CONNECT),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_DELETE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_DELETE),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_GET: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_GET),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_HEAD: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_HEAD),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OPTIONS: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OPTIONS),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_OTHER: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_OTHER),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PATCH: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PATCH),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_POST: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_POST),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_PUT: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_PUT),
/* harmony export */   HTTP_REQUEST_METHOD_VALUE_TRACE: () => (/* binding */ HTTP_REQUEST_METHOD_VALUE_TRACE),
/* harmony export */   JVM_MEMORY_TYPE_VALUE_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_HEAP),
/* harmony export */   JVM_MEMORY_TYPE_VALUE_NON_HEAP: () => (/* binding */ JVM_MEMORY_TYPE_VALUE_NON_HEAP),
/* harmony export */   JVM_THREAD_STATE_VALUE_BLOCKED: () => (/* binding */ JVM_THREAD_STATE_VALUE_BLOCKED),
/* harmony export */   JVM_THREAD_STATE_VALUE_NEW: () => (/* binding */ JVM_THREAD_STATE_VALUE_NEW),
/* harmony export */   JVM_THREAD_STATE_VALUE_RUNNABLE: () => (/* binding */ JVM_THREAD_STATE_VALUE_RUNNABLE),
/* harmony export */   JVM_THREAD_STATE_VALUE_TERMINATED: () => (/* binding */ JVM_THREAD_STATE_VALUE_TERMINATED),
/* harmony export */   JVM_THREAD_STATE_VALUE_TIMED_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_TIMED_WAITING),
/* harmony export */   JVM_THREAD_STATE_VALUE_WAITING: () => (/* binding */ JVM_THREAD_STATE_VALUE_WAITING),
/* harmony export */   NETWORK_TRANSPORT_VALUE_PIPE: () => (/* binding */ NETWORK_TRANSPORT_VALUE_PIPE),
/* harmony export */   NETWORK_TRANSPORT_VALUE_QUIC: () => (/* binding */ NETWORK_TRANSPORT_VALUE_QUIC),
/* harmony export */   NETWORK_TRANSPORT_VALUE_TCP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_TCP),
/* harmony export */   NETWORK_TRANSPORT_VALUE_UDP: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UDP),
/* harmony export */   NETWORK_TRANSPORT_VALUE_UNIX: () => (/* binding */ NETWORK_TRANSPORT_VALUE_UNIX),
/* harmony export */   NETWORK_TYPE_VALUE_IPV4: () => (/* binding */ NETWORK_TYPE_VALUE_IPV4),
/* harmony export */   NETWORK_TYPE_VALUE_IPV6: () => (/* binding */ NETWORK_TYPE_VALUE_IPV6),
/* harmony export */   OTEL_STATUS_CODE_VALUE_ERROR: () => (/* binding */ OTEL_STATUS_CODE_VALUE_ERROR),
/* harmony export */   OTEL_STATUS_CODE_VALUE_OK: () => (/* binding */ OTEL_STATUS_CODE_VALUE_OK),
/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN),
/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE),
/* harmony export */   SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT: () => (/* binding */ SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT),
/* harmony export */   SIGNALR_TRANSPORT_VALUE_LONG_POLLING: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_LONG_POLLING),
/* harmony export */   SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS),
/* harmony export */   SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS: () => (/* binding */ SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_CPP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_CPP),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_GO: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_GO),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_JAVA: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_JAVA),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PHP: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PHP),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUBY: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUBY),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_RUST: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_RUST),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT),
/* harmony export */   TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS: () => (/* binding */ TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS)
/* harmony export */ });
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2
//----------------------------------------------------------------------------------------------------------
/**
 * ASP.NET Core exception middleware handling result
 *
 * @example handled
 * @example unhandled
 */
var ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';
/**
  * Enum value "aborted" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.
  */
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = "aborted";
/**
  * Enum value "handled" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.
  */
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = "handled";
/**
  * Enum value "skipped" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.
  */
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = "skipped";
/**
  * Enum value "unhandled" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.
  */
var ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = "unhandled";
/**
 * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.
 *
 * @example Contoso.MyHandler
 */
var ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';
/**
 * Rate limiting policy name.
 *
 * @example fixed
 * @example sliding
 * @example token
 */
var ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';
/**
 * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason
 *
 * @example acquired
 * @example request_canceled
 */
var ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';
/**
  * Enum value "acquired" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.
  */
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = "acquired";
/**
  * Enum value "endpoint_limiter" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.
  */
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = "endpoint_limiter";
/**
  * Enum value "global_limiter" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.
  */
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = "global_limiter";
/**
  * Enum value "request_canceled" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.
  */
var ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = "request_canceled";
/**
 * Flag indicating if request was handled by the application pipeline.
 *
 * @example true
 */
var ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';
/**
 * A value that indicates whether the matched route is a fallback route.
 *
 * @example true
 */
var ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';
/**
 * Match result - success or failure
 *
 * @example success
 * @example failure
 */
var ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';
/**
  * Enum value "failure" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.
  */
var ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = "failure";
/**
  * Enum value "success" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.
  */
var ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = "success";
/**
 * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
 *
 * @example client.example.com
 * @example 10.1.2.80
 * @example /tmp/my.sock
 *
 * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.
 */
var ATTR_CLIENT_ADDRESS = 'client.address';
/**
 * Client port number.
 *
 * @example 65123
 *
 * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.
 */
var ATTR_CLIENT_PORT = 'client.port';
/**
 * Name of the garbage collector managed heap generation.
 *
 * @example gen0
 * @example gen1
 * @example gen2
 */
var ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';
/**
  * Enum value "gen0" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.
  */
var DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = "gen0";
/**
  * Enum value "gen1" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.
  */
var DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = "gen1";
/**
  * Enum value "gen2" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.
  */
var DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = "gen2";
/**
  * Enum value "loh" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.
  */
var DOTNET_GC_HEAP_GENERATION_VALUE_LOH = "loh";
/**
  * Enum value "poh" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.
  */
var DOTNET_GC_HEAP_GENERATION_VALUE_POH = "poh";
/**
 * Describes a class of error the operation ended with.
 *
 * @example timeout
 * @example java.net.UnknownHostException
 * @example server_certificate_invalid
 * @example 500
 *
 * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.
 *
 * When `error.type` is set to a type (e.g., an exception type), its
 * canonical class name identifying the type within the artifact **SHOULD** be used.
 *
 * Instrumentations **SHOULD** document the list of errors they report.
 *
 * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.
 * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
 * should be prepared for `error.type` to have high cardinality at query time when no
 * additional filters are applied.
 *
 * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.
 *
 * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
 * it's **RECOMMENDED** to:
 *
 *   - Use a domain-specific attribute
 *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.
 */
var ATTR_ERROR_TYPE = 'error.type';
/**
  * Enum value "_OTHER" for attribute {@link ATTR_ERROR_TYPE}.
  */
var ERROR_TYPE_VALUE_OTHER = "_OTHER";
/**
 * Indicates that the exception is escaping the scope of the span.
 *
 * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.
 */
var ATTR_EXCEPTION_ESCAPED = 'exception.escaped';
/**
 * The exception message.
 *
 * @example Division by zero
 * @example Can't convert 'int' object to str implicitly
 */
var ATTR_EXCEPTION_MESSAGE = 'exception.message';
/**
 * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
 *
 * @example "Exception in thread "main" java.lang.RuntimeException: Test exception\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\n"
 */
var ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';
/**
 * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
 *
 * @example java.net.ConnectException
 * @example OSError
 */
var ATTR_EXCEPTION_TYPE = 'exception.type';
/**
 * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
 *
 * @example http.request.header.content-type=["application/json"]
 * @example http.request.header.x-forwarded-for=["1.2.3.4", "1.2.3.5"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.
 * The `User-Agent` header is already captured in the `user_agent.original` attribute. Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.
 * The attribute value **MUST** consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.
 */
var ATTR_HTTP_REQUEST_HEADER = function (key) { return "http.request.header.".concat(key); };
/**
 * HTTP request method.
 *
 * @example GET
 * @example POST
 * @example HEAD
 *
 * @note HTTP request method value **SHOULD** be "known" to the instrumentation.
 * By default, this convention defines "known" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)
 * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).
 *
 * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.
 *
 * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override
 * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named
 * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
 * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).
 *
 * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.
 * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.
 * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.
 */
var ATTR_HTTP_REQUEST_METHOD = 'http.request.method';
/**
  * Enum value "_OTHER" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_OTHER = "_OTHER";
/**
  * Enum value "CONNECT" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_CONNECT = "CONNECT";
/**
  * Enum value "DELETE" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_DELETE = "DELETE";
/**
  * Enum value "GET" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_GET = "GET";
/**
  * Enum value "HEAD" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_HEAD = "HEAD";
/**
  * Enum value "OPTIONS" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_OPTIONS = "OPTIONS";
/**
  * Enum value "PATCH" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_PATCH = "PATCH";
/**
  * Enum value "POST" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_POST = "POST";
/**
  * Enum value "PUT" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_PUT = "PUT";
/**
  * Enum value "TRACE" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.
  */
var HTTP_REQUEST_METHOD_VALUE_TRACE = "TRACE";
/**
 * Original HTTP method sent by the client in the request line.
 *
 * @example GeT
 * @example ACL
 * @example foo
 */
var ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';
/**
 * The ordinal number of request resending attempt (for any reason, including redirects).
 *
 * @example 3
 *
 * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
 */
var ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';
/**
 * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.
 *
 * @example http.response.header.content-type=["application/json"]
 * @example http.response.header.my-custom-header=["abc", "def"]
 *
 * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.
 * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.
 * The attribute value **MUST** consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.
 */
var ATTR_HTTP_RESPONSE_HEADER = function (key) { return "http.response.header.".concat(key); };
/**
 * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).
 *
 * @example 200
 */
var ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';
/**
 * The matched route, that is, the path template in the format used by the respective server framework.
 *
 * @example /users/:userID?
 * @example {controller}/{action}/{id?}
 *
 * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
 * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.
 */
var ATTR_HTTP_ROUTE = 'http.route';
/**
 * Name of the garbage collector action.
 *
 * @example end of minor GC
 * @example end of major GC
 *
 * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).
 */
var ATTR_JVM_GC_ACTION = 'jvm.gc.action';
/**
 * Name of the garbage collector.
 *
 * @example G1 Young Generation
 * @example G1 Old Generation
 *
 * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).
 */
var ATTR_JVM_GC_NAME = 'jvm.gc.name';
/**
 * Name of the memory pool.
 *
 * @example G1 Old Gen
 * @example G1 Eden space
 * @example G1 Survivor Space
 *
 * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).
 */
var ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';
/**
 * The type of memory.
 *
 * @example heap
 * @example non_heap
 */
var ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';
/**
  * Enum value "heap" for attribute {@link ATTR_JVM_MEMORY_TYPE}.
  */
var JVM_MEMORY_TYPE_VALUE_HEAP = "heap";
/**
  * Enum value "non_heap" for attribute {@link ATTR_JVM_MEMORY_TYPE}.
  */
var JVM_MEMORY_TYPE_VALUE_NON_HEAP = "non_heap";
/**
 * Whether the thread is daemon or not.
 */
var ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';
/**
 * State of the thread.
 *
 * @example runnable
 * @example blocked
 */
var ATTR_JVM_THREAD_STATE = 'jvm.thread.state';
/**
  * Enum value "blocked" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_BLOCKED = "blocked";
/**
  * Enum value "new" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_NEW = "new";
/**
  * Enum value "runnable" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_RUNNABLE = "runnable";
/**
  * Enum value "terminated" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_TERMINATED = "terminated";
/**
  * Enum value "timed_waiting" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_TIMED_WAITING = "timed_waiting";
/**
  * Enum value "waiting" for attribute {@link ATTR_JVM_THREAD_STATE}.
  */
var JVM_THREAD_STATE_VALUE_WAITING = "waiting";
/**
 * Local address of the network connection - IP address or Unix domain socket name.
 *
 * @example 10.1.2.80
 * @example /tmp/my.sock
 */
var ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';
/**
 * Local port number of the network connection.
 *
 * @example 65123
 */
var ATTR_NETWORK_LOCAL_PORT = 'network.local.port';
/**
 * Peer address of the network connection - IP address or Unix domain socket name.
 *
 * @example 10.1.2.80
 * @example /tmp/my.sock
 */
var ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';
/**
 * Peer port number of the network connection.
 *
 * @example 65123
 */
var ATTR_NETWORK_PEER_PORT = 'network.peer.port';
/**
 * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.
 *
 * @example amqp
 * @example http
 * @example mqtt
 *
 * @note The value **SHOULD** be normalized to lowercase.
 */
var ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';
/**
 * The actual version of the protocol used for network communication.
 *
 * @example 1.1
 * @example 2
 *
 * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.
 */
var ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';
/**
 * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).
 *
 * @example tcp
 * @example udp
 *
 * @note The value **SHOULD** be normalized to lowercase.
 *
 * Consider always setting the transport when setting a port number, since
 * a port number is ambiguous without knowing the transport. For example
 * different processes could be listening on TCP port 12345 and UDP port 12345.
 */
var ATTR_NETWORK_TRANSPORT = 'network.transport';
/**
  * Enum value "pipe" for attribute {@link ATTR_NETWORK_TRANSPORT}.
  */
var NETWORK_TRANSPORT_VALUE_PIPE = "pipe";
/**
  * Enum value "quic" for attribute {@link ATTR_NETWORK_TRANSPORT}.
  */
var NETWORK_TRANSPORT_VALUE_QUIC = "quic";
/**
  * Enum value "tcp" for attribute {@link ATTR_NETWORK_TRANSPORT}.
  */
var NETWORK_TRANSPORT_VALUE_TCP = "tcp";
/**
  * Enum value "udp" for attribute {@link ATTR_NETWORK_TRANSPORT}.
  */
var NETWORK_TRANSPORT_VALUE_UDP = "udp";
/**
  * Enum value "unix" for attribute {@link ATTR_NETWORK_TRANSPORT}.
  */
var NETWORK_TRANSPORT_VALUE_UNIX = "unix";
/**
 * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.
 *
 * @example ipv4
 * @example ipv6
 *
 * @note The value **SHOULD** be normalized to lowercase.
 */
var ATTR_NETWORK_TYPE = 'network.type';
/**
  * Enum value "ipv4" for attribute {@link ATTR_NETWORK_TYPE}.
  */
var NETWORK_TYPE_VALUE_IPV4 = "ipv4";
/**
  * Enum value "ipv6" for attribute {@link ATTR_NETWORK_TYPE}.
  */
var NETWORK_TYPE_VALUE_IPV6 = "ipv6";
/**
 * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).
 *
 * @example io.opentelemetry.contrib.mongodb
 */
var ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';
/**
 * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).
 *
 * @example 1.0.0
 */
var ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';
/**
 * Name of the code, either "OK" or "ERROR". **MUST NOT** be set if the status code is UNSET.
 */
var ATTR_OTEL_STATUS_CODE = 'otel.status_code';
/**
  * Enum value "ERROR" for attribute {@link ATTR_OTEL_STATUS_CODE}.
  */
var OTEL_STATUS_CODE_VALUE_ERROR = "ERROR";
/**
  * Enum value "OK" for attribute {@link ATTR_OTEL_STATUS_CODE}.
  */
var OTEL_STATUS_CODE_VALUE_OK = "OK";
/**
 * Description of the Status if it has a value, otherwise not set.
 *
 * @example resource not found
 */
var ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';
/**
 * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
 *
 * @example example.com
 * @example 10.1.2.80
 * @example /tmp/my.sock
 *
 * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.
 */
var ATTR_SERVER_ADDRESS = 'server.address';
/**
 * Server port number.
 *
 * @example 80
 * @example 8080
 * @example 443
 *
 * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.
 */
var ATTR_SERVER_PORT = 'server.port';
/**
 * Logical name of the service.
 *
 * @example shoppingcart
 *
 * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.
 */
var ATTR_SERVICE_NAME = 'service.name';
/**
 * The version string of the service API or implementation. The format is not defined by these conventions.
 *
 * @example 2.0.0
 * @example a01dbef8a
 */
var ATTR_SERVICE_VERSION = 'service.version';
/**
 * SignalR HTTP connection closure status.
 *
 * @example app_shutdown
 * @example timeout
 */
var ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';
/**
  * Enum value "app_shutdown" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.
  */
var SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = "app_shutdown";
/**
  * Enum value "normal_closure" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.
  */
var SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = "normal_closure";
/**
  * Enum value "timeout" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.
  */
var SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = "timeout";
/**
 * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)
 *
 * @example web_sockets
 * @example long_polling
 */
var ATTR_SIGNALR_TRANSPORT = 'signalr.transport';
/**
  * Enum value "long_polling" for attribute {@link ATTR_SIGNALR_TRANSPORT}.
  */
var SIGNALR_TRANSPORT_VALUE_LONG_POLLING = "long_polling";
/**
  * Enum value "server_sent_events" for attribute {@link ATTR_SIGNALR_TRANSPORT}.
  */
var SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = "server_sent_events";
/**
  * Enum value "web_sockets" for attribute {@link ATTR_SIGNALR_TRANSPORT}.
  */
var SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = "web_sockets";
/**
 * The language of the telemetry SDK.
 */
var ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';
/**
  * Enum value "cpp" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_CPP = "cpp";
/**
  * Enum value "dotnet" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = "dotnet";
/**
  * Enum value "erlang" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = "erlang";
/**
  * Enum value "go" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_GO = "go";
/**
  * Enum value "java" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = "java";
/**
  * Enum value "nodejs" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = "nodejs";
/**
  * Enum value "php" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_PHP = "php";
/**
  * Enum value "python" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = "python";
/**
  * Enum value "ruby" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = "ruby";
/**
  * Enum value "rust" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_RUST = "rust";
/**
  * Enum value "swift" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = "swift";
/**
  * Enum value "webjs" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.
  */
var TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = "webjs";
/**
 * The name of the telemetry SDK as defined above.
 *
 * @example opentelemetry
 *
 * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.
 * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the
 * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
 * or another suitable identifier depending on the language.
 * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.
 * All custom identifiers **SHOULD** be stable across different versions of an implementation.
 */
var ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';
/**
 * The version string of the telemetry SDK.
 *
 * @example 1.2.3
 */
var ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';
/**
 * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component
 *
 * @example SemConv
 */
var ATTR_URL_FRAGMENT = 'url.fragment';
/**
 * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)
 *
 * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv
 * @example //localhost
 *
 * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment
 * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.
 *
 * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.
 * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.
 *
 * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).
 *
 * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.
 *
 *
 * Query string values for the following keys **SHOULD** be redacted by default and replaced by the
 * value `REDACTED`:
 *
 *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
 *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
 *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
 *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)
 *
 * This list is subject to change over time.
 *
 * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.
 * `https://www.example.com/path?color=blue&sig=REDACTED`.
 */
var ATTR_URL_FULL = 'url.full';
/**
 * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component
 *
 * @example /search
 *
 * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.
 */
var ATTR_URL_PATH = 'url.path';
/**
 * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component
 *
 * @example q=OpenTelemetry
 *
 * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.
 *
 *
 * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:
 *
 *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
 *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)
 *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)
 *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)
 *
 * This list is subject to change over time.
 *
 * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.
 * `q=OpenTelemetry&sig=REDACTED`.
 */
var ATTR_URL_QUERY = 'url.query';
/**
 * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
 *
 * @example https
 * @example ftp
 * @example telnet
 */
var ATTR_URL_SCHEME = 'url.scheme';
/**
 * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.
 *
 * @example CERN-LineMode/2.15 libwww/2.17b3
 * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1
 * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2
 */
var ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';
//# sourceMappingURL=stable_attributes.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ALL),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ANY),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ONE),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_THREE),
/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_TWO),
/* harmony export */   DBSYSTEMVALUES_ADABAS: () => (/* binding */ DBSYSTEMVALUES_ADABAS),
/* harmony export */   DBSYSTEMVALUES_CACHE: () => (/* binding */ DBSYSTEMVALUES_CACHE),
/* harmony export */   DBSYSTEMVALUES_CASSANDRA: () => (/* binding */ DBSYSTEMVALUES_CASSANDRA),
/* harmony export */   DBSYSTEMVALUES_CLOUDSCAPE: () => (/* binding */ DBSYSTEMVALUES_CLOUDSCAPE),
/* harmony export */   DBSYSTEMVALUES_COCKROACHDB: () => (/* binding */ DBSYSTEMVALUES_COCKROACHDB),
/* harmony export */   DBSYSTEMVALUES_COLDFUSION: () => (/* binding */ DBSYSTEMVALUES_COLDFUSION),
/* harmony export */   DBSYSTEMVALUES_COSMOSDB: () => (/* binding */ DBSYSTEMVALUES_COSMOSDB),
/* harmony export */   DBSYSTEMVALUES_COUCHBASE: () => (/* binding */ DBSYSTEMVALUES_COUCHBASE),
/* harmony export */   DBSYSTEMVALUES_COUCHDB: () => (/* binding */ DBSYSTEMVALUES_COUCHDB),
/* harmony export */   DBSYSTEMVALUES_DB2: () => (/* binding */ DBSYSTEMVALUES_DB2),
/* harmony export */   DBSYSTEMVALUES_DERBY: () => (/* binding */ DBSYSTEMVALUES_DERBY),
/* harmony export */   DBSYSTEMVALUES_DYNAMODB: () => (/* binding */ DBSYSTEMVALUES_DYNAMODB),
/* harmony export */   DBSYSTEMVALUES_EDB: () => (/* binding */ DBSYSTEMVALUES_EDB),
/* harmony export */   DBSYSTEMVALUES_ELASTICSEARCH: () => (/* binding */ DBSYSTEMVALUES_ELASTICSEARCH),
/* harmony export */   DBSYSTEMVALUES_FILEMAKER: () => (/* binding */ DBSYSTEMVALUES_FILEMAKER),
/* harmony export */   DBSYSTEMVALUES_FIREBIRD: () => (/* binding */ DBSYSTEMVALUES_FIREBIRD),
/* harmony export */   DBSYSTEMVALUES_FIRSTSQL: () => (/* binding */ DBSYSTEMVALUES_FIRSTSQL),
/* harmony export */   DBSYSTEMVALUES_GEODE: () => (/* binding */ DBSYSTEMVALUES_GEODE),
/* harmony export */   DBSYSTEMVALUES_H2: () => (/* binding */ DBSYSTEMVALUES_H2),
/* harmony export */   DBSYSTEMVALUES_HANADB: () => (/* binding */ DBSYSTEMVALUES_HANADB),
/* harmony export */   DBSYSTEMVALUES_HBASE: () => (/* binding */ DBSYSTEMVALUES_HBASE),
/* harmony export */   DBSYSTEMVALUES_HIVE: () => (/* binding */ DBSYSTEMVALUES_HIVE),
/* harmony export */   DBSYSTEMVALUES_HSQLDB: () => (/* binding */ DBSYSTEMVALUES_HSQLDB),
/* harmony export */   DBSYSTEMVALUES_INFORMIX: () => (/* binding */ DBSYSTEMVALUES_INFORMIX),
/* harmony export */   DBSYSTEMVALUES_INGRES: () => (/* binding */ DBSYSTEMVALUES_INGRES),
/* harmony export */   DBSYSTEMVALUES_INSTANTDB: () => (/* binding */ DBSYSTEMVALUES_INSTANTDB),
/* harmony export */   DBSYSTEMVALUES_INTERBASE: () => (/* binding */ DBSYSTEMVALUES_INTERBASE),
/* harmony export */   DBSYSTEMVALUES_MARIADB: () => (/* binding */ DBSYSTEMVALUES_MARIADB),
/* harmony export */   DBSYSTEMVALUES_MAXDB: () => (/* binding */ DBSYSTEMVALUES_MAXDB),
/* harmony export */   DBSYSTEMVALUES_MEMCACHED: () => (/* binding */ DBSYSTEMVALUES_MEMCACHED),
/* harmony export */   DBSYSTEMVALUES_MONGODB: () => (/* binding */ DBSYSTEMVALUES_MONGODB),
/* harmony export */   DBSYSTEMVALUES_MSSQL: () => (/* binding */ DBSYSTEMVALUES_MSSQL),
/* harmony export */   DBSYSTEMVALUES_MYSQL: () => (/* binding */ DBSYSTEMVALUES_MYSQL),
/* harmony export */   DBSYSTEMVALUES_NEO4J: () => (/* binding */ DBSYSTEMVALUES_NEO4J),
/* harmony export */   DBSYSTEMVALUES_NETEZZA: () => (/* binding */ DBSYSTEMVALUES_NETEZZA),
/* harmony export */   DBSYSTEMVALUES_ORACLE: () => (/* binding */ DBSYSTEMVALUES_ORACLE),
/* harmony export */   DBSYSTEMVALUES_OTHER_SQL: () => (/* binding */ DBSYSTEMVALUES_OTHER_SQL),
/* harmony export */   DBSYSTEMVALUES_PERVASIVE: () => (/* binding */ DBSYSTEMVALUES_PERVASIVE),
/* harmony export */   DBSYSTEMVALUES_POINTBASE: () => (/* binding */ DBSYSTEMVALUES_POINTBASE),
/* harmony export */   DBSYSTEMVALUES_POSTGRESQL: () => (/* binding */ DBSYSTEMVALUES_POSTGRESQL),
/* harmony export */   DBSYSTEMVALUES_PROGRESS: () => (/* binding */ DBSYSTEMVALUES_PROGRESS),
/* harmony export */   DBSYSTEMVALUES_REDIS: () => (/* binding */ DBSYSTEMVALUES_REDIS),
/* harmony export */   DBSYSTEMVALUES_REDSHIFT: () => (/* binding */ DBSYSTEMVALUES_REDSHIFT),
/* harmony export */   DBSYSTEMVALUES_SQLITE: () => (/* binding */ DBSYSTEMVALUES_SQLITE),
/* harmony export */   DBSYSTEMVALUES_SYBASE: () => (/* binding */ DBSYSTEMVALUES_SYBASE),
/* harmony export */   DBSYSTEMVALUES_TERADATA: () => (/* binding */ DBSYSTEMVALUES_TERADATA),
/* harmony export */   DBSYSTEMVALUES_VERTICA: () => (/* binding */ DBSYSTEMVALUES_VERTICA),
/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* binding */ DbCassandraConsistencyLevelValues),
/* harmony export */   DbSystemValues: () => (/* binding */ DbSystemValues),
/* harmony export */   FAASDOCUMENTOPERATIONVALUES_DELETE: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_DELETE),
/* harmony export */   FAASDOCUMENTOPERATIONVALUES_EDIT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_EDIT),
/* harmony export */   FAASDOCUMENTOPERATIONVALUES_INSERT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_INSERT),
/* harmony export */   FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD),
/* harmony export */   FAASINVOKEDPROVIDERVALUES_AWS: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AWS),
/* harmony export */   FAASINVOKEDPROVIDERVALUES_AZURE: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AZURE),
/* harmony export */   FAASINVOKEDPROVIDERVALUES_GCP: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_GCP),
/* harmony export */   FAASTRIGGERVALUES_DATASOURCE: () => (/* binding */ FAASTRIGGERVALUES_DATASOURCE),
/* harmony export */   FAASTRIGGERVALUES_HTTP: () => (/* binding */ FAASTRIGGERVALUES_HTTP),
/* harmony export */   FAASTRIGGERVALUES_OTHER: () => (/* binding */ FAASTRIGGERVALUES_OTHER),
/* harmony export */   FAASTRIGGERVALUES_PUBSUB: () => (/* binding */ FAASTRIGGERVALUES_PUBSUB),
/* harmony export */   FAASTRIGGERVALUES_TIMER: () => (/* binding */ FAASTRIGGERVALUES_TIMER),
/* harmony export */   FaasDocumentOperationValues: () => (/* binding */ FaasDocumentOperationValues),
/* harmony export */   FaasInvokedProviderValues: () => (/* binding */ FaasInvokedProviderValues),
/* harmony export */   FaasTriggerValues: () => (/* binding */ FaasTriggerValues),
/* harmony export */   HTTPFLAVORVALUES_HTTP_1_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_0),
/* harmony export */   HTTPFLAVORVALUES_HTTP_1_1: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_1),
/* harmony export */   HTTPFLAVORVALUES_HTTP_2_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_2_0),
/* harmony export */   HTTPFLAVORVALUES_QUIC: () => (/* binding */ HTTPFLAVORVALUES_QUIC),
/* harmony export */   HTTPFLAVORVALUES_SPDY: () => (/* binding */ HTTPFLAVORVALUES_SPDY),
/* harmony export */   HttpFlavorValues: () => (/* binding */ HttpFlavorValues),
/* harmony export */   MESSAGETYPEVALUES_RECEIVED: () => (/* binding */ MESSAGETYPEVALUES_RECEIVED),
/* harmony export */   MESSAGETYPEVALUES_SENT: () => (/* binding */ MESSAGETYPEVALUES_SENT),
/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_QUEUE),
/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_TOPIC),
/* harmony export */   MESSAGINGOPERATIONVALUES_PROCESS: () => (/* binding */ MESSAGINGOPERATIONVALUES_PROCESS),
/* harmony export */   MESSAGINGOPERATIONVALUES_RECEIVE: () => (/* binding */ MESSAGINGOPERATIONVALUES_RECEIVE),
/* harmony export */   MessageTypeValues: () => (/* binding */ MessageTypeValues),
/* harmony export */   MessagingDestinationKindValues: () => (/* binding */ MessagingDestinationKindValues),
/* harmony export */   MessagingOperationValues: () => (/* binding */ MessagingOperationValues),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EDGE),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GPRS),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GSM),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IDEN),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NR),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA),
/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_UMTS),
/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_CELL: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_CELL),
/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE),
/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNKNOWN),
/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIFI: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIFI),
/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIRED: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIRED),
/* harmony export */   NETTRANSPORTVALUES_INPROC: () => (/* binding */ NETTRANSPORTVALUES_INPROC),
/* harmony export */   NETTRANSPORTVALUES_IP: () => (/* binding */ NETTRANSPORTVALUES_IP),
/* harmony export */   NETTRANSPORTVALUES_IP_TCP: () => (/* binding */ NETTRANSPORTVALUES_IP_TCP),
/* harmony export */   NETTRANSPORTVALUES_IP_UDP: () => (/* binding */ NETTRANSPORTVALUES_IP_UDP),
/* harmony export */   NETTRANSPORTVALUES_OTHER: () => (/* binding */ NETTRANSPORTVALUES_OTHER),
/* harmony export */   NETTRANSPORTVALUES_PIPE: () => (/* binding */ NETTRANSPORTVALUES_PIPE),
/* harmony export */   NETTRANSPORTVALUES_UNIX: () => (/* binding */ NETTRANSPORTVALUES_UNIX),
/* harmony export */   NetHostConnectionSubtypeValues: () => (/* binding */ NetHostConnectionSubtypeValues),
/* harmony export */   NetHostConnectionTypeValues: () => (/* binding */ NetHostConnectionTypeValues),
/* harmony export */   NetTransportValues: () => (/* binding */ NetTransportValues),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_ABORTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ABORTED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_CANCELLED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_CANCELLED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DATA_LOSS),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_INTERNAL: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INTERNAL),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_NOT_FOUND),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_OK: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OK),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAVAILABLE),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED),
/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNKNOWN),
/* harmony export */   RpcGrpcStatusCodeValues: () => (/* binding */ RpcGrpcStatusCodeValues),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_COUNT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_INDEX_NAME),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_LIMIT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LIMIT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROJECTION: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROJECTION),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_SEGMENT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SEGMENT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_SELECT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SELECT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_COUNT),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_NAMES),
/* harmony export */   SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS),
/* harmony export */   SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => (/* binding */ SEMATTRS_AWS_LAMBDA_INVOKED_ARN),
/* harmony export */   SEMATTRS_CODE_FILEPATH: () => (/* binding */ SEMATTRS_CODE_FILEPATH),
/* harmony export */   SEMATTRS_CODE_FUNCTION: () => (/* binding */ SEMATTRS_CODE_FUNCTION),
/* harmony export */   SEMATTRS_CODE_LINENO: () => (/* binding */ SEMATTRS_CODE_LINENO),
/* harmony export */   SEMATTRS_CODE_NAMESPACE: () => (/* binding */ SEMATTRS_CODE_NAMESPACE),
/* harmony export */   SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* binding */ SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL),
/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_DC),
/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_ID),
/* harmony export */   SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_IDEMPOTENCE),
/* harmony export */   SEMATTRS_DB_CASSANDRA_KEYSPACE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_KEYSPACE),
/* harmony export */   SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_PAGE_SIZE),
/* harmony export */   SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* binding */ SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),
/* harmony export */   SEMATTRS_DB_CASSANDRA_TABLE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_TABLE),
/* harmony export */   SEMATTRS_DB_CONNECTION_STRING: () => (/* binding */ SEMATTRS_DB_CONNECTION_STRING),
/* harmony export */   SEMATTRS_DB_HBASE_NAMESPACE: () => (/* binding */ SEMATTRS_DB_HBASE_NAMESPACE),
/* harmony export */   SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => (/* binding */ SEMATTRS_DB_JDBC_DRIVER_CLASSNAME),
/* harmony export */   SEMATTRS_DB_MONGODB_COLLECTION: () => (/* binding */ SEMATTRS_DB_MONGODB_COLLECTION),
/* harmony export */   SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => (/* binding */ SEMATTRS_DB_MSSQL_INSTANCE_NAME),
/* harmony export */   SEMATTRS_DB_NAME: () => (/* binding */ SEMATTRS_DB_NAME),
/* harmony export */   SEMATTRS_DB_OPERATION: () => (/* binding */ SEMATTRS_DB_OPERATION),
/* harmony export */   SEMATTRS_DB_REDIS_DATABASE_INDEX: () => (/* binding */ SEMATTRS_DB_REDIS_DATABASE_INDEX),
/* harmony export */   SEMATTRS_DB_SQL_TABLE: () => (/* binding */ SEMATTRS_DB_SQL_TABLE),
/* harmony export */   SEMATTRS_DB_STATEMENT: () => (/* binding */ SEMATTRS_DB_STATEMENT),
/* harmony export */   SEMATTRS_DB_SYSTEM: () => (/* binding */ SEMATTRS_DB_SYSTEM),
/* harmony export */   SEMATTRS_DB_USER: () => (/* binding */ SEMATTRS_DB_USER),
/* harmony export */   SEMATTRS_ENDUSER_ID: () => (/* binding */ SEMATTRS_ENDUSER_ID),
/* harmony export */   SEMATTRS_ENDUSER_ROLE: () => (/* binding */ SEMATTRS_ENDUSER_ROLE),
/* harmony export */   SEMATTRS_ENDUSER_SCOPE: () => (/* binding */ SEMATTRS_ENDUSER_SCOPE),
/* harmony export */   SEMATTRS_EXCEPTION_ESCAPED: () => (/* binding */ SEMATTRS_EXCEPTION_ESCAPED),
/* harmony export */   SEMATTRS_EXCEPTION_MESSAGE: () => (/* binding */ SEMATTRS_EXCEPTION_MESSAGE),
/* harmony export */   SEMATTRS_EXCEPTION_STACKTRACE: () => (/* binding */ SEMATTRS_EXCEPTION_STACKTRACE),
/* harmony export */   SEMATTRS_EXCEPTION_TYPE: () => (/* binding */ SEMATTRS_EXCEPTION_TYPE),
/* harmony export */   SEMATTRS_FAAS_COLDSTART: () => (/* binding */ SEMATTRS_FAAS_COLDSTART),
/* harmony export */   SEMATTRS_FAAS_CRON: () => (/* binding */ SEMATTRS_FAAS_CRON),
/* harmony export */   SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_COLLECTION),
/* harmony export */   SEMATTRS_FAAS_DOCUMENT_NAME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_NAME),
/* harmony export */   SEMATTRS_FAAS_DOCUMENT_OPERATION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_OPERATION),
/* harmony export */   SEMATTRS_FAAS_DOCUMENT_TIME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_TIME),
/* harmony export */   SEMATTRS_FAAS_EXECUTION: () => (/* binding */ SEMATTRS_FAAS_EXECUTION),
/* harmony export */   SEMATTRS_FAAS_INVOKED_NAME: () => (/* binding */ SEMATTRS_FAAS_INVOKED_NAME),
/* harmony export */   SEMATTRS_FAAS_INVOKED_PROVIDER: () => (/* binding */ SEMATTRS_FAAS_INVOKED_PROVIDER),
/* harmony export */   SEMATTRS_FAAS_INVOKED_REGION: () => (/* binding */ SEMATTRS_FAAS_INVOKED_REGION),
/* harmony export */   SEMATTRS_FAAS_TIME: () => (/* binding */ SEMATTRS_FAAS_TIME),
/* harmony export */   SEMATTRS_FAAS_TRIGGER: () => (/* binding */ SEMATTRS_FAAS_TRIGGER),
/* harmony export */   SEMATTRS_HTTP_CLIENT_IP: () => (/* binding */ SEMATTRS_HTTP_CLIENT_IP),
/* harmony export */   SEMATTRS_HTTP_FLAVOR: () => (/* binding */ SEMATTRS_HTTP_FLAVOR),
/* harmony export */   SEMATTRS_HTTP_HOST: () => (/* binding */ SEMATTRS_HTTP_HOST),
/* harmony export */   SEMATTRS_HTTP_METHOD: () => (/* binding */ SEMATTRS_HTTP_METHOD),
/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH),
/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),
/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH),
/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),
/* harmony export */   SEMATTRS_HTTP_ROUTE: () => (/* binding */ SEMATTRS_HTTP_ROUTE),
/* harmony export */   SEMATTRS_HTTP_SCHEME: () => (/* binding */ SEMATTRS_HTTP_SCHEME),
/* harmony export */   SEMATTRS_HTTP_SERVER_NAME: () => (/* binding */ SEMATTRS_HTTP_SERVER_NAME),
/* harmony export */   SEMATTRS_HTTP_STATUS_CODE: () => (/* binding */ SEMATTRS_HTTP_STATUS_CODE),
/* harmony export */   SEMATTRS_HTTP_TARGET: () => (/* binding */ SEMATTRS_HTTP_TARGET),
/* harmony export */   SEMATTRS_HTTP_URL: () => (/* binding */ SEMATTRS_HTTP_URL),
/* harmony export */   SEMATTRS_HTTP_USER_AGENT: () => (/* binding */ SEMATTRS_HTTP_USER_AGENT),
/* harmony export */   SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_COMPRESSED_SIZE),
/* harmony export */   SEMATTRS_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGE_ID),
/* harmony export */   SEMATTRS_MESSAGE_TYPE: () => (/* binding */ SEMATTRS_MESSAGE_TYPE),
/* harmony export */   SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE),
/* harmony export */   SEMATTRS_MESSAGING_CONSUMER_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONSUMER_ID),
/* harmony export */   SEMATTRS_MESSAGING_CONVERSATION_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONVERSATION_ID),
/* harmony export */   SEMATTRS_MESSAGING_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION),
/* harmony export */   SEMATTRS_MESSAGING_DESTINATION_KIND: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION_KIND),
/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CLIENT_ID),
/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP),
/* harmony export */   SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY),
/* harmony export */   SEMATTRS_MESSAGING_KAFKA_PARTITION: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_PARTITION),
/* harmony export */   SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_TOMBSTONE),
/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_ID),
/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES),
/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES),
/* harmony export */   SEMATTRS_MESSAGING_OPERATION: () => (/* binding */ SEMATTRS_MESSAGING_OPERATION),
/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL),
/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL_VERSION),
/* harmony export */   SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => (/* binding */ SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY),
/* harmony export */   SEMATTRS_MESSAGING_SYSTEM: () => (/* binding */ SEMATTRS_MESSAGING_SYSTEM),
/* harmony export */   SEMATTRS_MESSAGING_TEMP_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_TEMP_DESTINATION),
/* harmony export */   SEMATTRS_MESSAGING_URL: () => (/* binding */ SEMATTRS_MESSAGING_URL),
/* harmony export */   SEMATTRS_NET_HOST_CARRIER_ICC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_ICC),
/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MCC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MCC),
/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MNC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MNC),
/* harmony export */   SEMATTRS_NET_HOST_CARRIER_NAME: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_NAME),
/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_SUBTYPE),
/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_TYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_TYPE),
/* harmony export */   SEMATTRS_NET_HOST_IP: () => (/* binding */ SEMATTRS_NET_HOST_IP),
/* harmony export */   SEMATTRS_NET_HOST_NAME: () => (/* binding */ SEMATTRS_NET_HOST_NAME),
/* harmony export */   SEMATTRS_NET_HOST_PORT: () => (/* binding */ SEMATTRS_NET_HOST_PORT),
/* harmony export */   SEMATTRS_NET_PEER_IP: () => (/* binding */ SEMATTRS_NET_PEER_IP),
/* harmony export */   SEMATTRS_NET_PEER_NAME: () => (/* binding */ SEMATTRS_NET_PEER_NAME),
/* harmony export */   SEMATTRS_NET_PEER_PORT: () => (/* binding */ SEMATTRS_NET_PEER_PORT),
/* harmony export */   SEMATTRS_NET_TRANSPORT: () => (/* binding */ SEMATTRS_NET_TRANSPORT),
/* harmony export */   SEMATTRS_PEER_SERVICE: () => (/* binding */ SEMATTRS_PEER_SERVICE),
/* harmony export */   SEMATTRS_RPC_GRPC_STATUS_CODE: () => (/* binding */ SEMATTRS_RPC_GRPC_STATUS_CODE),
/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_CODE),
/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE),
/* harmony export */   SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => (/* binding */ SEMATTRS_RPC_JSONRPC_REQUEST_ID),
/* harmony export */   SEMATTRS_RPC_JSONRPC_VERSION: () => (/* binding */ SEMATTRS_RPC_JSONRPC_VERSION),
/* harmony export */   SEMATTRS_RPC_METHOD: () => (/* binding */ SEMATTRS_RPC_METHOD),
/* harmony export */   SEMATTRS_RPC_SERVICE: () => (/* binding */ SEMATTRS_RPC_SERVICE),
/* harmony export */   SEMATTRS_RPC_SYSTEM: () => (/* binding */ SEMATTRS_RPC_SYSTEM),
/* harmony export */   SEMATTRS_THREAD_ID: () => (/* binding */ SEMATTRS_THREAD_ID),
/* harmony export */   SEMATTRS_THREAD_NAME: () => (/* binding */ SEMATTRS_THREAD_NAME),
/* harmony export */   SemanticAttributes: () => (/* binding */ SemanticAttributes)
/* harmony export */ });
/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//----------------------------------------------------------------------------------------------------------
// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2
//----------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------
// Constant values for SemanticAttributes
//----------------------------------------------------------------------------------------------------------
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';
var TMP_DB_SYSTEM = 'db.system';
var TMP_DB_CONNECTION_STRING = 'db.connection_string';
var TMP_DB_USER = 'db.user';
var TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';
var TMP_DB_NAME = 'db.name';
var TMP_DB_STATEMENT = 'db.statement';
var TMP_DB_OPERATION = 'db.operation';
var TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';
var TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';
var TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';
var TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';
var TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';
var TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';
var TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';
var TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';
var TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';
var TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';
var TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';
var TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';
var TMP_DB_SQL_TABLE = 'db.sql.table';
var TMP_EXCEPTION_TYPE = 'exception.type';
var TMP_EXCEPTION_MESSAGE = 'exception.message';
var TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';
var TMP_EXCEPTION_ESCAPED = 'exception.escaped';
var TMP_FAAS_TRIGGER = 'faas.trigger';
var TMP_FAAS_EXECUTION = 'faas.execution';
var TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';
var TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';
var TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';
var TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';
var TMP_FAAS_TIME = 'faas.time';
var TMP_FAAS_CRON = 'faas.cron';
var TMP_FAAS_COLDSTART = 'faas.coldstart';
var TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';
var TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';
var TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';
var TMP_NET_TRANSPORT = 'net.transport';
var TMP_NET_PEER_IP = 'net.peer.ip';
var TMP_NET_PEER_PORT = 'net.peer.port';
var TMP_NET_PEER_NAME = 'net.peer.name';
var TMP_NET_HOST_IP = 'net.host.ip';
var TMP_NET_HOST_PORT = 'net.host.port';
var TMP_NET_HOST_NAME = 'net.host.name';
var TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';
var TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';
var TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';
var TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';
var TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';
var TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';
var TMP_PEER_SERVICE = 'peer.service';
var TMP_ENDUSER_ID = 'enduser.id';
var TMP_ENDUSER_ROLE = 'enduser.role';
var TMP_ENDUSER_SCOPE = 'enduser.scope';
var TMP_THREAD_ID = 'thread.id';
var TMP_THREAD_NAME = 'thread.name';
var TMP_CODE_FUNCTION = 'code.function';
var TMP_CODE_NAMESPACE = 'code.namespace';
var TMP_CODE_FILEPATH = 'code.filepath';
var TMP_CODE_LINENO = 'code.lineno';
var TMP_HTTP_METHOD = 'http.method';
var TMP_HTTP_URL = 'http.url';
var TMP_HTTP_TARGET = 'http.target';
var TMP_HTTP_HOST = 'http.host';
var TMP_HTTP_SCHEME = 'http.scheme';
var TMP_HTTP_STATUS_CODE = 'http.status_code';
var TMP_HTTP_FLAVOR = 'http.flavor';
var TMP_HTTP_USER_AGENT = 'http.user_agent';
var TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';
var TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';
var TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';
var TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';
var TMP_HTTP_SERVER_NAME = 'http.server_name';
var TMP_HTTP_ROUTE = 'http.route';
var TMP_HTTP_CLIENT_IP = 'http.client_ip';
var TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';
var TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';
var TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';
var TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';
var TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';
var TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';
var TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';
var TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';
var TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';
var TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';
var TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';
var TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';
var TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';
var TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';
var TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';
var TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';
var TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';
var TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';
var TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';
var TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';
var TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';
var TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';
var TMP_MESSAGING_SYSTEM = 'messaging.system';
var TMP_MESSAGING_DESTINATION = 'messaging.destination';
var TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';
var TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';
var TMP_MESSAGING_PROTOCOL = 'messaging.protocol';
var TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';
var TMP_MESSAGING_URL = 'messaging.url';
var TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';
var TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';
var TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';
var TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';
var TMP_MESSAGING_OPERATION = 'messaging.operation';
var TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';
var TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';
var TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';
var TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';
var TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';
var TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';
var TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';
var TMP_RPC_SYSTEM = 'rpc.system';
var TMP_RPC_SERVICE = 'rpc.service';
var TMP_RPC_METHOD = 'rpc.method';
var TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';
var TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';
var TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';
var TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';
var TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';
var TMP_MESSAGE_TYPE = 'message.type';
var TMP_MESSAGE_ID = 'message.id';
var TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';
var TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';
/**
 * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).
 *
 * Note: This may be different from `faas.id` if an alias is involved.
 *
 * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;
/**
 * The connection string used to connect to the database. It is recommended to remove embedded credentials.
 *
 * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;
/**
 * Username for accessing the database.
 *
 * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_USER = TMP_DB_USER;
/**
 * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.
 *
 * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;
/**
 * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).
 *
 * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.
 *
 * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_NAME = TMP_DB_NAME;
/**
 * The database statement being executed.
 *
 * Note: The value may be sanitized to exclude sensitive information.
 *
 * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;
/**
 * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.
 *
 * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
 *
 * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;
/**
 * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.
 *
 * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).
 *
 * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;
/**
 * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.
 *
 * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;
/**
 * The fetch size used for paging, i.e. how many rows will be returned at once.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;
/**
 * The name of the primary table that the operation is acting upon, including the schema name (if applicable).
 *
 * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;
/**
 * Whether or not the query is idempotent.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;
/**
 * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;
/**
 * The ID of the coordinating node for a query.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;
/**
 * The data center of the coordinating node for a query.
 *
 * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;
/**
 * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.
 *
 * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;
/**
 * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.
 *
 * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;
/**
 * The collection being accessed within the database stated in `db.name`.
 *
 * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;
/**
 * The name of the primary table that the operation is acting upon, including the schema name (if applicable).
 *
 * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
 *
 * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;
/**
 * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
 *
 * @deprecated Use ATTR_EXCEPTION_TYPE.
 */
var SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;
/**
 * The exception message.
 *
 * @deprecated Use ATTR_EXCEPTION_MESSAGE.
 */
var SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;
/**
 * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
 *
 * @deprecated Use ATTR_EXCEPTION_STACKTRACE.
 */
var SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;
/**
* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.
*
* Note: An exception is considered to have escaped (or left) the scope of a span,
if that span is ended while the exception is still logically &#34;in flight&#34;.
This may be actually &#34;in flight&#34; in some languages (e.g. if the exception
is passed to a Context manager&#39;s `__exit__` method in Python) but will
usually be caught at the point of recording the exception in most languages.

It is usually not possible to determine at the point where an exception is thrown
whether it will escape the scope of a span.
However, it is trivial to know that an exception
will escape, if one checks for an active exception just before ending the span,
as done in the [example above](#exception-end-example).

It follows that an exception may still escape the scope of the span
even if the `exception.escaped` attribute was not set or set to false,
since the event might have been recorded at a time where it was not
clear whether the exception will escape.
*
* @deprecated Use ATTR_EXCEPTION_ESCAPED.
*/
var SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;
/**
 * The execution ID of the current function execution.
 *
 * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;
/**
 * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
 *
 * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;
/**
 * Describes the type of the operation that was performed on the data.
 *
 * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;
/**
 * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
 *
 * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;
/**
 * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
 *
 * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;
/**
 * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).
 *
 * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;
/**
 * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).
 *
 * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;
/**
 * A boolean that is true if the serverless function is executed for the first time (aka cold-start).
 *
 * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;
/**
 * The name of the invoked function.
 *
 * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.
 *
 * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;
/**
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;
/**
 * The cloud region of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.
 *
 * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;
/**
 * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).
 *
 * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;
/**
 * Remote port number.
 *
 * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;
/**
 * Remote hostname or similar, see note below.
 *
 * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;
/**
 * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.
 *
 * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;
/**
 * Like `net.peer.port` but for the host port.
 *
 * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;
/**
 * Local hostname or similar, see note below.
 *
 * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;
/**
 * The name of the mobile carrier.
 *
 * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;
/**
 * The mobile carrier country code.
 *
 * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;
/**
 * The mobile carrier network code.
 *
 * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;
/**
 * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
 *
 * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;
/**
 * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.
 *
 * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;
/**
 * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.
 *
 * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;
/**
 * Actual/assumed role the client is making the request under extracted from token or application security context.
 *
 * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;
/**
 * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).
 *
 * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;
/**
 * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).
 *
 * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_THREAD_ID = TMP_THREAD_ID;
/**
 * Current thread name.
 *
 * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;
/**
 * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).
 *
 * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;
/**
 * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.
 *
 * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;
/**
 * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).
 *
 * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;
/**
 * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.
 *
 * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;
/**
 * HTTP request method.
 *
 * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;
/**
 * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.
 *
 * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.
 *
 * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_URL = TMP_HTTP_URL;
/**
 * The full request target as passed in a HTTP request line or equivalent.
 *
 * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;
/**
 * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.
 *
 * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.
 *
 * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;
/**
 * The URI scheme identifying the used protocol.
 *
 * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;
/**
 * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).
 *
 * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;
/**
 * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.
 *
 * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;
/**
 * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.
 *
 * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;
/**
 * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.
 *
 * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;
/**
 * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.
 *
 * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;
/**
 * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.
 *
 * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;
/**
 * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).
 *
 * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.
 *
 * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;
/**
 * The matched route (path template).
 *
 * @deprecated Use ATTR_HTTP_ROUTE.
 */
var SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;
/**
* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).
*
* Note: This is not necessarily the same as `net.peer.ip`, which would
identify the network-level peer, which may be a proxy.

This attribute should be set when a source of information different
from the one used for `net.peer.ip`, is available even if that other
source just confirms the same value as `net.peer.ip`.
Rationale: For `net.peer.ip`, one typically does not know if it
comes from a proxy, reverse proxy, or the actual client. Setting
`http.client_ip` when it&#39;s the same as `net.peer.ip` means that
one is at least somewhat confident that the address is not that of
the closest proxy.
*
* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
*/
var SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;
/**
 * The keys in the `RequestItems` object field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;
/**
 * The JSON-serialized value of each item in the `ConsumedCapacity` response field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;
/**
 * The JSON-serialized value of the `ItemCollectionMetrics` response field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;
/**
 * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;
/**
 * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;
/**
 * The value of the `ConsistentRead` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;
/**
 * The value of the `ProjectionExpression` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;
/**
 * The value of the `Limit` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;
/**
 * The value of the `AttributesToGet` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;
/**
 * The value of the `IndexName` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;
/**
 * The value of the `Select` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;
/**
 * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;
/**
 * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;
/**
 * The value of the `ExclusiveStartTableName` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;
/**
 * The the number of items in the `TableNames` response parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;
/**
 * The value of the `ScanIndexForward` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;
/**
 * The value of the `Segment` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;
/**
 * The value of the `TotalSegments` request parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;
/**
 * The value of the `Count` response parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;
/**
 * The value of the `ScannedCount` response parameter.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;
/**
 * The JSON-serialized value of each item in the `AttributeDefinitions` request field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;
/**
 * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.
 *
 * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;
/**
 * A string identifying the messaging system.
 *
 * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;
/**
 * The message destination name. This might be equal to the span name but is required nevertheless.
 *
 * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;
/**
 * The kind of message destination.
 *
 * @deprecated Removed in semconv v1.20.0.
 */
var SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;
/**
 * A boolean that is true if the message destination is temporary.
 *
 * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;
/**
 * The name of the transport protocol.
 *
 * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.
 */
var SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;
/**
 * The version of the transport protocol.
 *
 * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.
 */
var SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;
/**
 * Connection string.
 *
 * @deprecated Removed in semconv v1.17.0.
 */
var SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;
/**
 * A value used by the messaging system as an identifier for the message, represented as a string.
 *
 * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;
/**
 * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.
 *
 * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;
/**
 * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.
 *
 * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;
/**
 * The compressed size of the message payload in bytes.
 *
 * @deprecated Removed in semconv v1.22.0.
 */
var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;
/**
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 *
 * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;
/**
 * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.
 *
 * @deprecated Removed in semconv v1.21.0.
 */
var SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;
/**
 * RabbitMQ message routing key.
 *
 * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;
/**
 * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.
 *
 * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.
 *
 * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;
/**
 * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.
 *
 * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;
/**
 * Client Id for the Consumer or Producer that is handling the message.
 *
 * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;
/**
 * Partition the message is sent to.
 *
 * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;
/**
 * A boolean that is true if the message is a tombstone.
 *
 * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;
/**
 * A string identifying the remoting system.
 *
 * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;
/**
 * The full (logical) name of the service being called, including its package name, if applicable.
 *
 * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
 *
 * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;
/**
 * The name of the (logical) method being called, must be equal to the $method part in the span name.
 *
 * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
 *
 * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;
/**
 * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.
 *
 * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;
/**
 * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.
 *
 * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;
/**
 * `error.code` property of response if it is an error response.
 *
 * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;
/**
 * `error.message` property of response if it is an error response.
 *
 * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;
/**
 * Whether this is a received or sent message.
 *
 * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;
/**
 * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.
 *
 * Note: This way we guarantee that the values will be consistent between different implementations.
 *
 * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;
/**
 * Compressed size of the message in bytes.
 *
 * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;
/**
 * Uncompressed size of the message in bytes.
 *
 * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;
/**
 * Create exported Value Map for SemanticAttributes values
 * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification
 */
var SemanticAttributes = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_AWS_LAMBDA_INVOKED_ARN,
    TMP_DB_SYSTEM,
    TMP_DB_CONNECTION_STRING,
    TMP_DB_USER,
    TMP_DB_JDBC_DRIVER_CLASSNAME,
    TMP_DB_NAME,
    TMP_DB_STATEMENT,
    TMP_DB_OPERATION,
    TMP_DB_MSSQL_INSTANCE_NAME,
    TMP_DB_CASSANDRA_KEYSPACE,
    TMP_DB_CASSANDRA_PAGE_SIZE,
    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,
    TMP_DB_CASSANDRA_TABLE,
    TMP_DB_CASSANDRA_IDEMPOTENCE,
    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,
    TMP_DB_CASSANDRA_COORDINATOR_ID,
    TMP_DB_CASSANDRA_COORDINATOR_DC,
    TMP_DB_HBASE_NAMESPACE,
    TMP_DB_REDIS_DATABASE_INDEX,
    TMP_DB_MONGODB_COLLECTION,
    TMP_DB_SQL_TABLE,
    TMP_EXCEPTION_TYPE,
    TMP_EXCEPTION_MESSAGE,
    TMP_EXCEPTION_STACKTRACE,
    TMP_EXCEPTION_ESCAPED,
    TMP_FAAS_TRIGGER,
    TMP_FAAS_EXECUTION,
    TMP_FAAS_DOCUMENT_COLLECTION,
    TMP_FAAS_DOCUMENT_OPERATION,
    TMP_FAAS_DOCUMENT_TIME,
    TMP_FAAS_DOCUMENT_NAME,
    TMP_FAAS_TIME,
    TMP_FAAS_CRON,
    TMP_FAAS_COLDSTART,
    TMP_FAAS_INVOKED_NAME,
    TMP_FAAS_INVOKED_PROVIDER,
    TMP_FAAS_INVOKED_REGION,
    TMP_NET_TRANSPORT,
    TMP_NET_PEER_IP,
    TMP_NET_PEER_PORT,
    TMP_NET_PEER_NAME,
    TMP_NET_HOST_IP,
    TMP_NET_HOST_PORT,
    TMP_NET_HOST_NAME,
    TMP_NET_HOST_CONNECTION_TYPE,
    TMP_NET_HOST_CONNECTION_SUBTYPE,
    TMP_NET_HOST_CARRIER_NAME,
    TMP_NET_HOST_CARRIER_MCC,
    TMP_NET_HOST_CARRIER_MNC,
    TMP_NET_HOST_CARRIER_ICC,
    TMP_PEER_SERVICE,
    TMP_ENDUSER_ID,
    TMP_ENDUSER_ROLE,
    TMP_ENDUSER_SCOPE,
    TMP_THREAD_ID,
    TMP_THREAD_NAME,
    TMP_CODE_FUNCTION,
    TMP_CODE_NAMESPACE,
    TMP_CODE_FILEPATH,
    TMP_CODE_LINENO,
    TMP_HTTP_METHOD,
    TMP_HTTP_URL,
    TMP_HTTP_TARGET,
    TMP_HTTP_HOST,
    TMP_HTTP_SCHEME,
    TMP_HTTP_STATUS_CODE,
    TMP_HTTP_FLAVOR,
    TMP_HTTP_USER_AGENT,
    TMP_HTTP_REQUEST_CONTENT_LENGTH,
    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,
    TMP_HTTP_RESPONSE_CONTENT_LENGTH,
    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,
    TMP_HTTP_SERVER_NAME,
    TMP_HTTP_ROUTE,
    TMP_HTTP_CLIENT_IP,
    TMP_AWS_DYNAMODB_TABLE_NAMES,
    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,
    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,
    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,
    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,
    TMP_AWS_DYNAMODB_CONSISTENT_READ,
    TMP_AWS_DYNAMODB_PROJECTION,
    TMP_AWS_DYNAMODB_LIMIT,
    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,
    TMP_AWS_DYNAMODB_INDEX_NAME,
    TMP_AWS_DYNAMODB_SELECT,
    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,
    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,
    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,
    TMP_AWS_DYNAMODB_TABLE_COUNT,
    TMP_AWS_DYNAMODB_SCAN_FORWARD,
    TMP_AWS_DYNAMODB_SEGMENT,
    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,
    TMP_AWS_DYNAMODB_COUNT,
    TMP_AWS_DYNAMODB_SCANNED_COUNT,
    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,
    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,
    TMP_MESSAGING_SYSTEM,
    TMP_MESSAGING_DESTINATION,
    TMP_MESSAGING_DESTINATION_KIND,
    TMP_MESSAGING_TEMP_DESTINATION,
    TMP_MESSAGING_PROTOCOL,
    TMP_MESSAGING_PROTOCOL_VERSION,
    TMP_MESSAGING_URL,
    TMP_MESSAGING_MESSAGE_ID,
    TMP_MESSAGING_CONVERSATION_ID,
    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,
    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,
    TMP_MESSAGING_OPERATION,
    TMP_MESSAGING_CONSUMER_ID,
    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,
    TMP_MESSAGING_KAFKA_MESSAGE_KEY,
    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,
    TMP_MESSAGING_KAFKA_CLIENT_ID,
    TMP_MESSAGING_KAFKA_PARTITION,
    TMP_MESSAGING_KAFKA_TOMBSTONE,
    TMP_RPC_SYSTEM,
    TMP_RPC_SERVICE,
    TMP_RPC_METHOD,
    TMP_RPC_GRPC_STATUS_CODE,
    TMP_RPC_JSONRPC_VERSION,
    TMP_RPC_JSONRPC_REQUEST_ID,
    TMP_RPC_JSONRPC_ERROR_CODE,
    TMP_RPC_JSONRPC_ERROR_MESSAGE,
    TMP_MESSAGE_TYPE,
    TMP_MESSAGE_ID,
    TMP_MESSAGE_COMPRESSED_SIZE,
    TMP_MESSAGE_UNCOMPRESSED_SIZE,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbSystemValues enum definition
 *
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';
var TMP_DBSYSTEMVALUES_MSSQL = 'mssql';
var TMP_DBSYSTEMVALUES_MYSQL = 'mysql';
var TMP_DBSYSTEMVALUES_ORACLE = 'oracle';
var TMP_DBSYSTEMVALUES_DB2 = 'db2';
var TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';
var TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';
var TMP_DBSYSTEMVALUES_HIVE = 'hive';
var TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';
var TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';
var TMP_DBSYSTEMVALUES_PROGRESS = 'progress';
var TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';
var TMP_DBSYSTEMVALUES_HANADB = 'hanadb';
var TMP_DBSYSTEMVALUES_INGRES = 'ingres';
var TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';
var TMP_DBSYSTEMVALUES_EDB = 'edb';
var TMP_DBSYSTEMVALUES_CACHE = 'cache';
var TMP_DBSYSTEMVALUES_ADABAS = 'adabas';
var TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';
var TMP_DBSYSTEMVALUES_DERBY = 'derby';
var TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';
var TMP_DBSYSTEMVALUES_INFORMIX = 'informix';
var TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';
var TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';
var TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';
var TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';
var TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';
var TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';
var TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';
var TMP_DBSYSTEMVALUES_SYBASE = 'sybase';
var TMP_DBSYSTEMVALUES_TERADATA = 'teradata';
var TMP_DBSYSTEMVALUES_VERTICA = 'vertica';
var TMP_DBSYSTEMVALUES_H2 = 'h2';
var TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';
var TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';
var TMP_DBSYSTEMVALUES_HBASE = 'hbase';
var TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';
var TMP_DBSYSTEMVALUES_REDIS = 'redis';
var TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';
var TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';
var TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';
var TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';
var TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';
var TMP_DBSYSTEMVALUES_GEODE = 'geode';
var TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';
var TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';
var TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;
/**
 * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
 *
 * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;
/**
 * The constant map of values for DbSystemValues.
 * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.
 */
var DbSystemValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_DBSYSTEMVALUES_OTHER_SQL,
    TMP_DBSYSTEMVALUES_MSSQL,
    TMP_DBSYSTEMVALUES_MYSQL,
    TMP_DBSYSTEMVALUES_ORACLE,
    TMP_DBSYSTEMVALUES_DB2,
    TMP_DBSYSTEMVALUES_POSTGRESQL,
    TMP_DBSYSTEMVALUES_REDSHIFT,
    TMP_DBSYSTEMVALUES_HIVE,
    TMP_DBSYSTEMVALUES_CLOUDSCAPE,
    TMP_DBSYSTEMVALUES_HSQLDB,
    TMP_DBSYSTEMVALUES_PROGRESS,
    TMP_DBSYSTEMVALUES_MAXDB,
    TMP_DBSYSTEMVALUES_HANADB,
    TMP_DBSYSTEMVALUES_INGRES,
    TMP_DBSYSTEMVALUES_FIRSTSQL,
    TMP_DBSYSTEMVALUES_EDB,
    TMP_DBSYSTEMVALUES_CACHE,
    TMP_DBSYSTEMVALUES_ADABAS,
    TMP_DBSYSTEMVALUES_FIREBIRD,
    TMP_DBSYSTEMVALUES_DERBY,
    TMP_DBSYSTEMVALUES_FILEMAKER,
    TMP_DBSYSTEMVALUES_INFORMIX,
    TMP_DBSYSTEMVALUES_INSTANTDB,
    TMP_DBSYSTEMVALUES_INTERBASE,
    TMP_DBSYSTEMVALUES_MARIADB,
    TMP_DBSYSTEMVALUES_NETEZZA,
    TMP_DBSYSTEMVALUES_PERVASIVE,
    TMP_DBSYSTEMVALUES_POINTBASE,
    TMP_DBSYSTEMVALUES_SQLITE,
    TMP_DBSYSTEMVALUES_SYBASE,
    TMP_DBSYSTEMVALUES_TERADATA,
    TMP_DBSYSTEMVALUES_VERTICA,
    TMP_DBSYSTEMVALUES_H2,
    TMP_DBSYSTEMVALUES_COLDFUSION,
    TMP_DBSYSTEMVALUES_CASSANDRA,
    TMP_DBSYSTEMVALUES_HBASE,
    TMP_DBSYSTEMVALUES_MONGODB,
    TMP_DBSYSTEMVALUES_REDIS,
    TMP_DBSYSTEMVALUES_COUCHBASE,
    TMP_DBSYSTEMVALUES_COUCHDB,
    TMP_DBSYSTEMVALUES_COSMOSDB,
    TMP_DBSYSTEMVALUES_DYNAMODB,
    TMP_DBSYSTEMVALUES_NEO4J,
    TMP_DBSYSTEMVALUES_GEODE,
    TMP_DBSYSTEMVALUES_ELASTICSEARCH,
    TMP_DBSYSTEMVALUES_MEMCACHED,
    TMP_DBSYSTEMVALUES_COCKROACHDB,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for DbCassandraConsistencyLevelValues enum definition
 *
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';
var TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;
/**
 * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).
 *
 * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;
/**
 * The constant map of values for DbCassandraConsistencyLevelValues.
 * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.
 */
var DbCassandraConsistencyLevelValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,
    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasTriggerValues enum definition
 *
 * Type of the trigger on which the function is executed.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';
var TMP_FAASTRIGGERVALUES_HTTP = 'http';
var TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';
var TMP_FAASTRIGGERVALUES_TIMER = 'timer';
var TMP_FAASTRIGGERVALUES_OTHER = 'other';
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;
/**
 * Type of the trigger on which the function is executed.
 *
 * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;
/**
 * The constant map of values for FaasTriggerValues.
 * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.
 */
var FaasTriggerValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_FAASTRIGGERVALUES_DATASOURCE,
    TMP_FAASTRIGGERVALUES_HTTP,
    TMP_FAASTRIGGERVALUES_PUBSUB,
    TMP_FAASTRIGGERVALUES_TIMER,
    TMP_FAASTRIGGERVALUES_OTHER,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasDocumentOperationValues enum definition
 *
 * Describes the type of the operation that was performed on the data.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';
var TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';
var TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';
/**
 * Describes the type of the operation that was performed on the data.
 *
 * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;
/**
 * Describes the type of the operation that was performed on the data.
 *
 * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;
/**
 * Describes the type of the operation that was performed on the data.
 *
 * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;
/**
 * The constant map of values for FaasDocumentOperationValues.
 * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.
 */
var FaasDocumentOperationValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,
    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,
    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for FaasInvokedProviderValues enum definition
 *
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';
var TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';
var TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';
var TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';
/**
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;
/**
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;
/**
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;
/**
 * The cloud provider of the invoked function.
 *
 * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.
 *
 * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;
/**
 * The constant map of values for FaasInvokedProviderValues.
 * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.
 */
var FaasInvokedProviderValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,
    TMP_FAASINVOKEDPROVIDERVALUES_AWS,
    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,
    TMP_FAASINVOKEDPROVIDERVALUES_GCP,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetTransportValues enum definition
 *
 * Transport protocol used. See note below.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';
var TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';
var TMP_NETTRANSPORTVALUES_IP = 'ip';
var TMP_NETTRANSPORTVALUES_UNIX = 'unix';
var TMP_NETTRANSPORTVALUES_PIPE = 'pipe';
var TMP_NETTRANSPORTVALUES_INPROC = 'inproc';
var TMP_NETTRANSPORTVALUES_OTHER = 'other';
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Removed in v1.21.0.
 */
var NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Removed in v1.21.0.
 */
var NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;
/**
 * Transport protocol used. See note below.
 *
 * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;
/**
 * The constant map of values for NetTransportValues.
 * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.
 */
var NetTransportValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_NETTRANSPORTVALUES_IP_TCP,
    TMP_NETTRANSPORTVALUES_IP_UDP,
    TMP_NETTRANSPORTVALUES_IP,
    TMP_NETTRANSPORTVALUES_UNIX,
    TMP_NETTRANSPORTVALUES_PIPE,
    TMP_NETTRANSPORTVALUES_INPROC,
    TMP_NETTRANSPORTVALUES_OTHER,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionTypeValues enum definition
 *
 * The internet connection type currently being used by the host.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';
var TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';
var TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';
var TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';
var TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;
/**
 * The internet connection type currently being used by the host.
 *
 * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;
/**
 * The constant map of values for NetHostConnectionTypeValues.
 * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.
 */
var NetHostConnectionTypeValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,
    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,
    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,
    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,
    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for NetHostConnectionSubtypeValues enum definition
 *
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';
var TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;
/**
 * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
 *
 * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;
/**
 * The constant map of values for NetHostConnectionSubtypeValues.
 * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.
 */
var NetHostConnectionSubtypeValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,
    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for HttpFlavorValues enum definition
 *
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';
var TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';
var TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';
var TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';
var TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;
/**
 * Kind of HTTP protocol used.
 *
 * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.
 *
 * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;
/**
 * The constant map of values for HttpFlavorValues.
 * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.
 */
var HttpFlavorValues = {
    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,
    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,
    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,
    SPDY: TMP_HTTPFLAVORVALUES_SPDY,
    QUIC: TMP_HTTPFLAVORVALUES_QUIC,
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingDestinationKindValues enum definition
 *
 * The kind of message destination.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';
var TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';
/**
 * The kind of message destination.
 *
 * @deprecated Removed in semconv v1.20.0.
 */
var MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;
/**
 * The kind of message destination.
 *
 * @deprecated Removed in semconv v1.20.0.
 */
var MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;
/**
 * The constant map of values for MessagingDestinationKindValues.
 * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.
 */
var MessagingDestinationKindValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,
    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessagingOperationValues enum definition
 *
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';
var TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';
/**
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 *
 * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;
/**
 * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.
 *
 * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;
/**
 * The constant map of values for MessagingOperationValues.
 * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.
 */
var MessagingOperationValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,
    TMP_MESSAGINGOPERATIONVALUES_PROCESS,
]);
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for RpcGrpcStatusCodeValues enum definition
 *
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;
var TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;
var TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;
var TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;
var TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;
var TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;
var TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;
var TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;
var TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;
var TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;
var TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;
var TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;
var TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;
var TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;
var TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;
var TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;
var TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;
/**
 * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.
 *
 * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;
/**
 * The constant map of values for RpcGrpcStatusCodeValues.
 * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.
 */
var RpcGrpcStatusCodeValues = {
    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,
    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,
    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,
    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,
    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,
    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,
    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,
    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,
    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,
    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,
    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,
    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,
    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,
    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,
    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,
    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,
    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,
};
/* ----------------------------------------------------------------------------------------------------------
 * Constant values for MessageTypeValues enum definition
 *
 * Whether this is a received or sent message.
 * ---------------------------------------------------------------------------------------------------------- */
// Temporary local constants to assign to the individual exports and the namespaced version
// Required to avoid the namespace exports using the unminifiable export names for some package types
var TMP_MESSAGETYPEVALUES_SENT = 'SENT';
var TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';
/**
 * Whether this is a received or sent message.
 *
 * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;
/**
 * Whether this is a received or sent message.
 *
 * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).
 */
var MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;
/**
 * The constant map of values for MessageTypeValues.
 * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.
 */
var MessageTypeValues = 
/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([
    TMP_MESSAGETYPEVALUES_SENT,
    TMP_MESSAGETYPEVALUES_RECEIVED,
]);
//# sourceMappingURL=SemanticAttributes.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/web-common/build/esm/SessionLogRecordProcessor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/web-common/build/esm/SessionLogRecordProcessor.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SessionLogRecordProcessor: () => (/* binding */ SessionLogRecordProcessor)
/* harmony export */ });
/* harmony import */ var _opentelemetry_semantic_conventions_incubating__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions/incubating */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/experimental_attributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * SessionLogRecordProcessor is a {@link SpanProcessor} adds the session.id attribute
 */
var SessionLogRecordProcessor = /** @class */ (function () {
    function SessionLogRecordProcessor(sessionIdProvider) {
        this._sessionIdProvider = sessionIdProvider;
    }
    SessionLogRecordProcessor.prototype.onEmit = function (logRecord, _context) {
        var _a;
        var sessionId = (_a = this._sessionIdProvider) === null || _a === void 0 ? void 0 : _a.getSessionId();
        if (sessionId) {
            logRecord.setAttribute(_opentelemetry_semantic_conventions_incubating__WEBPACK_IMPORTED_MODULE_0__.ATTR_SESSION_ID, sessionId);
        }
    };
    /**
     * Forces to export all finished spans
     */
    SessionLogRecordProcessor.prototype.forceFlush = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    /**
     * Shuts down the processor. Called when SDK is shut down. This is an
     * opportunity for processor to do any cleanup required.
     */
    SessionLogRecordProcessor.prototype.shutdown = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    return SessionLogRecordProcessor;
}());

//# sourceMappingURL=SessionLogRecordProcessor.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/web-common/build/esm/SessionSpanProcessor.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/web-common/build/esm/SessionSpanProcessor.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SessionSpanProcessor: () => (/* binding */ SessionSpanProcessor)
/* harmony export */ });
/* harmony import */ var _opentelemetry_semantic_conventions_incubating__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions/incubating */ "./node_modules/@opentelemetry/semantic-conventions/build/esm/experimental_attributes.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

/**
 * SessionSpanProcessor is a {@link SpanProcessor} that adds the session.id attribute
 */
var SessionSpanProcessor = /** @class */ (function () {
    function SessionSpanProcessor(sessionIdProvider) {
        this._sessionIdProvider = sessionIdProvider;
    }
    /**
     * Forces to export all finished spans
     */
    SessionSpanProcessor.prototype.forceFlush = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    /**
     * Called when a {@link Span} is started, if the `span.isRecording()`
     * returns true.
     * @param span the Span that just started.
     */
    SessionSpanProcessor.prototype.onStart = function (span, _parentContext) {
        var _a;
        var sessionId = (_a = this._sessionIdProvider) === null || _a === void 0 ? void 0 : _a.getSessionId();
        if (sessionId) {
            span.setAttribute(_opentelemetry_semantic_conventions_incubating__WEBPACK_IMPORTED_MODULE_0__.ATTR_SESSION_ID, sessionId);
        }
    };
    /**
     * Called when a {@link ReadableSpan} is ended, if the `span.isRecording()`
     * returns true.
     * @param span the Span that just ended.
     */
    SessionSpanProcessor.prototype.onEnd = function (_) {
        // no-op
    };
    /**
     * Shuts down the processor. Called when SDK is shut down. This is an
     * opportunity for processor to do any cleanup required.
     */
    SessionSpanProcessor.prototype.shutdown = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    return SessionSpanProcessor;
}());

//# sourceMappingURL=SessionSpanProcessor.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/web-common/build/esm/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/web-common/build/esm/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSessionLogRecordProcessor: () => (/* binding */ createSessionLogRecordProcessor),
/* harmony export */   createSessionSpanProcessor: () => (/* binding */ createSessionSpanProcessor)
/* harmony export */ });
/* harmony import */ var _SessionSpanProcessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SessionSpanProcessor */ "./node_modules/@opentelemetry/web-common/build/esm/SessionSpanProcessor.js");
/* harmony import */ var _SessionLogRecordProcessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SessionLogRecordProcessor */ "./node_modules/@opentelemetry/web-common/build/esm/SessionLogRecordProcessor.js");
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function createSessionSpanProcessor(sessionProvider) {
    return new _SessionSpanProcessor__WEBPACK_IMPORTED_MODULE_0__.SessionSpanProcessor(sessionProvider);
}
function createSessionLogRecordProcessor(sessionProvider) {
    return new _SessionLogRecordProcessor__WEBPACK_IMPORTED_MODULE_1__.SessionLogRecordProcessor(sessionProvider);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/shimmer/index.js":
/*!***************************************!*\
  !*** ./node_modules/shimmer/index.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


function isFunction (funktion) {
  return typeof funktion === 'function'
}

// Default to complaining loudly when things don't go according to plan.
var logger = console.error.bind(console)

// Sets a property on an object, preserving its enumerability.
// This function assumes that the property is already writable.
function defineProperty (obj, name, value) {
  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)
  Object.defineProperty(obj, name, {
    configurable: true,
    enumerable: enumerable,
    writable: true,
    value: value
  })
}

// Keep initialization idempotent.
function shimmer (options) {
  if (options && options.logger) {
    if (!isFunction(options.logger)) logger("new logger isn't a function, not replacing")
    else logger = options.logger
  }
}

function wrap (nodule, name, wrapper) {
  if (!nodule || !nodule[name]) {
    logger('no original function ' + name + ' to wrap')
    return
  }

  if (!wrapper) {
    logger('no wrapper function')
    logger((new Error()).stack)
    return
  }

  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
    logger('original object and wrapper must be functions')
    return
  }

  var original = nodule[name]
  var wrapped = wrapper(original, name)

  defineProperty(wrapped, '__original', original)
  defineProperty(wrapped, '__unwrap', function () {
    if (nodule[name] === wrapped) defineProperty(nodule, name, original)
  })
  defineProperty(wrapped, '__wrapped', true)

  defineProperty(nodule, name, wrapped)
  return wrapped
}

function massWrap (nodules, names, wrapper) {
  if (!nodules) {
    logger('must provide one or more modules to patch')
    logger((new Error()).stack)
    return
  } else if (!Array.isArray(nodules)) {
    nodules = [nodules]
  }

  if (!(names && Array.isArray(names))) {
    logger('must provide one or more functions to wrap on modules')
    return
  }

  nodules.forEach(function (nodule) {
    names.forEach(function (name) {
      wrap(nodule, name, wrapper)
    })
  })
}

function unwrap (nodule, name) {
  if (!nodule || !nodule[name]) {
    logger('no function to unwrap.')
    logger((new Error()).stack)
    return
  }

  if (!nodule[name].__unwrap) {
    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')
  } else {
    return nodule[name].__unwrap()
  }
}

function massUnwrap (nodules, names) {
  if (!nodules) {
    logger('must provide one or more modules to patch')
    logger((new Error()).stack)
    return
  } else if (!Array.isArray(nodules)) {
    nodules = [nodules]
  }

  if (!(names && Array.isArray(names))) {
    logger('must provide one or more functions to unwrap on modules')
    return
  }

  nodules.forEach(function (nodule) {
    names.forEach(function (name) {
      unwrap(nodule, name)
    })
  })
}

shimmer.wrap = wrap
shimmer.massWrap = massWrap
shimmer.unwrap = unwrap
shimmer.massUnwrap = massUnwrap

module.exports = shimmer


/***/ }),

/***/ "./node_modules/tracekit/tracekit.js":
/*!*******************************************!*\
  !*** ./node_modules/tracekit/tracekit.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * https://github.com/csnover/TraceKit
 * @license MIT
 * @namespace TraceKit
 */
(function(window, undefined) {
if (!window) {
    return;
}

var TraceKit = {};
var _oldTraceKit = window.TraceKit;

// global reference to slice
var _slice = [].slice;
var UNKNOWN_FUNCTION = '?';

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types
var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;

/**
 * A better form of hasOwnProperty<br/>
 * Example: `_has(MainHostObject, property) === true/false`
 *
 * @param {Object} object to check property
 * @param {string} key to check
 * @return {Boolean} true if the object has the key and it is not inherited
 */
function _has(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
}

/**
 * Returns true if the parameter is undefined<br/>
 * Example: `_isUndefined(val) === true/false`
 *
 * @param {*} what Value to check
 * @return {Boolean} true if undefined and false otherwise
 */
function _isUndefined(what) {
    return typeof what === 'undefined';
}

/**
 * Export TraceKit out to another variable<br/>
 * Example: `var TK = TraceKit.noConflict()`
 * @return {Object} The TraceKit object
 * @memberof TraceKit
 */
TraceKit.noConflict = function noConflict() {
    window.TraceKit = _oldTraceKit;
    return TraceKit;
};

/**
 * Wrap any function in a TraceKit reporter<br/>
 * Example: `func = TraceKit.wrap(func);`
 *
 * @param {Function} func Function to be wrapped
 * @return {Function} The wrapped func
 * @memberof TraceKit
 */
TraceKit.wrap = function traceKitWrapper(func) {
    function wrapped() {
        try {
            return func.apply(this, arguments);
        } catch (e) {
            TraceKit.report(e);
            throw e;
        }
    }
    return wrapped;
};

/**
 * Cross-browser processing of unhandled exceptions
 *
 * Syntax:
 * ```js
 *   TraceKit.report.subscribe(function(stackInfo) { ... })
 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
 *   TraceKit.report(exception)
 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
 * ```
 *
 * Supports:
 *   - Firefox: full stack trace with line numbers, plus column number
 *     on top frame; column number is not guaranteed
 *   - Opera: full stack trace with line and column numbers
 *   - Chrome: full stack trace with line and column numbers
 *   - Safari: line and column number for the top frame only; some frames
 *     may be missing, and column number is not guaranteed
 *   - IE: line and column number for the top frame only; some frames
 *     may be missing, and column number is not guaranteed
 *
 * In theory, TraceKit should work on all of the following versions:
 *   - IE5.5+ (only 8.0 tested)
 *   - Firefox 0.9+ (only 3.5+ tested)
 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
 *     Exceptions Have Stacktrace to be enabled in opera:config)
 *   - Safari 3+ (only 4+ tested)
 *   - Chrome 1+ (only 5+ tested)
 *   - Konqueror 3.5+ (untested)
 *
 * Requires TraceKit.computeStackTrace.
 *
 * Tries to catch all unhandled exceptions and report them to the
 * subscribed handlers. Please note that TraceKit.report will rethrow the
 * exception. This is REQUIRED in order to get a useful stack trace in IE.
 * If the exception does not reach the top of the browser, you will only
 * get a stack trace from the point where TraceKit.report was called.
 *
 * Handlers receive a TraceKit.StackTrace object as described in the
 * TraceKit.computeStackTrace docs.
 *
 * @memberof TraceKit
 * @namespace
 */
TraceKit.report = (function reportModuleWrapper() {
    var handlers = [],
        lastException = null,
        lastExceptionStack = null;

    /**
     * Add a crash handler.
     * @param {Function} handler
     * @memberof TraceKit.report
     */
    function subscribe(handler) {
        installGlobalHandler();
        installGlobalUnhandledRejectionHandler();
        handlers.push(handler);
    }

    /**
     * Remove a crash handler.
     * @param {Function} handler
     * @memberof TraceKit.report
     */
    function unsubscribe(handler) {
        for (var i = handlers.length - 1; i >= 0; --i) {
            if (handlers[i] === handler) {
                handlers.splice(i, 1);
            }
        }

        if (handlers.length === 0) {
            uninstallGlobalHandler();
            uninstallGlobalUnhandledRejectionHandler();
        }
    }

    /**
     * Dispatch stack information to all handlers.
     * @param {TraceKit.StackTrace} stack
     * @param {boolean} isWindowError Is this a top-level window error?
     * @param {Error=} error The error that's being handled (if available, null otherwise)
     * @memberof TraceKit.report
     * @throws An exception if an error occurs while calling an handler.
     */
    function notifyHandlers(stack, isWindowError, error) {
        var exception = null;
        if (isWindowError && !TraceKit.collectWindowErrors) {
          return;
        }
        for (var i in handlers) {
            if (_has(handlers, i)) {
                try {
                    handlers[i](stack, isWindowError, error);
                } catch (inner) {
                    exception = inner;
                }
            }
        }

        if (exception) {
            throw exception;
        }
    }

    var _oldOnerrorHandler, _onErrorHandlerInstalled;
    var _oldOnunhandledrejectionHandler, _onUnhandledRejectionHandlerInstalled;

    /**
     * Ensures all global unhandled exceptions are recorded.
     * Supported by Gecko and IE.
     * @param {string} message Error message.
     * @param {string} url URL of script that generated the exception.
     * @param {(number|string)} lineNo The line number at which the error occurred.
     * @param {(number|string)=} columnNo The column number at which the error occurred.
     * @param {Error=} errorObj The actual Error object.
     * @memberof TraceKit.report
     */
    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {
        var stack = null;

        if (lastExceptionStack) {
            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
    	    processLastException();
        } else if (errorObj) {
            stack = TraceKit.computeStackTrace(errorObj);
            notifyHandlers(stack, true, errorObj);
        } else {
            var location = {
              'url': url,
              'line': lineNo,
              'column': columnNo
            };

            var name;
            var msg = message; // must be new var or will modify original `arguments`
            if ({}.toString.call(message) === '[object String]') {
                var groups = message.match(ERROR_TYPES_RE);
                if (groups) {
                    name = groups[1];
                    msg = groups[2];
                }
            }

            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);
            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);
            stack = {
                'name': name,
                'message': msg,
                'mode': 'onerror',
                'stack': [location]
            };

            notifyHandlers(stack, true, null);
        }

        if (_oldOnerrorHandler) {
            return _oldOnerrorHandler.apply(this, arguments);
        }

        return false;
    }

    /**
     * Ensures all unhandled rejections are recorded.
     * @param {PromiseRejectionEvent} e event.
     * @memberof TraceKit.report
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection
     * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
     */
    function traceKitWindowOnUnhandledRejection(e) {
        var stack = TraceKit.computeStackTrace(e.reason);
        notifyHandlers(stack, true, e.reason);
    }

    /**
     * Install a global onerror handler
     * @memberof TraceKit.report
     */
    function installGlobalHandler() {
        if (_onErrorHandlerInstalled === true) {
            return;
        }

        _oldOnerrorHandler = window.onerror;
        window.onerror = traceKitWindowOnError;
        _onErrorHandlerInstalled = true;
    }

    /**
     * Uninstall the global onerror handler
     * @memberof TraceKit.report
     */
    function uninstallGlobalHandler() {
        if (_onErrorHandlerInstalled) {
            window.onerror = _oldOnerrorHandler;
            _onErrorHandlerInstalled = false;
        }
    }

    /**
     * Install a global onunhandledrejection handler
     * @memberof TraceKit.report
     */
    function installGlobalUnhandledRejectionHandler() {
        if (_onUnhandledRejectionHandlerInstalled === true) {
            return;
        }

        _oldOnunhandledrejectionHandler = window.onunhandledrejection;
        window.onunhandledrejection = traceKitWindowOnUnhandledRejection;
        _onUnhandledRejectionHandlerInstalled = true;
    }

    /**
     * Uninstall the global onunhandledrejection handler
     * @memberof TraceKit.report
     */
    function uninstallGlobalUnhandledRejectionHandler() {
        if (_onUnhandledRejectionHandlerInstalled) {
            window.onunhandledrejection = _oldOnunhandledrejectionHandler;
            _onUnhandledRejectionHandlerInstalled = false;
        }
    }

    /**
     * Process the most recent exception
     * @memberof TraceKit.report
     */
    function processLastException() {
        var _lastExceptionStack = lastExceptionStack,
            _lastException = lastException;
        lastExceptionStack = null;
        lastException = null;
        notifyHandlers(_lastExceptionStack, false, _lastException);
    }

    /**
     * Reports an unhandled Error to TraceKit.
     * @param {Error} ex
     * @memberof TraceKit.report
     * @throws An exception if an incomplete stack trace is detected (old IE browsers).
     */
    function report(ex) {
        if (lastExceptionStack) {
            if (lastException === ex) {
                return; // already caught by an inner catch block, ignore
            } else {
              processLastException();
            }
        }

        var stack = TraceKit.computeStackTrace(ex);
        lastExceptionStack = stack;
        lastException = ex;

        // If the stack trace is incomplete, wait for 2 seconds for
        // slow slow IE to see if onerror occurs or not before reporting
        // this exception; otherwise, we will end up with an incomplete
        // stack trace
        setTimeout(function () {
            if (lastException === ex) {
                processLastException();
            }
        }, (stack.incomplete ? 2000 : 0));

        throw ex; // re-throw to propagate to the top level (and cause window.onerror)
    }

    report.subscribe = subscribe;
    report.unsubscribe = unsubscribe;
    return report;
}());

/**
 * An object representing a single stack frame.
 * @typedef {Object} StackFrame
 * @property {string} url The JavaScript or HTML file URL.
 * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).
 * @property {string[]?} args The arguments passed to the function, if known.
 * @property {number=} line The line number, if known.
 * @property {number=} column The column number, if known.
 * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.
 * @memberof TraceKit
 */

/**
 * An object representing a JavaScript stack trace.
 * @typedef {Object} StackTrace
 * @property {string} name The name of the thrown exception.
 * @property {string} message The exception error message.
 * @property {TraceKit.StackFrame[]} stack An array of stack frames.
 * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.
 * @memberof TraceKit
 */

/**
 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
 *
 * Syntax:
 *   ```js
 *   s = TraceKit.computeStackTrace.ofCaller([depth])
 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
 *   ```
 *
 * Supports:
 *   - Firefox:  full stack trace with line numbers and unreliable column
 *               number on top frame
 *   - Opera 10: full stack trace with line and column numbers
 *   - Opera 9-: full stack trace with line numbers
 *   - Chrome:   full stack trace with line and column numbers
 *   - Safari:   line and column number for the topmost stacktrace element
 *               only
 *   - IE:       no line numbers whatsoever
 *
 * Tries to guess names of anonymous functions by looking for assignments
 * in the source code. In IE and Safari, we have to guess source file names
 * by searching for function bodies inside all page scripts. This will not
 * work for scripts that are loaded cross-domain.
 * Here be dragons: some function names may be guessed incorrectly, and
 * duplicate functions may be mismatched.
 *
 * TraceKit.computeStackTrace should only be used for tracing purposes.
 * Logging of unhandled exceptions should be done with TraceKit.report,
 * which builds on top of TraceKit.computeStackTrace and provides better
 * IE support by utilizing the window.onerror event to retrieve information
 * about the top of the stack.
 *
 * Note: In IE and Safari, no stack trace is recorded on the Error object,
 * so computeStackTrace instead walks its *own* chain of callers.
 * This means that:
 *  * in Safari, some methods may be missing from the stack trace;
 *  * in IE, the topmost function in the stack trace will always be the
 *    caller of computeStackTrace.
 *
 * This is okay for tracing (because you are likely to be calling
 * computeStackTrace from the function you want to be the topmost element
 * of the stack trace anyway), but not okay for logging unhandled
 * exceptions (because your catch block will likely be far away from the
 * inner function that actually caused the exception).
 *
 * Tracing example:
 *  ```js
 *     function trace(message) {
 *         var stackInfo = TraceKit.computeStackTrace.ofCaller();
 *         var data = message + "\n";
 *         for(var i in stackInfo.stack) {
 *             var item = stackInfo.stack[i];
 *             data += (item.func || '[anonymous]') + "() in " + item.url + ":" + (item.line || '0') + "\n";
 *         }
 *         if (window.console)
 *             console.info(data);
 *         else
 *             alert(data);
 *     }
 * ```
 * @memberof TraceKit
 * @namespace
 */
TraceKit.computeStackTrace = (function computeStackTraceWrapper() {
    var debug = false,
        sourceCache = {};

    /**
     * Attempts to retrieve source code via XMLHttpRequest, which is used
     * to look up anonymous function names.
     * @param {string} url URL of source code.
     * @return {string} Source contents.
     * @memberof TraceKit.computeStackTrace
     */
    function loadSource(url) {
        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.
            return '';
        }
        try {
            var getXHR = function() {
                try {
                    return new window.XMLHttpRequest();
                } catch (e) {
                    // explicitly bubble up the exception if not found
                    return new window.ActiveXObject('Microsoft.XMLHTTP');
                }
            };

            var request = getXHR();
            request.open('GET', url, false);
            request.send('');
            return request.responseText;
        } catch (e) {
            return '';
        }
    }

    /**
     * Retrieves source code from the source code cache.
     * @param {string} url URL of source code.
     * @return {Array.<string>} Source contents.
     * @memberof TraceKit.computeStackTrace
     */
    function getSource(url) {
        if (typeof url !== 'string') {
            return [];
        }

        if (!_has(sourceCache, url)) {
            // URL needs to be able to fetched within the acceptable domain.  Otherwise,
            // cross-domain errors will be triggered.
            /*
                Regex matches:
                0 - Full Url
                1 - Protocol
                2 - Domain
                3 - Port (Useful for internal applications)
                4 - Path
            */
            var source = '';
            var domain = '';
            try { domain = window.document.domain; } catch (e) { }
            var match = /(.*)\:\/\/([^:\/]+)([:\d]*)\/{0,1}([\s\S]*)/.exec(url);
            if (match && match[2] === domain) {
                source = loadSource(url);
            }
            sourceCache[url] = source ? source.split('\n') : [];
        }

        return sourceCache[url];
    }

    /**
     * Tries to use an externally loaded copy of source code to determine
     * the name of a function by looking at the name of the variable it was
     * assigned to, if any.
     * @param {string} url URL of source code.
     * @param {(string|number)} lineNo Line number in source code.
     * @return {string} The function name, if discoverable.
     * @memberof TraceKit.computeStackTrace
     */
    function guessFunctionName(url, lineNo) {
        var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/,
            reGuessFunction = /['"]?([0-9A-Za-z$_]+)['"]?\s*[:=]\s*(function|eval|new Function)/,
            line = '',
            maxLines = 10,
            source = getSource(url),
            m;

        if (!source.length) {
            return UNKNOWN_FUNCTION;
        }

        // Walk backwards from the first line in the function until we find the line which
        // matches the pattern above, which is the function definition
        for (var i = 0; i < maxLines; ++i) {
            line = source[lineNo - i] + line;

            if (!_isUndefined(line)) {
                if ((m = reGuessFunction.exec(line))) {
                    return m[1];
                } else if ((m = reFunctionArgNames.exec(line))) {
                    return m[1];
                }
            }
        }

        return UNKNOWN_FUNCTION;
    }

    /**
     * Retrieves the surrounding lines from where an exception occurred.
     * @param {string} url URL of source code.
     * @param {(string|number)} line Line number in source code to center around for context.
     * @return {?Array.<string>} Lines of source code.
     * @memberof TraceKit.computeStackTrace
     */
    function gatherContext(url, line) {
        var source = getSource(url);

        if (!source.length) {
            return null;
        }

        var context = [],
            // linesBefore & linesAfter are inclusive with the offending line.
            // if linesOfContext is even, there will be one extra line
            //   *before* the offending line.
            linesBefore = Math.floor(TraceKit.linesOfContext / 2),
            // Add one extra line if linesOfContext is odd
            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),
            start = Math.max(0, line - linesBefore - 1),
            end = Math.min(source.length, line + linesAfter - 1);

        line -= 1; // convert to 0-based index

        for (var i = start; i < end; ++i) {
            if (!_isUndefined(source[i])) {
                context.push(source[i]);
            }
        }

        return context.length > 0 ? context : null;
    }

    /**
     * Escapes special characters, except for whitespace, in a string to be
     * used inside a regular expression as a string literal.
     * @param {string} text The string.
     * @return {string} The escaped string literal.
     * @memberof TraceKit.computeStackTrace
     */
    function escapeRegExp(text) {
        return text.replace(/[\-\[\]{}()*+?.,\\\^$|#]/g, '\\$&');
    }

    /**
     * Escapes special characters in a string to be used inside a regular
     * expression as a string literal. Also ensures that HTML entities will
     * be matched the same as their literal friends.
     * @param {string} body The string.
     * @return {string} The escaped string.
     * @memberof TraceKit.computeStackTrace
     */
    function escapeCodeAsRegExpForMatchingInsideHTML(body) {
        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('"', '(?:"|&quot;)').replace(/\s+/g, '\\s+');
    }

    /**
     * Determines where a code fragment occurs in the source code.
     * @param {RegExp} re The function definition.
     * @param {Array.<string>} urls A list of URLs to search.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     * @memberof TraceKit.computeStackTrace
     */
    function findSourceInUrls(re, urls) {
        var source, m;
        for (var i = 0, j = urls.length; i < j; ++i) {
            if ((source = getSource(urls[i])).length) {
                source = source.join('\n');
                if ((m = re.exec(source))) {

                    return {
                        'url': urls[i],
                        'line': source.substring(0, m.index).split('\n').length,
                        'column': m.index - source.lastIndexOf('\n', m.index) - 1
                    };
                }
            }
        }

        return null;
    }

    /**
     * Determines at which column a code fragment occurs on a line of the
     * source code.
     * @param {string} fragment The code fragment.
     * @param {string} url The URL to search.
     * @param {(string|number)} line The line number to examine.
     * @return {?number} The column number.
     * @memberof TraceKit.computeStackTrace
     */
    function findSourceInLine(fragment, url, line) {
        var source = getSource(url),
            re = new RegExp('\\b' + escapeRegExp(fragment) + '\\b'),
            m;

        line -= 1;

        if (source && source.length > line && (m = re.exec(source[line]))) {
            return m.index;
        }

        return null;
    }

    /**
     * Determines where a function was defined within the source code.
     * @param {(Function|string)} func A function reference or serialized
     * function definition.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     * @memberof TraceKit.computeStackTrace
     */
    function findSourceByFunctionBody(func) {
        if (_isUndefined(window && window.document)) {
            return;
        }

        var urls = [window.location.href],
            scripts = window.document.getElementsByTagName('script'),
            body,
            code = '' + func,
            codeRE = /^function(?:\s+([\w$]+))?\s*\(([\w\s,]*)\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
            eventRE = /^function on([\w$]+)\s*\(event\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
            re,
            parts,
            result;

        for (var i = 0; i < scripts.length; ++i) {
            var script = scripts[i];
            if (script.src) {
                urls.push(script.src);
            }
        }

        if (!(parts = codeRE.exec(code))) {
            re = new RegExp(escapeRegExp(code).replace(/\s+/g, '\\s+'));
        }

        // not sure if this is really necessary, but I don’t have a test
        // corpus large enough to confirm that and it was in the original.
        else {
            var name = parts[1] ? '\\s+' + parts[1] : '',
                args = parts[2].split(',').join('\\s*,\\s*');

            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\s+/g, '\\s+');
            re = new RegExp('function' + name + '\\s*\\(\\s*' + args + '\\s*\\)\\s*{\\s*' + body + '\\s*}');
        }

        // look for a normal function definition
        if ((result = findSourceInUrls(re, urls))) {
            return result;
        }

        // look for an old-school event handler function
        if ((parts = eventRE.exec(code))) {
            var event = parts[1];
            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);

            // look for a function defined in HTML as an onXXX handler
            re = new RegExp('on' + event + '=[\\\'"]\\s*' + body + '\\s*[\\\'"]', 'i');

            if ((result = findSourceInUrls(re, urls[0]))) {
                return result;
            }

            // look for ???
            re = new RegExp(body);

            if ((result = findSourceInUrls(re, urls))) {
                return result;
            }
        }

        return null;
    }

    // Contents of Exception in various browsers.
    //
    // SAFARI:
    // ex.message = Can't find variable: qq
    // ex.line = 59
    // ex.sourceId = 580238192
    // ex.sourceURL = http://...
    // ex.expressionBeginOffset = 96
    // ex.expressionCaretOffset = 98
    // ex.expressionEndOffset = 98
    // ex.name = ReferenceError
    //
    // FIREFOX:
    // ex.message = qq is not defined
    // ex.fileName = http://...
    // ex.lineNumber = 59
    // ex.columnNumber = 69
    // ex.stack = ...stack trace... (see the example below)
    // ex.name = ReferenceError
    //
    // CHROME:
    // ex.message = qq is not defined
    // ex.name = ReferenceError
    // ex.type = not_defined
    // ex.arguments = ['aa']
    // ex.stack = ...stack trace...
    //
    // INTERNET EXPLORER:
    // ex.message = ...
    // ex.name = ReferenceError
    //
    // OPERA:
    // ex.message = ...message... (see the example below)
    // ex.name = ReferenceError
    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'

    /**
     * Computes stack trace information from the stack property.
     * Chrome and Gecko use this property.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTraceFromStackProp(ex) {
        if (!ex.stack) {
            return null;
        }

        var chrome = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,
            gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i,
            winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,

            // Used to additionally parse URL/line/column from eval frames
            isEval,
            geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i,
            chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/,

            lines = ex.stack.split('\n'),
            stack = [],
            submatch,
            parts,
            element,
            reference = /^(.*) is undefined$/.exec(ex.message);

        for (var i = 0, j = lines.length; i < j; ++i) {
            if ((parts = chrome.exec(lines[i]))) {
                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
                if (isEval && (submatch = chromeEval.exec(parts[2]))) {
                    // throw out eval line/column and use top-most line/column number
                    parts[2] = submatch[1]; // url
                    parts[3] = submatch[2]; // line
                    parts[4] = submatch[3]; // column
                }
                element = {
                    'url': !isNative ? parts[2] : null,
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': isNative ? [parts[2]] : [],
                    'line': parts[3] ? +parts[3] : null,
                    'column': parts[4] ? +parts[4] : null
                };
            } else if ( parts = winjs.exec(lines[i]) ) {
                element = {
                    'url': parts[2],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': [],
                    'line': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if ((parts = gecko.exec(lines[i]))) {
                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
                if (isEval && (submatch = geckoEval.exec(parts[3]))) {
                    // throw out eval line/column and use top-most line number
                    parts[3] = submatch[1];
                    parts[4] = submatch[2];
                    parts[5] = null; // no column when eval
                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {
                    // FireFox uses this awesome columnNumber property for its top frame
                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,
                    // so adding 1
                    // NOTE: this hack doesn't work if top-most frame is eval
                    stack[0].column = ex.columnNumber + 1;
                }
                element = {
                    'url': parts[3],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': parts[2] ? parts[2].split(',') : [],
                    'line': parts[4] ? +parts[4] : null,
                    'column': parts[5] ? +parts[5] : null
                };
            } else {
                continue;
            }

            if (!element.func && element.line) {
                element.func = guessFunctionName(element.url, element.line);
            }

            element.context = element.line ? gatherContext(element.url, element.line) : null;
            stack.push(element);
        }

        if (!stack.length) {
            return null;
        }

        if (stack[0] && stack[0].line && !stack[0].column && reference) {
            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);
        }

        return {
            'mode': 'stack',
            'name': ex.name,
            'message': ex.message,
            'stack': stack
        };
    }

    /**
     * Computes stack trace information from the stacktrace property.
     * Opera 10+ uses this property.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTraceFromStacktraceProp(ex) {
        // Access and store the stacktrace property before doing ANYTHING
        // else to it because Opera is not very good at providing it
        // reliably in other circumstances.
        var stacktrace = ex.stacktrace;
        if (!stacktrace) {
            return;
        }

        var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i,
            opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i,
            lines = stacktrace.split('\n'),
            stack = [],
            parts;

        for (var line = 0; line < lines.length; line += 2) {
            var element = null;
            if ((parts = opera10Regex.exec(lines[line]))) {
                element = {
                    'url': parts[2],
                    'line': +parts[1],
                    'column': null,
                    'func': parts[3],
                    'args':[]
                };
            } else if ((parts = opera11Regex.exec(lines[line]))) {
                element = {
                    'url': parts[6],
                    'line': +parts[1],
                    'column': +parts[2],
                    'func': parts[3] || parts[4],
                    'args': parts[5] ? parts[5].split(',') : []
                };
            }

            if (element) {
                if (!element.func && element.line) {
                    element.func = guessFunctionName(element.url, element.line);
                }
                if (element.line) {
                    try {
                        element.context = gatherContext(element.url, element.line);
                    } catch (exc) {}
                }

                if (!element.context) {
                    element.context = [lines[line + 1]];
                }

                stack.push(element);
            }
        }

        if (!stack.length) {
            return null;
        }

        return {
            'mode': 'stacktrace',
            'name': ex.name,
            'message': ex.message,
            'stack': stack
        };
    }

    /**
     * NOT TESTED.
     * Computes stack trace information from an error message that includes
     * the stack trace.
     * Opera 9 and earlier use this method if the option to show stack
     * traces is turned on in opera:config.
     * @param {Error} ex
     * @return {?TraceKit.StackTrace} Stack information.
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTraceFromOperaMultiLineMessage(ex) {
        // TODO: Clean this function up
        // Opera includes a stack trace into the exception message. An example is:
        //
        // Statement on line 3: Undefined variable: undefinedFunc
        // Backtrace:
        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz
        //         undefinedFunc(a);
        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy
        //           zzz(x, y, z);
        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx
        //           yyy(a, a, a);
        //   Line 1 of function script
        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }
        //   ...

        var lines = ex.message.split('\n');
        if (lines.length < 4) {
            return null;
        }

        var lineRE1 = /^\s*Line (\d+) of linked script ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i,
            lineRE2 = /^\s*Line (\d+) of inline#(\d+) script in ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i,
            lineRE3 = /^\s*Line (\d+) of function script\s*$/i,
            stack = [],
            scripts = (window && window.document && window.document.getElementsByTagName('script')),
            inlineScriptBlocks = [],
            parts;

        for (var s in scripts) {
            if (_has(scripts, s) && !scripts[s].src) {
                inlineScriptBlocks.push(scripts[s]);
            }
        }

        for (var line = 2; line < lines.length; line += 2) {
            var item = null;
            if ((parts = lineRE1.exec(lines[line]))) {
                item = {
                    'url': parts[2],
                    'func': parts[3],
                    'args': [],
                    'line': +parts[1],
                    'column': null
                };
            } else if ((parts = lineRE2.exec(lines[line]))) {
                item = {
                    'url': parts[3],
                    'func': parts[4],
                    'args': [],
                    'line': +parts[1],
                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.
                };
                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block
                var script = inlineScriptBlocks[parts[2] - 1];
                if (script) {
                    var source = getSource(item.url);
                    if (source) {
                        source = source.join('\n');
                        var pos = source.indexOf(script.innerText);
                        if (pos >= 0) {
                            item.line = relativeLine + source.substring(0, pos).split('\n').length;
                        }
                    }
                }
            } else if ((parts = lineRE3.exec(lines[line]))) {
                var url = window.location.href.replace(/#.*$/, '');
                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));
                var src = findSourceInUrls(re, [url]);
                item = {
                    'url': url,
                    'func': '',
                    'args': [],
                    'line': src ? src.line : parts[1],
                    'column': null
                };
            }

            if (item) {
                if (!item.func) {
                    item.func = guessFunctionName(item.url, item.line);
                }
                var context = gatherContext(item.url, item.line);
                var midline = (context ? context[Math.floor(context.length / 2)] : null);
                if (context && midline.replace(/^\s*/, '') === lines[line + 1].replace(/^\s*/, '')) {
                    item.context = context;
                } else {
                    // if (context) alert("Context mismatch. Correct midline:\n" + lines[i+1] + "\n\nMidline:\n" + midline + "\n\nContext:\n" + context.join("\n") + "\n\nURL:\n" + item.url);
                    item.context = [lines[line + 1]];
                }
                stack.push(item);
            }
        }
        if (!stack.length) {
            return null; // could not parse multiline exception message as Opera stack trace
        }

        return {
            'mode': 'multiline',
            'name': ex.name,
            'message': lines[0],
            'stack': stack
        };
    }

    /**
     * Adds information about the first frame to incomplete stack traces.
     * Safari and IE require this to get complete data on the first frame.
     * @param {TraceKit.StackTrace} stackInfo Stack trace information from
     * one of the compute* methods.
     * @param {string} url The URL of the script that caused an error.
     * @param {(number|string)} lineNo The line number of the script that
     * caused an error.
     * @param {string=} message The error generated by the browser, which
     * hopefully contains the name of the object that caused the error.
     * @return {boolean} Whether or not the stack information was
     * augmented.
     * @memberof TraceKit.computeStackTrace
     */
    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
        var initial = {
            'url': url,
            'line': lineNo
        };

        if (initial.url && initial.line) {
            stackInfo.incomplete = false;

            if (!initial.func) {
                initial.func = guessFunctionName(initial.url, initial.line);
            }

            if (!initial.context) {
                initial.context = gatherContext(initial.url, initial.line);
            }

            var reference = / '([^']+)' /.exec(message);
            if (reference) {
                initial.column = findSourceInLine(reference[1], initial.url, initial.line);
            }

            if (stackInfo.stack.length > 0) {
                if (stackInfo.stack[0].url === initial.url) {
                    if (stackInfo.stack[0].line === initial.line) {
                        return false; // already in stack trace
                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
                        stackInfo.stack[0].line = initial.line;
                        stackInfo.stack[0].context = initial.context;
                        return false;
                    }
                }
            }

            stackInfo.stack.unshift(initial);
            stackInfo.partial = true;
            return true;
        } else {
            stackInfo.incomplete = true;
        }

        return false;
    }

    /**
     * Computes stack trace information by walking the arguments.caller
     * chain at the time the exception occurred. This will cause earlier
     * frames to be missed but is the only way to get any stack trace in
     * Safari and IE. The top frame is restored by
     * {@link augmentStackTraceWithInitialElement}.
     * @param {Error} ex
     * @return {TraceKit.StackTrace=} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTraceByWalkingCallerChain(ex, depth) {
        var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,
            stack = [],
            funcs = {},
            recursion = false,
            parts,
            item,
            source;

        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {
            if (curr === computeStackTrace || curr === TraceKit.report) {
                continue;
            }

            item = {
                'url': null,
                'func': UNKNOWN_FUNCTION,
                'args': [],
                'line': null,
                'column': null
            };

            if (curr.name) {
                item.func = curr.name;
            } else if ((parts = functionName.exec(curr.toString()))) {
                item.func = parts[1];
            }

            if (typeof item.func === 'undefined') {
              try {
                item.func = parts.input.substring(0, parts.input.indexOf('{'));
              } catch (e) { }
            }

            if ((source = findSourceByFunctionBody(curr))) {
                item.url = source.url;
                item.line = source.line;

                if (item.func === UNKNOWN_FUNCTION) {
                    item.func = guessFunctionName(item.url, item.line);
                }

                var reference = / '([^']+)' /.exec(ex.message || ex.description);
                if (reference) {
                    item.column = findSourceInLine(reference[1], source.url, source.line);
                }
            }

            if (funcs['' + curr]) {
                recursion = true;
            }else{
                funcs['' + curr] = true;
            }

            stack.push(item);
        }

        if (depth) {
            stack.splice(0, depth);
        }

        var result = {
            'mode': 'callers',
            'name': ex.name,
            'message': ex.message,
            'stack': stack
        };
        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
        return result;
    }

    /**
     * Computes a stack trace for an exception.
     * @param {Error} ex
     * @param {(string|number)=} depth
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTrace(ex, depth) {
        var stack = null;
        depth = (depth == null ? 0 : +depth);

        try {
            // This must be tried first because Opera 10 *destroys*
            // its stacktrace property if you try to access the stack
            // property first!!
            stack = computeStackTraceFromStacktraceProp(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceFromStackProp(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceFromOperaMultiLineMessage(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        return {
            'name': ex.name,
            'message': ex.message,
            'mode': 'failed'
        };
    }

    /**
     * Logs a stacktrace starting from the previous call and working down.
     * @param {(number|string)=} depth How many frames deep to trace.
     * @return {TraceKit.StackTrace} Stack trace information.
     * @memberof TraceKit.computeStackTrace
     */
    function computeStackTraceOfCaller(depth) {
        depth = (depth == null ? 0 : +depth) + 1; // "+ 1" because "ofCaller" should drop one frame
        try {
            throw new Error();
        } catch (ex) {
            return computeStackTrace(ex, depth + 1);
        }
    }

    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;
    computeStackTrace.guessFunctionName = guessFunctionName;
    computeStackTrace.gatherContext = gatherContext;
    computeStackTrace.ofCaller = computeStackTraceOfCaller;
    computeStackTrace.getSource = getSource;

    return computeStackTrace;
}());

/**
 * Extends support for global error handling for asynchronous browser
 * functions. Adopted from Closure Library's errorhandler.js
 * @memberof TraceKit
 */
TraceKit.extendToAsynchronousCallbacks = function () {
    var _helper = function _helper(fnName) {
        var originalFn = window[fnName];
        window[fnName] = function traceKitAsyncExtension() {
            // Make a copy of the arguments
            var args = _slice.call(arguments);
            var originalCallback = args[0];
            if (typeof (originalCallback) === 'function') {
                args[0] = TraceKit.wrap(originalCallback);
            }
            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it
            // also only supports 2 argument and doesn't care what "this" is, so we
            // can just call the original function directly.
            if (originalFn.apply) {
                return originalFn.apply(this, args);
            } else {
                return originalFn(args[0], args[1]);
            }
        };
    };

    _helper('setTimeout');
    _helper('setInterval');
};

//Default options:
if (!TraceKit.remoteFetching) {
    TraceKit.remoteFetching = true;
}
if (!TraceKit.collectWindowErrors) {
    TraceKit.collectWindowErrors = true;
}
if (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {
    // 5 lines before, the offending line, 5 lines after
    TraceKit.linesOfContext = 11;
}

// UMD export
if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (TraceKit),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}

}(typeof window !== 'undefined' ? window : __webpack_require__.g));


/***/ }),

/***/ "./node_modules/ua-parser-js/src/ua-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/ua-parser-js/src/ua-parser.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.40
   Copyright © 2012-2024 Faisal Salman <f@faisalman.com>
   MIT License *//*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
/////////////////////////////////////////////////////////////////////////////////

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '1.0.40',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major',
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded',
        UA_MAX_LENGTH = 500;

    var AMAZON  = 'Amazon',
        APPLE   = 'Apple',
        ASUS    = 'ASUS',
        BLACKBERRY = 'BlackBerry',
        BROWSER = 'Browser',
        CHROME  = 'Chrome',
        EDGE    = 'Edge',
        FIREFOX = 'Firefox',
        GOOGLE  = 'Google',
        HUAWEI  = 'Huawei',
        LG      = 'LG',
        MICROSOFT = 'Microsoft',
        MOTOROLA  = 'Motorola',
        OPERA   = 'Opera',
        SAMSUNG = 'Samsung',
        SHARP   = 'Sharp',
        SONY    = 'Sony',
        XIAOMI  = 'Xiaomi',
        ZEBRA   = 'Zebra',
        FACEBOOK    = 'Facebook',
        CHROMIUM_OS = 'Chromium OS',
        MAC_OS  = 'Mac OS',
        SUFFIX_BROWSER = ' Browser';

    ///////////
    // Helper
    //////////

    var extend = function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        enumerize = function (arr) {
            var enums = {};
            for (var i=0; i<arr.length; i++) {
                enums[arr[i].toUpperCase()] = arr[i];
            }
            return enums;
        },
        has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        },
        lowerize = function (str) {
            return str.toLowerCase();
        },
        majorize = function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        },
        trim = function (str, len) {
            if (typeof(str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
    };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    if (!regex[j]) { break; }
                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length === 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length === 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length === 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        strMapper = function (str, map) {

            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return map.hasOwnProperty('*') ? map['*'] : str;
    };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
            '1.0'   : '/8',
            '1.2'   : '/1',
            '1.3'   : '/3',
            '2.0'   : '/412',
            '2.0.2' : '/416',
            '2.0.3' : '/417',
            '2.0.4' : '/419',
            '?'     : '/'
        },
        windowsVersionMap = {
            'ME'        : '4.90',
            'NT 3.11'   : 'NT3.51',
            'NT 4.0'    : 'NT4.0',
            '2000'      : 'NT 5.0',
            'XP'        : ['NT 5.1', 'NT 5.2'],
            'Vista'     : 'NT 6.0',
            '7'         : 'NT 6.1',
            '8'         : 'NT 6.2',
            '8.1'       : 'NT 6.3',
            '10'        : ['NT 6.4', 'NT 10.0'],
            'RT'        : 'ARM'
    };

    //////////////
    // Regex map
    /////////////

    var regexes = {

        browser : [[

            /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
            ], [VERSION, [NAME, 'Chrome']], [
            /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
            ], [VERSION, [NAME, 'Edge']], [

            // Presto based
            /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
            ], [NAME, VERSION], [
            /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
            ], [VERSION, [NAME, OPERA+' Mini']], [
            /\bop(?:rg)?x\/([\w\.]+)/i                                          // Opera GX
            ], [VERSION, [NAME, OPERA+' GX']], [
            /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
            ], [VERSION, [NAME, OPERA]], [

            // Mixed
            /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i            // Baidu
            ], [VERSION, [NAME, 'Baidu']], [
            /\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i                       // Maxthon
            ], [VERSION, [NAME, 'Maxthon']], [
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,      
                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir
            // Trident based
            /(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,        // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet
            /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

            // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon
            /(heytap|ovi|115)browser\/([\d\.]+)/i,                              // HeyTap/Ovi/115
            /(weibo)__([\d\.]+)/i                                               // Weibo
            ], [NAME, VERSION], [
            /quark(?:pc)?\/([-\w\.]+)/i                                         // Quark
            ], [VERSION, [NAME, 'Quark']], [
            /\bddg\/([\w\.]+)/i                                                 // DuckDuckGo
            ], [VERSION, [NAME, 'DuckDuckGo']], [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
            ], [VERSION, [NAME, 'UC'+BROWSER]], [
            /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i,
            /micromessenger\/([\w\.]+)/i                                        // WeChat
            ], [VERSION, [NAME, 'WeChat']], [
            /konqueror\/([\w\.]+)/i                                             // Konqueror
            ], [VERSION, [NAME, 'Konqueror']], [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
            ], [VERSION, [NAME, 'IE']], [
            /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
            ], [VERSION, [NAME, 'Yandex']], [
            /slbrowser\/([\w\.]+)/i                                             // Smart Lenovo Browser
            ], [VERSION, [NAME, 'Smart Lenovo '+BROWSER]], [
            /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
            /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
            ], [VERSION, [NAME, FIREFOX+' Focus']], [
            /\bopt\/([\w\.]+)/i                                                 // Opera Touch
            ], [VERSION, [NAME, OPERA+' Touch']], [
            /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
            ], [VERSION, [NAME, 'Coc Coc']], [
            /dolfin\/([\w\.]+)/i                                                // Dolphin
            ], [VERSION, [NAME, 'Dolphin']], [
            /coast\/([\w\.]+)/i                                                 // Opera Coast
            ], [VERSION, [NAME, OPERA+' Coast']], [
            /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
            ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [
            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, FIREFOX]], [
            /\bqihoobrowser\/?([\w\.]*)/i                                       // 360
            ], [VERSION, [NAME, '360']], [
            /\b(qq)\/([\w\.]+)/i                                                // QQ
            ], [[NAME, /(.+)/, '$1Browser'], VERSION], [
            /(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i
            ], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser
            /samsungbrowser\/([\w\.]+)/i                                        // Samsung Internet
            ], [VERSION, [NAME, SAMSUNG + ' Internet']], [
            /metasr[\/ ]?([\d\.]+)/i                                            // Sogou Explorer
            ], [VERSION, [NAME, 'Sogou Explorer']], [
            /(sogou)mo\w+\/([\d\.]+)/i                                          // Sogou Mobile
            ], [[NAME, 'Sogou Mobile'], VERSION], [
            /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
            /m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i   // QQ/2345
            ], [NAME, VERSION], [
            /(lbbrowser|rekonq)/i,                                              // LieBao Browser/Rekonq
            /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
            ], [NAME], [
            /ome\/([\w\.]+) \w* ?(iron) saf/i,                                  // Iron
            /ome\/([\w\.]+).+qihu (360)[es]e/i                                  // 360
            ], [VERSION, NAME], [

            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
            ], [[NAME, FACEBOOK], VERSION], [
            /(Klarna)\/([\w\.]+)/i,                                             // Klarna Shopping Browser for iOS & Android
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
            /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
            /(alipay)client\/([\w\.]+)/i,                                       // Alipay
            /(twitter)(?:and| f.+e\/([\w\.]+))/i,                               // Twitter
            /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i                     // Chromium/Instagram/Snapchat
            ], [NAME, VERSION], [
            /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
            ], [VERSION, [NAME, 'GSA']], [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
            ], [VERSION, [NAME, 'TikTok']], [

            /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
            ], [VERSION, [NAME, CHROME+' Headless']], [

            / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
            ], [[NAME, CHROME+' WebView'], VERSION], [

            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
            ], [VERSION, [NAME, 'Android '+BROWSER]], [

            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
            ], [VERSION, NAME], [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
            ], [NAME, [VERSION, strMapper, oldSafariMap]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /(wolvic|librewolf)\/([\w\.]+)/i                                    // Wolvic/LibreWolf
            ], [NAME, VERSION], [
            /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
            ], [VERSION, [NAME, FIREFOX+' Reality']], [
            /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i                                              // Links
            ], [NAME, [VERSION, /_/g, '.']], [
            
            /(cobalt)\/([\w\.]+)/i                                              // Cobalt
            ], [NAME, [VERSION, /master.|lts./, ""]]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
            ], [[ARCHITECTURE, 'ia32']], [

            /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
            ], [[ARCHITECTURE, 'arm64']], [

            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
            ], [[ARCHITECTURE, 'armhf']], [

            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, lowerize]]
        ],

        device : [[

            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////

            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
            /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]((?!sm-[lr])[-\w]+)/i,
            /sec-(sgh\w+)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
            /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
            /(macintosh);/i
            ], [MODEL, [VENDOR, APPLE]], [

            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

            // Honor
            /(?:honor)([-\w ]+)[;\)]/i
            ], [MODEL, [VENDOR, 'Honor'], [TYPE, MOBILE]], [

            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
            /(?:huawei)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

            // Xiaomi
            /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,                  // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
            /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,        // Xiaomi Redmi 'numeric' models
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
            /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,                     // Redmi Pad
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
            /\b(opd2\d{3}a?) bui/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [

            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

            // Realme
            /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

            // Google
            /(pixel c)\b/i                                                      // Google Pixel C
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

            // Sony
            /droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,                           // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i                                                    // BlackBerry 10
            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

            // HTC
            /(nexus 9)/i                                                        // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            // TCL
            /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i
            ], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [

            // itel
            /(itel) ((\w+))/i
            ], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { 'tablet' : ['p10001l', 'w7001'], '*' : 'mobile' }]], [

            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                
            // Ulefone
            /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [

            // Energizer
            /; (energy ?\w+)(?: bui|\))/i,
            /; energizer ([\w ]+)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [

            // Cat
            /; cat (b35);/i,
            /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [

            // Smartfren
            /((?:new )?andromax[\w- ]+)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [

            // Nothing
            /droid.+; (a(?:015|06[35]|142p?))/i
            ], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [

            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan
            /; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,                             // IMO
            /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
            /(asus)-?(\w+)/i,                                                   // Asus
            /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
            /(jolla)/i,                                                         // Jolla
            /(oppo) ?([\w ]+) bui/i                                             // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /(imo) (tab \w+)/i,                                                 // IMO
            /(kobo)\s(ereader|touch)/i,                                         // Kobo
            /(archos) (gamepad2?)/i,                                            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(surface duo)/i                                                    // Surface Duo
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
            /(u304aa)/i                                                         // AT&T
            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
            /\bsie-(\w*)/i                                                      // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
            /\b(rct\w+) b/i                                                     // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
            /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
            /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
            /\b(tm\d{3}\w+) b/i
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
            /\b(k88) b/i                                                        // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
            /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
            /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
            /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
            /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
            /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
            /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
            /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
            /\b(ph-1) /i                                                        // Essential PH-1
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
            /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
            /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
            /\btu_(1491) b/i                                                    // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
            /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
            /(sprint) (\w+)/i                                                   // Sprint Phones
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

            ///////////////////
            // SMARTTVS
            ///////////////////

            /smart-tv.+(samsung)/i                                              // Samsung
            ], [VENDOR, [TYPE, SMARTTV]], [
            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
            ], [[VENDOR, LG], [TYPE, SMARTTV]], [
            /(apple) ?tv/i                                                      // Apple TV
            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
            /droid.+aft(\w+)( bui|\))/i                                         // Fire TV
            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i                                               // Sharp
            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
            /(bravia[\w ]+)( bui|\))/i                                              // Sony
            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
            /(mitv-\w{5}) bui/i                                                 // Xiaomi
            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
            ], [[TYPE, SMARTTV]], [

            ///////////////////
            // CONSOLES
            ///////////////////

            /(ouya)/i,                                                          // Ouya
            /(nintendo) ([wids3utch]+)/i                                        // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
            /droid.+; (shield) bui/i                                            // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
            /(playstation [345portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

            ///////////////////
            // WEARABLES
            ///////////////////

            /\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i                                   // Samsung Galaxy Watch
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [
            /((pebble))app/i                                                    // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /droid.+; (wt63?0{2,3})\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [

            ///////////////////
            // XR
            ///////////////////

            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /(pico) (4|neo3(?: link|pro)?)/i                                    // Pico
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /; (quest( \d| pro)?)/i                                             // Oculus Quest
            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

            ///////////////////
            // EMBEDDED
            ///////////////////

            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
            ], [VENDOR, [TYPE, EMBEDDED]], [
            /(aeobc)\b/i                                                        // Echo Dot
            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

            ////////////////////
            // MIXED (GENERIC)
            ///////////////////

            /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i    // Android Phones from Unidentified Vendors
            ], [MODEL, [TYPE, MOBILE]], [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
            ], [MODEL, [TYPE, TABLET]], [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
            ], [[TYPE, TABLET]], [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
            ], [[TYPE, MOBILE]], [
            /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]
        ],

        engine : [[

            /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, EDGE+'HTML']], [

            /(arkweb)\/([\w\.]+)/i                                              // ArkWeb
            ], [NAME, VERSION], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo
            /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
            /\b(libweb)/i
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows
            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i             // Windows Phone
            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
            /windows nt 6\.2; (arm)/i,                                        // Windows RT
            /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
            /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [

            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
            /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS/OpenHarmony
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
            /\((series40);/i                                                    // Series 40
            ], [NAME, VERSION], [
            /\(bb(10);/i                                                        // BlackBerry 10
            ], [VERSION, [NAME, BLACKBERRY]], [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
            ], [VERSION, [NAME, 'Symbian']], [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ], [VERSION, [NAME, FIREFOX+' OS']], [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
            ], [VERSION, [NAME, 'webOS']], [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
            ], [VERSION, [NAME, 'watchOS']], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, CHROME+'cast']], [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
            ], [[NAME, CHROMIUM_OS], VERSION],[

            // Smart TVs
            /panasonic;(viera)/i,                                               // Panasonic Viera
            /(netrange)mmh/i,                                                   // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,                                                // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i                                                    // Haiku
            ], [NAME, VERSION], [
            /(sunos) ?([\w\.\d]*)/i                                             // Solaris
            ], [[NAME, 'Solaris'], VERSION], [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i                                                // UNIX
            ], [NAME, VERSION]
        ]
    };

    /////////////////
    // Constructor
    ////////////////

    var UAParser = function (ua, extensions) {

        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
        }

        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;
        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

        this.getBrowser = function () {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                _browser[NAME] = 'Brave';
            }
            return _browser;
        };
        this.getCPU = function () {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function () {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                _device[TYPE] = MOBILE;
            }
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = 'iPad';
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function () {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function () {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {
                _os[NAME] = _uach.platform  
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS);           // backward compatibility
            }
            return _os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return _ua;
        };
        this.setUA = function (ua) {
            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if ("object" !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if ("function" === FUNC_TYPE && __webpack_require__.amdO) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                return UAParser;
            }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof window !== UNDEF_TYPE) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*******************************************!*\
  !*** ./static/js/instrumentation-load.js ***!
  \*******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _honeycombio_opentelemetry_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @honeycombio/opentelemetry-web */ "./node_modules/@honeycombio/opentelemetry-web/dist/esm/index.js");
/* harmony import */ var _opentelemetry_auto_instrumentations_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/auto-instrumentations-web */ "./node_modules/@opentelemetry/auto-instrumentations-web/build/esm/index.js");



const configDefaults = {
  ignoreNetworkEvents: false,
  propagateTraceHeaderCorsUrls: [
    /.+/g, // Regex to match your backend URLs. Update to the domains you wish to include.
  ]
}

const sdk = new _honeycombio_opentelemetry_web__WEBPACK_IMPORTED_MODULE_0__.HoneycombWebSDK({
  endpoint: "https://microservicescollector.honeydemo.io:443/v1/traces", // Send to EU instance of Honeycomb. Defaults to sending to US instance.
  debug: true, // Set to false for production environment.
  apiKey: '', // Replace with your Honeycomb Ingest API Key. Leave this value as '' in order for any CORS to work.
  serviceName: 'browser', // Replace with your application name. Honeycomb uses this string to find your dataset when we receive your data. When no matching dataset exists, we create a new one with this name if your API Key has the appropriate permissions.
  instrumentations: [(0,_opentelemetry_auto_instrumentations_web__WEBPACK_IMPORTED_MODULE_1__.getWebAutoInstrumentations)({
    // Loads custom configuration for xml-http-request instrumentation.
    '@opentelemetry/instrumentation-xml-http-request': configDefaults,
    '@opentelemetry/instrumentation-fetch': configDefaults,
    '@opentelemetry/instrumentation-document-load': configDefaults,
    '@opentelemetry/instrumentation-user-interaction': configDefaults,
  })],
});
sdk.start();
})();

/******/ })()
;
//# sourceMappingURL=instrumentation-load.js.map