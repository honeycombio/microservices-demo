---
description: Using Honeycomb via MCP to analyze ms-demo application
alwaysApply: false
---

## Analyzing ms-demo Services in Honeycomb in general

- Who: SRE or developers who wants to discover incidents and troubleshoot for performance and reliability
- What: Discover generic problems based on how the service performs in request, errors, and duration
- Why: Find potential problematic areas such as high errors, high requests, and potential bottlenecks (slowness)
- How: Measure number of requests, errors, and latencies in duration_ms of the services in ms-demo environment.
  - can span 8 hours in general for the time window.
  - services are defined as 'service.name'
  - span names are defined as 'name'
  - users are defined as 'app.user_id'
  - requests are counts of the events
  - errors are denoted generally by 'error = true'
  - errors can further be categorized by exception type, name, and descriptions
  - latencies are defined generally as 'duration_ms'
  - as for events that are based on http requests, http.url, http.status_code/status, and response times, and request/response bytes can be used to understand further.
- Goal: discover any abnormal trends over period of time, and notify users of any 'interesting' or 'significant' devication of what could be considered as normal and healthy performance. Also suggest recommendations for improving the anomaly. Focus on their service name and the service's entry point so that user understands which service and which entrypoint has the issue.

## Analyzing Sample Rate and Whether it was sampled with Refinery
- There is an attribute that shows how much an event is sampled, and its name is 'Sample Rate'. Sample rate is a positive number, and 1 means 1 out of 1 event, meaning 100% sampled, and 5 means 1 out of 5 events, meaning 20%.
- When events are sampled through refinery, you will also see an attribute called 'meta.refinery.reason' which contains the name of the rule that refinery used to sample the data.
- When events are sampled prior to arriving in refinery, refinery will record the original sample rate that was made previously. The attribute is called 'meta.original_sample_rate' and contains the sample rate.
- meta.refinery_send_reason contains the refinery's send reason. The following are avaialbe:
  - trace_send_got_root: The root span arrived, triggering the sampling decision.
  - trace_send_expired: The TraceTimeout was reached before the root span arrived.
  - trace_send_ejected_full: The trace cache was full, so the trace was ejected.
  - trace_send_ejected_memsize: Refinery was out of memory, so the trace was ejected.
  - trace_send_late_span: Refinery received span that arrived late, after processing and sending the trace.

## Analyze RUM (Real User Monitoring) on Honeycomb Frontend Observability
- RUM telemetries are located under 'browser' dataset
- Telemetries consisted of:
 - web vitals such as LCP, CLS, and INP and their scores
 - document loads on http url
 - resource content loads for the document and their URLs
- session.id is important to understand in getting all the events pertaining to a particular user session.
- errors are consisted of HTTP status codes (2xx, 3xx, 4xx, and 5xx) as well as error = true for any traces, and any presence of exception.message